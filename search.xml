<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hdu7192,巧用sam</title>
      <link href="/2022/08/05/hdu-7192/"/>
      <url>/2022/08/05/hdu-7192/</url>
      
        <content type="html"><![CDATA[<h1 id="AC-DC"><a href="#AC-DC" class="headerlink" title="AC/DC"></a>AC/DC</h1><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=7192">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是2022hdu多校第5场的1008，当时因为通过率过低，题目都没看，结束后看了之后发现是道 $SAM$ 好题，在这里补一下。</p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给出一个初始字符串 $s$ ，有三种操作</p><ul><li>$1\ c$ : 在 $s$ 的末尾加上一个字符 $c$ 。</li><li>$2$ : 删掉 $s$ 的最前面的那个字符。</li><li>$3\ t$ : 这里 $t$ 是一个字符串，表示询问字符串 $t$ 在当前的 $s$ 中出现多少次，即询问当前的 $s$ 中有多少个子串 $t$ 。</li></ul><p>$T(1 \leq T \leq 5)$ 组样例，初始长度为 $n(1 \leq n \leq 10^5)$ ，操作数量为 $m(1 \leq m \leq 10^5)$ 。</p><p>强制在线。</p><h2 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h2><p>看完题之后很容易能够想到 $SAM$ ，可以非常有效的进行查询。</p><p>但是这道题的操作数过多。朴素使用 $SAM$ 会造成超时。</p><p>于是我们想到使用<strong>定期重构</strong>的思路。</p><p>设 $T=\sqrt n$ ，每 $T$ 次添加或删除字符操作后，就重构 $SAM$ 。对于还没有来得及重构的询问，我们使用字符串 $Hash$ 来进行解决。</p><p>对于计数，我们在每次重构 $SAM$ 之后进行一次 $dfs$ 即可更新。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SamNode</span>{</span></span><br><span class="line">    <span class="keyword">int</span> ch[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span> len,fa;</span><br><span class="line">    <span class="built_in">SamNode</span>(){<span class="built_in">memset</span>(ch,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(ch));len=<span class="number">0</span>;}</span><br><span class="line">}sam[MAXX&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> las=<span class="number">1</span>,sam_cnt=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">LL num[MAXX&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> c)</span></span>{</span><br><span class="line">    <span class="keyword">int</span> p=las;<span class="keyword">int</span> np=las=++sam_cnt;</span><br><span class="line">    num[np]=<span class="number">1LL</span>;<span class="comment">//此行为计数用，标记出现过几次 </span></span><br><span class="line">    sam[np].len=sam[p].len+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;p&amp;&amp;!sam[p].ch[c];p=sam[p].fa) sam[p].ch[c]=np;</span><br><span class="line">    <span class="keyword">if</span>(!p) sam[np].fa=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">int</span> q=sam[p].ch[c];</span><br><span class="line">        <span class="keyword">if</span>(sam[q].len==sam[p].len+<span class="number">1</span>) sam[np].fa=q;</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">int</span> nq=++sam_cnt;sam[nq]=sam[q];</span><br><span class="line">            sam[nq].len=sam[p].len+<span class="number">1</span>;</span><br><span class="line">            sam[q].fa=sam[np].fa=nq;</span><br><span class="line">            <span class="keyword">for</span>(;p&amp;&amp;sam[p].ch[c]==q;p=sam[p].fa) sam[p].ch[c]=nq;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; to[MAXX&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now)</span></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> jj:to[now]){</span><br><span class="line">        <span class="built_in">dfs</span>(jj);</span><br><span class="line">        num[now]+=num[jj];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m,l,r,lasl,lasr;</span><br><span class="line"><span class="keyword">char</span> s[MAXX&lt;&lt;<span class="number">1</span>],a[MAXX];</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="comment">//prim 是自己设置的一个素数,具体数值根据情况而定</span></span><br><span class="line">ull p[MAXX&lt;&lt;<span class="number">1</span>],hashs[MAXX&lt;&lt;<span class="number">1</span>],prim=<span class="number">233</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{</span><br><span class="line">    p[<span class="number">0</span>]=<span class="number">1ull</span>;</span><br><span class="line">    <span class="keyword">int</span> maxx=MAXX&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxx;++i)</span><br><span class="line">        p[i]=p[i<span class="number">-1</span>]*prim;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">gethash</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> hashs[r]-hashs[l<span class="number">-1</span>]*p[r-l+<span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,ull jj)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">gethash</span>(l,r)==jj;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sam_cnt;++i){</span><br><span class="line">        sam[i]=<span class="built_in">SamNode</span>();</span><br><span class="line">        to[i].<span class="built_in">clear</span>();</span><br><span class="line">        num[i]=<span class="number">0LL</span>;</span><br><span class="line">    }</span><br><span class="line">    las=sam_cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i)</span><br><span class="line">        <span class="built_in">add</span>(s[i]-<span class="string">'a'</span>);</span><br><span class="line">    lasl=l;lasr=r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sam_cnt;++i)</span><br><span class="line">        to[sam[i].fa].<span class="built_in">emplace_back</span>(i);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    num[<span class="number">0</span>]=num[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> len)</span></span>{</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,now=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i){</span><br><span class="line">        now=sam[now].ch[a[i]-<span class="string">'a'</span>];</span><br><span class="line">    }</span><br><span class="line">    ans=num[now];</span><br><span class="line">    ull hasha=<span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i)</span><br><span class="line">        hasha=hasha*prim+a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=lasl;i&lt;l&amp;&amp;i+len<span class="number">-1</span>&lt;=lasr;++i){</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(i,i+len<span class="number">-1</span>,hasha))</span><br><span class="line">            --ans;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=lasr+<span class="number">1</span>;i&lt;=r&amp;&amp;i-len+<span class="number">1</span>&gt;=l;++i){</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(i-len+<span class="number">1</span>,i,hasha))</span><br><span class="line">            ++ans;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">getchar</span>();<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    l=<span class="number">1</span>;r=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;++i)</span><br><span class="line">        hashs[i]=hashs[i<span class="number">-1</span>]*prim+s[i];</span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> lastans=<span class="number">0</span>,changed=<span class="number">0</span>,rebuild=<span class="number">4000</span>;</span><br><span class="line">    <span class="keyword">while</span>(m--){</span><br><span class="line">        <span class="keyword">int</span> cho;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;cho);</span><br><span class="line">        <span class="keyword">if</span>(cho==<span class="number">1</span>){</span><br><span class="line">            <span class="keyword">char</span> ch;</span><br><span class="line">            <span class="built_in">getchar</span>();<span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;ch);</span><br><span class="line">            ch=((ch-<span class="string">'a'</span>)^lastans)%<span class="number">26</span>+<span class="string">'a'</span>;</span><br><span class="line">            s[++r]=ch;</span><br><span class="line">            hashs[r]=hashs[r<span class="number">-1</span>]*prim+s[r];</span><br><span class="line">            ++changed;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cho==<span class="number">2</span>){</span><br><span class="line">            ++l;++changed;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            <span class="built_in">getchar</span>();<span class="built_in">scanf</span>(<span class="string">"%s"</span>,a+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> len=<span class="built_in">strlen</span>(a+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i)</span><br><span class="line">                a[i]=((a[i]-<span class="string">'a'</span>)^lastans)%<span class="number">26</span>+<span class="string">'a'</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(changed&gt;=rebuild){</span><br><span class="line">                <span class="built_in">build</span>();</span><br><span class="line">                changed=<span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(r==l<span class="number">-1</span>){</span><br><span class="line">                lastans=<span class="number">0</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lastans);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            lastans=<span class="built_in">getans</span>(len);</span><br><span class="line">            <span class="comment">// printf("%s\n",a+1);</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lastans);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    LL t;<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般这种定期重构的代码量会比较大，非常容易出错，要耐下心来认真写。</p><p>对于 $T$ 的取值，这道题的数据量是 $10^5$ ，我们取 $T=4000$ 。</p>]]></content>
      
      
      <categories>
          
          <category> 狂刷字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 后缀自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022杭电多校第5场</title>
      <link href="/2022/08/05/2022hdu-5/"/>
      <url>/2022/08/05/2022hdu-5/</url>
      
        <content type="html"><![CDATA[<h1 id="2022杭电多校第5场"><a href="#2022杭电多校第5场" class="headerlink" title="2022杭电多校第5场"></a>2022杭电多校第5场</h1><p><a href="http://acm.hdu.edu.cn/contest/problems?cid=1048">contest传送门</a></p><h2 id="战况"><a href="#战况" class="headerlink" title="战况"></a>战况</h2><p><img src="/2022/08/05/2022hdu-5/standing.png" alt="standing"></p><p>这次总体来看没有之前那么猛</p><p>这次我也算是写了0.5道，我和姚老师讨论出了10的结论。</p><p>这次有字符串题目，但是通过率都非常低，当时的08连题都没看。</p><h2 id="补题"><a href="#补题" class="headerlink" title="补题"></a>补题</h2><h3 id="08-AC-DC"><a href="#08-AC-DC" class="headerlink" title="08-AC/DC"></a>08-AC/DC</h3><p>我感觉这是一道非常好的字符串题目，练习 $SAM$  的使用技巧的非常好的题。于是单独写了一篇。</p>]]></content>
      
      
      <categories>
          
          <category> 2022杭电多校 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021江苏省赛H题</title>
      <link href="/2022/08/01/cf-gym-103495-h/"/>
      <url>/2022/08/01/cf-gym-103495-h/</url>
      
        <content type="html"><![CDATA[<h1 id="Reverse-the-String"><a href="#Reverse-the-String" class="headerlink" title="Reverse the String"></a>Reverse the String</h1><p><a href="https://codeforces.com/gym/103495/problem/H">题目传送门</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出一个字符串，有一种操作，将其中一个子串反转，我们可以进行最多一次这样的操作，需要使得这个字符串字典序最小。</p><p>$T$ 组数据， $1 \leq |s| \leq 10^5$ ， $\sum|s| \leq 1.5 * 10^6$ </p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这里又要用到<strong>字符串哈希</strong>了。</p><p>我们使用一个 $pair$ 数组 $suf[]$ 来存下标 $i$ 之后的最小的字母及其最后出现的位置。</p><p>容易想到，如果每个位置上的字母都不比后面的字母大，那么这个字符串就已经是字典序最小的了，这时候直接输出就行。</p><p>如果对于一个位置 $i$ ， $suf[i].first$ 要小于 $s[i]$ ，那么这时，我们找到这个最小的 $i$ ，说明这时的 $i$ 就是我们需要进行反转操作的子串的起点。我们可以遍历后面的每一个点作为字串的终点，找出一个最优解即可。</p><p>那么我们如何进行比较两个终点哪个更优呢，我们可以考虑使用字符串哈希加二分，初始化两个哈希，一个正着，一个反着，对于两个终点，我们使用二分查找反转后的子串的 $lcp$ ，那么比较这个 $lcp$ 后面的那个字母大小关系即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> a[MAXX],s[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="comment">//prim 是自己设置的一个素数,具体数值根据情况而定</span></span><br><span class="line">ull p[MAXX],hasha[MAXX],hashs[MAXX],prim=<span class="number">233</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{</span><br><span class="line">    p[<span class="number">0</span>]=<span class="number">1ull</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;MAXX;++i)</span><br><span class="line">        p[i]=p[i<span class="number">-1</span>]*prim;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">gethasha</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> hasha[r]-hasha[l<span class="number">-1</span>]*p[r-l+<span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">gethashs</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> hashs[l]-hashs[r+<span class="number">1</span>]*p[r-l+<span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line"><span class="comment">// for(int i=1;i&lt;=n;++i)</span></span><br><span class="line"><span class="comment">//     hash[i]=hash[i-1]*prim+a[i];</span></span><br><span class="line"></span><br><span class="line">P suf[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">xiao</span><span class="params">(<span class="keyword">int</span> st,<span class="keyword">int</span> en,<span class="keyword">int</span> enn)</span></span>{</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=enn-st+<span class="number">1</span>,mid;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r){</span><br><span class="line">        mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(mid==l){</span><br><span class="line">            ++mid;</span><br><span class="line">            ull jj,kk;</span><br><span class="line">            <span class="keyword">if</span>(mid&gt;en-st+<span class="number">1</span>){</span><br><span class="line">                jj=<span class="built_in">gethashs</span>(st,en)*p[mid-(en-st+<span class="number">1</span>)]+<span class="built_in">gethasha</span>(en+<span class="number">1</span>,en+mid-(en-st+<span class="number">1</span>));</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                jj=<span class="built_in">gethashs</span>(en-mid+<span class="number">1</span>,en);</span><br><span class="line">            kk=<span class="built_in">gethashs</span>(enn-mid+<span class="number">1</span>,enn);</span><br><span class="line">            <span class="keyword">if</span>(jj==kk)</span><br><span class="line">                l=mid;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            ull jj,kk;</span><br><span class="line">            <span class="keyword">if</span>(mid&gt;en-st+<span class="number">1</span>){</span><br><span class="line">                jj=<span class="built_in">gethashs</span>(st,en)*p[mid-(en-st+<span class="number">1</span>)]+<span class="built_in">gethasha</span>(en+<span class="number">1</span>,en+mid-(en-st+<span class="number">1</span>));</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                jj=<span class="built_in">gethashs</span>(en-mid+<span class="number">1</span>,en);</span><br><span class="line">            kk=<span class="built_in">gethashs</span>(enn-mid+<span class="number">1</span>,enn);</span><br><span class="line">            <span class="keyword">if</span>(jj==kk)</span><br><span class="line">                l=mid;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r=mid<span class="number">-1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l&gt;=en-st+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> a[st+l]&lt;a[enn-l];</span><br><span class="line">    <span class="keyword">return</span> a[en-l]&lt;a[enn-l];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">getchar</span>();<span class="built_in">scanf</span>(<span class="string">"%s"</span>,a+<span class="number">1</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(a+<span class="number">1</span>);</span><br><span class="line">    a[n+<span class="number">1</span>]=<span class="string">'z'</span>;</span><br><span class="line">    hashs[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        hasha[i]=hasha[i<span class="number">-1</span>]*prim+a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">        hashs[i]=hashs[i+<span class="number">1</span>]*prim+a[i];</span><br><span class="line">    </span><br><span class="line">    suf[n]=<span class="built_in">P</span>(a[n],n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;--i){</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;suf[i+<span class="number">1</span>].first)</span><br><span class="line">            suf[i]=<span class="built_in">P</span>(a[i],i);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            suf[i]=suf[i+<span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> st=<span class="number">0</span>,en=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;suf[i].first){</span><br><span class="line">            st=i,en=suf[i].second;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span>(st==<span class="number">0</span>){</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,a[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=en<span class="number">-1</span>;i&gt;st;--i)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">xiao</span>(st,i,en))</span><br><span class="line">            en=i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printf("*%d %d\n",st,en);//</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;st;++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=en;i&gt;=st;--i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=en+<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>为什么又是字符串哈希，这种字符串哈希虽然产生冲突的概率很小很小，但是他确实是存在着冲突的，我一般都不敢用这个东西，怕测试点里面会有卡这个冲突的，而且也比较容易被hack，无法完全保证正确性。</p><p>字符串哈希我是真不敢用，存在着冲突的概率。但是我想不通为啥好多题都要用到这个，而且正解就是用的这个。</p>]]></content>
      
      
      <categories>
          
          <category> 狂刷字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 字符串哈希 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022牛客多校第4场</title>
      <link href="/2022/07/30/2022nowcoder-4/"/>
      <url>/2022/07/30/2022nowcoder-4/</url>
      
        <content type="html"><![CDATA[<h1 id="2022牛客多校第4场"><a href="#2022牛客多校第4场" class="headerlink" title="2022牛客多校第4场"></a>2022牛客多校第4场</h1><p><a href="https://ac.nowcoder.com/acm/contest/33189">contest传送门</a></p><h2 id="战况"><a href="#战况" class="headerlink" title="战况"></a>战况</h2><p><img src="/2022/07/30/2022nowcoder-4/standing.png" alt="standing"></p><p>这次发挥比较平常，看题解才发现这次有一道字符串题目，但是那道题只有一个队写了出来。</p><h2 id="补题"><a href="#补题" class="headerlink" title="补题"></a>补题</h2><h3 id="K-NIO’s-Sword"><a href="#K-NIO’s-Sword" class="headerlink" title="K-NIO’s Sword"></a>K-NIO’s Sword</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>玩家要打怪，初始有一把攻击力为 $0$ 的剑，需要按顺序从 $1$ 到 $n$ 打怪。</p><p>只有剑的攻击力和怪的编号同余的时候才能打败怪物。</p><p>玩家可以升级剑，每次升级剑相当于在当前攻击力的后面加上一个数字。</p><p>问最少需要升级多少次。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>记录当前攻击力为 $A$ ，准备打编号为 $i$ 的怪，为了打败他，要进行 $k$ 次升级。</p><p>则有式子 $(i-1)*10^k+x \equiv i(mod n) (0 \leq x &lt; 10^k)$ 。</p><p>直接暴力枚举 $k$ 的值，直到得到的 $w&lt;10^k$ 。 $k$ 即为后面需要加的位数。</p><p>当 $n=1$ 时要特判答案为 $0$ 。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line">LL n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">    LL ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>){</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line">        LL now=<span class="number">1</span>,jj=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span>(;;){</span><br><span class="line">            LL kk=(i-((i<span class="number">-1</span>)*jj)%n+n)%n;</span><br><span class="line">            <span class="keyword">if</span>(kk&gt;=<span class="number">0</span>&amp;&amp;kk&lt;jj){</span><br><span class="line">                ans+=now;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            ++now;</span><br><span class="line">            jj*=<span class="number">10</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//int t;scanf("%d",&amp;t);</span></span><br><span class="line"><span class="comment">//while(t--)</span></span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>要根据题目推式子。</p><h3 id="H-Wall-Builder-II"><a href="#H-Wall-Builder-II" class="headerlink" title="H-Wall Builder II"></a>H-Wall Builder II</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给出 $n$ 个 $1 \times 1$ 的矩形， $n-1$ 个 $1 \times 2$ 的矩形， $n-2$ 个 $1 \times 3$ 的矩形 $\dots$ ， $1$ 个 $1 \times n$ 的矩形，把这些矩形拼成一个大矩形，使得这个大矩形周长最小，这些矩形不能旋转。</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>我们可以直到这个大矩形的总面积 $S$ 是固定的，我们可以枚举所有可能的长和宽，寻找能不能拼出这个大矩形。使用贪心的思想进行枚举，枚举顺序是周长从小到大即可。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">205</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,num[MAXX],S,sum;</span><br><span class="line">array&lt;<span class="keyword">int</span>,4&gt; ans[MAXX*MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    sum=n*(n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(num));</span><br><span class="line">    S=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line">        num[i]=n+<span class="number">1</span>-i;</span><br><span class="line">        S+=i*num[i];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> anslen=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="built_in">sqrt</span>((<span class="keyword">double</span>)S);h&gt;=<span class="number">1</span>;--h){</span><br><span class="line">        <span class="keyword">int</span> l=S/h;</span><br><span class="line">        <span class="keyword">if</span>(h*l!=S) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line">            num[i]=n+<span class="number">1</span>-i;</span><br><span class="line">            S+=i*num[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> cannot=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> hi=<span class="number">1</span>;hi&lt;=h;++hi){</span><br><span class="line">            <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(len&lt;l){</span><br><span class="line">                <span class="keyword">bool</span> changed=<span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="built_in">min</span>(l-len,n);i&gt;=<span class="number">1</span>;--i){</span><br><span class="line">                    <span class="keyword">if</span>(num[i]){</span><br><span class="line">                        ans[++p]={len,hi<span class="number">-1</span>,len+i,hi};</span><br><span class="line">                        len+=i;changed=<span class="literal">true</span>;</span><br><span class="line">                        --num[i];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(!changed){</span><br><span class="line">                    cannot=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(cannot) <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(cannot) <span class="keyword">continue</span>;</span><br><span class="line">        anslen=(l+h)*<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,anslen);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sum;++i){</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d %d\n"</span>,ans[i][<span class="number">0</span>],ans[i][<span class="number">1</span>],ans[i][<span class="number">2</span>],ans[i][<span class="number">3</span>]);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>当时没想到可以直接这样枚举，也没有考虑面积恒定这一点，思想一定要多元化。</p>]]></content>
      
      
      <categories>
          
          <category> 2022牛客多校 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022杭电多校第4场</title>
      <link href="/2022/07/28/2022hdu-4/"/>
      <url>/2022/07/28/2022hdu-4/</url>
      
        <content type="html"><![CDATA[<h1 id="2022杭电多校第4场"><a href="#2022杭电多校第4场" class="headerlink" title="2022杭电多校第4场"></a>2022杭电多校第4场</h1><p><a href="http://acm.hdu.edu.cn/contest/problems?cid=1047">contest传送门</a></p><h2 id="战况"><a href="#战况" class="headerlink" title="战况"></a>战况</h2><p><img src="/2022/07/28/2022hdu-4/standing.png" alt="standing"></p><p>这次队友的发挥直接起飞，我依旧是算是爆零了((</p><p>这次还是没有出现字符串题目。</p><h2 id="补题"><a href="#补题" class="headerlink" title="补题"></a>补题</h2><h3 id="07-Climb-Stairs"><a href="#07-Climb-Stairs" class="headerlink" title="07-Climb Stairs"></a>07-Climb Stairs</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>有点像最近网上多次出现的智障广告小游戏</p><p>主人公，有一个战斗力，初始时在第 $0$ 层，每一次最多可以向上跳 $k$ 层，或者向下跳一层。每一层都有一个怪兽，有战斗力 $a_i$ 。主人公每次只能达到怪物的战斗力小于等于他的战斗力的所在的层，每到达一层，他都能抢夺怪物的战斗力，加到自己的战斗力上。</p><p>每一层最多只能访问一次。</p><p>问他能否把所有的怪物都消灭。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>根据主人公的运动方式限制，可以得出他只能按照类似于这种运动方式进行运动。</p><img src="/2022/07/28/2022hdu-4/img-1.png" alt="img-1" style="zoom:10%;"><p>于是我们可以直接使用贪心思想进行模拟即可，记录当前的战斗力，当前的位置，要去的位置。</p><p>直接进行模拟</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line">LL now,a[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%lld%d"</span>,&amp;n,&amp;now,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,las=<span class="number">0</span>;</span><br><span class="line">    LL need=<span class="number">0LL</span>,sum=<span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">bool</span> can=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line">        <span class="keyword">if</span>(las+k&lt;i) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=need)</span><br><span class="line">            need=a[i]-now;</span><br><span class="line">        <span class="keyword">else</span>{</span><br><span class="line">            need=<span class="built_in">max</span>(need-a[i],a[i]-now);</span><br><span class="line">        }</span><br><span class="line">        sum+=a[i];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;=now&amp;&amp;need&lt;=<span class="number">0</span>){</span><br><span class="line">            <span class="keyword">if</span>(i==n) can=<span class="literal">true</span>;</span><br><span class="line">            now+=sum;</span><br><span class="line">            las=l+<span class="number">1</span>;</span><br><span class="line">            l=i;</span><br><span class="line">            need=sum=<span class="number">0LL</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(can) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="11-Link-is-as-bear"><a href="#11-Link-is-as-bear" class="headerlink" title="11-Link is as bear"></a>11-Link is as bear</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给出一个长度为 $n$ 的 $long long$ 类型的数组，有一种操作，选个 $l,r\ (1 \leq l \leq r \leq n)$ ，使里面所有的 $a[i]=xor(l,r)$ ，里面的 $xor(l,r)$ 指的是里面所有元素异或起来的值。</p><p>可以进行无数次操作，最后要求使得所有的数都相等且尽可能大，问这个最大的值等于多少。</p><p>题目保证初始数组中最少有两个数相等。</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>可以证明，这道题中，从这 $n$ 个数里面任取一些数异或起来的方案，都是可以构造出对应的方案来做到的。</p><p>然后，这道题就转化为了在 $n$ 个数中选择一些数，使得这些数的异或值最大。</p><p>发现这是一个线性基的板子，直接板子题。</p><p>证明的话我直接把题解的证明放这</p><img src="/2022/07/28/2022hdu-4/img-2.png" alt="img-2"><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line">LL d[<span class="number">70</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">62</span>;++i)</span><br><span class="line">        d[i]=<span class="number">0LL</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(LL jj)</span></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">62</span>;i&gt;=<span class="number">0</span>;--i){</span><br><span class="line">        <span class="keyword">if</span>(jj&amp;(<span class="number">1LL</span>&lt;&lt;i)){</span><br><span class="line">            <span class="keyword">if</span>(!d[i]){</span><br><span class="line">                d[i]=jj;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            jj^=d[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">getmax</span><span class="params">()</span></span>{</span><br><span class="line">    LL ret=<span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">62</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        ret=<span class="built_in">max</span>(ret,ret^d[i]);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">LL a[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">        <span class="built_in">add</span>(a[i]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="built_in">getmax</span>());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="01-Link-with-Bracket-Sequence-II"><a href="#01-Link-with-Bracket-Sequence-II" class="headerlink" title="01-Link with Bracket Sequence II"></a>01-Link with Bracket Sequence II</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>类似于上次的合法括号序列方案。</p><p>有长度为 $n$ 的序列，这次里面有 $m$ 种括号(其实时整数表示括号)，分别用一个正数和一个负数来表示左括号和对应的右括号。同样丢失了若干位置的数字，这里是知道丢失的位置的下标，输入时，输入 $0$ 表示这个位置的数字丢失了。</p><p>问有多少种合法的括号序列方案可以补全。</p><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>考虑<strong>区间dp</strong>， $f[i][j]$ 表示 $a[i]$ 和 $a[j]$ 匹配时子序列 $[i,j]$ 的合法序列方案数， $g[i][j]$ 表示子序列 $[i,j]$ 中所有合法序列方案数。</p><ul><li>枚举 $i,j$ 位置上内容，如果能够形成匹配的括号对，则 $f[i][j]=k*g[i+1][j-1]$ ，其中 $k$ 为使得 $a[i]$ 和 $a[j]$ 相匹配的方案数</li><li>$g[i][j]=g[i][k-1]+f[k][j]$ ，其中 $k$ 为枚举 $[i,j]$ 中的值。</li></ul><p>最后答案取 $g[1][n]$ 即可</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">505</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a[MAXX];</span><br><span class="line">LL f[MAXX][MAXX],g[MAXX][MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>){</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    <span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(g));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i)</span><br><span class="line">        g[i+<span class="number">1</span>][i]=<span class="number">1LL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">2</span>;len&lt;=n;len+=<span class="number">2</span>){</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>;l+len<span class="number">-1</span>&lt;=n;++l){</span><br><span class="line">            <span class="keyword">int</span> r=l+len<span class="number">-1</span>;</span><br><span class="line">            LL jj=<span class="number">0LL</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[l]&gt;=<span class="number">0</span>&amp;&amp;a[r]&lt;=<span class="number">0</span>){</span><br><span class="line">                <span class="keyword">if</span>(a[l]==<span class="number">0</span>&amp;&amp;a[r]==<span class="number">0</span>)</span><br><span class="line">                    jj=(LL)m;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(a[l]==<span class="number">0</span>||a[r]==<span class="number">0</span>)</span><br><span class="line">                    jj=<span class="number">1LL</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(a[l]+a[r]==<span class="number">0</span>)</span><br><span class="line">                    jj=<span class="number">1LL</span>;</span><br><span class="line">            }</span><br><span class="line">            f[l][r]=g[l+<span class="number">1</span>][r<span class="number">-1</span>]*jj%mod;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=l;k&lt;=r;++k)</span><br><span class="line">                g[l][r]=(g[l][r]+g[l][k<span class="number">-1</span>]*f[k][r]%mod)%mod;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,g[<span class="number">1</span>][n]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2022杭电多校 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022杭电多校第3场</title>
      <link href="/2022/07/26/2022hdu-3/"/>
      <url>/2022/07/26/2022hdu-3/</url>
      
        <content type="html"><![CDATA[<h1 id="2022杭电多校第3场"><a href="#2022杭电多校第3场" class="headerlink" title="2022杭电多校第3场"></a>2022杭电多校第3场</h1><p><a href="http://acm.hdu.edu.cn/contest/problems?cid=1046">contest传送门</a></p><h2 id="战况"><a href="#战况" class="headerlink" title="战况"></a>战况</h2><p><img src="/2022/07/26/2022hdu-3/standing.png" alt="standing"></p><p>这次的题目确实比前两次要难了不少，过题数量比之前要少。</p><p>这次里面没有出字符串题目。</p><h2 id="补题"><a href="#补题" class="headerlink" title="补题"></a>补题</h2><h3 id="01-Equipment-Upgrade"><a href="#01-Equipment-Upgrade" class="headerlink" title="01-Equipment Upgrade"></a>01-Equipment Upgrade</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>有一把武器需要升级，从 $0$ 级升级到 $n$ 级。</p><p>对于当前的等级 $i$ ，花费 $c_i$ 金币进行升级，升级成功的概率是 $p_i$ ，会升级到 $i+1$ 级，也有可能升级失败，之后会有 $(1-p_i)\frac{w_j}{\sum_{k=1}^{i}w_k}$ 的概率变成 $i-j$ 级$(1 \leq j \leq i)$ 。</p><p>求从 $0$ 级升级到 $n$ 级所需要的金币的期望。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>考虑概率DP， $dp[i]$ 表示从第 $i$ 级升级到第 $n$ 级所需要的金币的期望，显然 $dp[n]=0$ 。</p><p>首先根据题目可以写出这样一个式子<br>$$<br>dp[i]=p[i]*dp[i+1]+(1-p[i])\frac{\sum_{j=1}^{i}(w[j]*dp[i-j])}{\sum_{k=1}^i w[k]}+c[i]<br>$$<br>这个式子比较复杂，无法进行迭代，于是进行化简，</p><p>下面把 $\sum_{k=1}^i w[k]$ 记作 $pre[i]$ ，即 $w$ 数组的前缀和，</p><p>化简之后得<br>$$<br>dp[i]=\frac{dp[i-1]-c[i-1]}{p[i-1]}-\frac{1-p[i-1]}{pre[i-1]*p[i-1]}\sum_{j=1}^{i-1}(w[j]<em>dp[i-1-j])<br>$$<br>我们发现这样的形式仍然不好处理，于是我们想到了每一个 $dp[i]$ 都可以使用 $a</em>dp[0]+b$ 这样的一个形式来表示，</p><p>于是我们可以用两个数组 $a[i],b[i]$ 来辅助表示， $dp[i]=a[i]*dp[0]+b[i]$ </p><p>这里只把公式推导和思路写出，后面的具体实现需要使用分治+卷积，卷积我还不会，后面的就先不写了</p><h3 id="09-Package-Delivery"><a href="#09-Package-Delivery" class="headerlink" title="09-Package Delivery"></a>09-Package Delivery</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>小Q有 $n$ 个包裹，每个包裹有它的存放时间段 $[l[i],r[i]]$ ，暂存点最多可以同时存放 $k$ 个包裹，问小Q最少可以去取多少次包裹</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>使用优先队列来处理这个区间问题，首先将区间进行排序，之后对于每一个区间，如果当前的 $l[i]$ 大于优先队列顶元素，那么就必须要去取一次包裹，但是也有可能这次取完包裹之后 $l[i]$ 仍然大于优先队列顶元素，需要使用一个 $while$ 循环来进行。遍历结束之后再判断优先队列里面是否还有元素。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line">P a[MAXX];</span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>,vector&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt; pq;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a[i].first,&amp;a[i].second);</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line">        <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>()&amp;&amp;a[i].first&gt;pq.<span class="built_in">top</span>()){</span><br><span class="line">            ++ans;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;++j){</span><br><span class="line">                <span class="keyword">if</span>(pq.<span class="built_in">empty</span>()) <span class="keyword">break</span>;</span><br><span class="line">                pq.<span class="built_in">pop</span>();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        pq.<span class="built_in">emplace</span>(a[i].second);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span>(!pq.<span class="built_in">empty</span>()){</span><br><span class="line">        ++ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;++j){</span><br><span class="line">            <span class="keyword">if</span>(pq.<span class="built_in">empty</span>()) <span class="keyword">break</span>;</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="12-Two-Permutations"><a href="#12-Two-Permutations" class="headerlink" title="12-Two Permutations"></a>12-Two Permutations</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>有两个长度为 $n$ 的排列 $P$ 和 $Q$ ，有一种操作，每一次都取走 $P$ 或 $Q$ 的最左边的数，放到一个新的数组 $R$ 中，直到取完为止。</p><p>输入两个长度为 $n$ 的排列 $P$ 和 $Q$ ，一个长度为 $2n$ 的数组 $S$ ，问有多少种取法能否使得组成的 $R$ 和 $S$ 相等。</p><p>两种取法不同当且仅当其中有至少一次取的排列不同。（第 $i$ 次取 $P$ 和第 $i$ 次取 $Q$ 即为不同）。</p><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>首先要记录一下数组 $S$ 中每个数字的出现次数，特判一下如果有数字的出现次数不是 $2$ ，则直接输出 $0$ 。</p><p>我们考虑动态规划，设 $dp[i][j]$ 表示排列 $P$ 的前 $i$ 项都匹配上了 $S$ ，而且 $P_i$ 匹配的是 $S$ 中第 $j$ 次出现 $P_i$ 的情况下的所有方案数。考虑状态转移，对于每一个 $dp[i][j]$ 的状态，我们枚举 $P_{i+1}$ 要匹配 $S$ 中的哪个位置，即匹配第一次出现的那个还是第二次出现的那个，此时，我们必须保证 $P_i$ 匹配的位置与 $P_{i+1}$ 匹配的位置中间的那段连续子序列必须和 $Q$ 中对应的子序列完全匹配。此时，我们考虑使用字符串 $Hash$ 进行 $O(1)$ 判断。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">300005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> LL mod=<span class="number">998244353</span>;</span><br><span class="line">LL n,n2,a[MAXX],s[MAXX],d[<span class="number">2</span>*MAXX],num[MAXX];</span><br><span class="line">ull ncf[<span class="number">2</span>*MAXX],hs[MAXX],hd[<span class="number">2</span>*MAXX],p=<span class="number">233</span>;</span><br><span class="line">LL id[MAXX][<span class="number">2</span>],dp[MAXX][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{</span><br><span class="line">    ncf[<span class="number">0</span>]=<span class="number">1ull</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">2</span>*MAXX;++i)</span><br><span class="line">        ncf[i]=ncf[i<span class="number">-1</span>]*p;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">gethash</span><span class="params">(ull *h,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> h[r]-h[l<span class="number">-1</span>]*ncf[r-l+<span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> ls,<span class="keyword">int</span> rs,<span class="keyword">int</span> ld,<span class="keyword">int</span> rd)</span></span>{</span><br><span class="line">    <span class="keyword">if</span>(ls&gt;rs) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(ls&lt;<span class="number">1</span>||rs&gt;(<span class="keyword">int</span>)n||ld&lt;<span class="number">1</span>||rd&gt;(<span class="keyword">int</span>)n2) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">gethash</span>(hs,ls,rs)==<span class="built_in">gethash</span>(hd,ld,rd);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);n2=n+n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;s[i]),hs[i]=hs[i<span class="number">-1</span>]*p+s[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        id[i][<span class="number">0</span>]=id[i][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n2;++i){</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;d[i]);</span><br><span class="line">        hd[i]=hd[i<span class="number">-1</span>]*p+d[i];</span><br><span class="line">        <span class="keyword">if</span>(id[d[i]][<span class="number">0</span>])</span><br><span class="line">            id[d[i]][<span class="number">1</span>]=i;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            id[d[i]][<span class="number">0</span>]=i;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">bool</span> cannot=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        <span class="keyword">if</span>((!id[i][<span class="number">0</span>])||(!id[i][<span class="number">1</span>])){</span><br><span class="line">            cannot=<span class="literal">true</span>;<span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">if</span>(cannot){</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//init</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        dp[i][<span class="number">0</span>]=dp[i][<span class="number">1</span>]=<span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(<span class="number">1</span>,id[a[<span class="number">1</span>]][<span class="number">0</span>]<span class="number">-1</span>,<span class="number">1</span>,id[a[<span class="number">1</span>]][<span class="number">0</span>]<span class="number">-1</span>))</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(<span class="number">1</span>,id[a[<span class="number">1</span>]][<span class="number">1</span>]<span class="number">-1</span>,<span class="number">1</span>,id[a[<span class="number">1</span>]][<span class="number">1</span>]<span class="number">-1</span>))</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;++j){</span><br><span class="line">            <span class="keyword">if</span>(dp[i][j]){</span><br><span class="line">                <span class="keyword">int</span> jj=id[a[i]][j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">1</span>;++k){</span><br><span class="line">                    <span class="keyword">int</span> kk=id[a[i+<span class="number">1</span>]][k];</span><br><span class="line">                    <span class="keyword">if</span>(kk&lt;=jj) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">check</span>(jj-i+<span class="number">1</span>,kk-i<span class="number">-1</span>,jj+<span class="number">1</span>,kk<span class="number">-1</span>)){</span><br><span class="line">                        dp[i+<span class="number">1</span>][k]=(dp[i+<span class="number">1</span>][k]+dp[i][j])%mod;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    LL ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;++i){</span><br><span class="line">        <span class="keyword">if</span>(dp[n][i]){</span><br><span class="line">            <span class="keyword">int</span> jj=id[a[n]][i];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>(jj-n+<span class="number">1</span>,n,jj+<span class="number">1</span>,n2))</span><br><span class="line">                ans=(ans+dp[n][i])%mod;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>得多练练 $dp$ 了！</p>]]></content>
      
      
      <categories>
          
          <category> 2022杭电多校 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022牛客多校第3场</title>
      <link href="/2022/07/25/2022nowcoder-3/"/>
      <url>/2022/07/25/2022nowcoder-3/</url>
      
        <content type="html"><![CDATA[<h1 id="2022牛客多校第3场"><a href="#2022牛客多校第3场" class="headerlink" title="2022牛客多校第3场"></a>2022牛客多校第3场</h1><p><a href="https://ac.nowcoder.com/acm/contest/33188">contest传送门</a></p><h2 id="战况"><a href="#战况" class="headerlink" title="战况"></a>战况</h2><p><img src="/2022/07/25/2022nowcoder-3/standing.png" alt="standing"></p><p>整体来看没有前几次的好，今天的字符串题目 $H$ 我也没有写出来。</p><h2 id="补题"><a href="#补题" class="headerlink" title="补题"></a>补题</h2><h3 id="H-Hacker"><a href="#H-Hacker" class="headerlink" title="H-Hacker"></a>H-Hacker</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给出长度为 $n$ 的小写字符串 $A$ 和 $k$ 个长度为 $m$ 的小写字符串 $B_1 … B_k$ ， $B$ 的每个位置拥有统一的权值 $v_1 … v_m$ ，对于每个 $B_i$ 求最大和区间满足该区间构成的字符串是 $A$ 的子串（空区间合法）。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>首先用给字符串 $A$ 建立一个后缀自动机</p><p>之后对于每个字符串 $B_i$ ，通过在后缀自动机上匹配的方法进行对 $B_i$ 的匹配，对于 $B_i$ 的每个位置 $j$ ，求以 $B_{ij}$ 为结尾的在 $A$ 中出现过的最长后缀的最大区间和，每一次取 $max$ 值，遍历完一个串之后就是这个串的 $ans$ 。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">500005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line">LL a[MAXN];</span><br><span class="line"><span class="keyword">char</span> s[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SamNode</span>{</span></span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> len,fa;</span><br><span class="line"><span class="built_in">SamNode</span>(){<span class="built_in">memset</span>(ch,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(ch));len=<span class="number">0</span>;}</span><br><span class="line">}sam[MAXX&lt;&lt;<span class="number">1</span>];</span><br><span class="line">SamNode temp[MAXX];</span><br><span class="line"><span class="keyword">int</span> las=<span class="number">1</span>,sam_cnt=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> c)</span></span>{</span><br><span class="line"><span class="keyword">int</span> p=las;<span class="keyword">int</span> np=las=++sam_cnt;</span><br><span class="line">sam[np].len=sam[p].len+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;p&amp;&amp;!sam[p].ch[c];p=sam[p].fa) sam[p].ch[c]=np;</span><br><span class="line"><span class="keyword">if</span>(!p) sam[np].fa=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">int</span> q=sam[p].ch[c];</span><br><span class="line"><span class="keyword">if</span>(sam[q].len==sam[p].len+<span class="number">1</span>) sam[np].fa=q;</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">int</span> nq=++sam_cnt;sam[nq]=sam[q];</span><br><span class="line">sam[nq].len=sam[p].len+<span class="number">1</span>;</span><br><span class="line">sam[q].fa=sam[np].fa=nq;</span><br><span class="line"><span class="keyword">for</span>(;p&amp;&amp;sam[p].ch[c]==q;p=sam[p].fa) sam[p].ch[c]=nq;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="built_in">getchar</span>();<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i)</span><br><span class="line"><span class="built_in">add</span>(s[i]-<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i){</span><br><span class="line"><span class="built_in">getchar</span>();<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">LL ans=<span class="number">0LL</span>,anss=<span class="number">0LL</span>;</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=len;++j){</span><br><span class="line"><span class="keyword">if</span>(anss&gt;<span class="number">0</span>&amp;&amp;sam[now].ch[s[j]-<span class="string">'a'</span>]){</span><br><span class="line">anss+=a[j];</span><br><span class="line">now=sam[now].ch[s[j]-<span class="string">'a'</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sam[<span class="number">1</span>].ch[s[j]-<span class="string">'a'</span>]){</span><br><span class="line">anss=a[j];</span><br><span class="line">now=sam[<span class="number">1</span>].ch[s[j]-<span class="string">'a'</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line">anss=<span class="number">0LL</span>;</span><br><span class="line">now=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">ans=<span class="built_in">max</span>(ans,anss);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//LL t;scanf("%lld",&amp;t);</span></span><br><span class="line"><span class="comment">//while(t--)</span></span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在 $SAM$ 中<strong>不一定</strong>非要把每个字符串都加到 $SAM$ 中才能进行子串匹配</p><p>在这道题中就是只对原串 $A$ 建立了 $SAM$ ，然后对于每一个新串，通过 $trie树$ 的匹配方式进行匹配即可。</p><h3 id="J-Journey"><a href="#J-Journey" class="headerlink" title="J-Journey"></a>J-Journey</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给定一个城市有若干十字路口，右转不需要等红灯，而直行、左转、掉头都需要等红灯，求从起点的路到终点的路最少等多少次红灯。</p><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>把城市中的每条路当成一个节点，把每个十字路口进行的四种操作当成边，建图，直接 $dijkstra$ 即可解决。</p><p>或者也可以不建图，可以直接在 $dijkstra$ 进行顶点转移的操作，最后达到的效果是一样的。</p><p>还有一种做法， $bfs$ ，具体原理和上面类似，不再赘述。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,P&gt; PP;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">500005</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hashfunc</span>{</span></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">size_t</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> pair&lt;T, U&gt; &amp;i)</span> <span class="keyword">const</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> (LL)(i.first)*<span class="number">1000000LL</span>+(LL)(i.second);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,stx,sty,enx,eny;</span><br><span class="line">unordered_map&lt;P,<span class="keyword">int</span>,hashfunc&gt; dij;</span><br><span class="line"><span class="keyword">int</span> c[MAXX][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijs</span><span class="params">()</span></span>{</span><br><span class="line">priority_queue&lt;PP,vector&lt;PP&gt;,greater&lt;PP&gt; &gt; pq;</span><br><span class="line">pq.<span class="built_in">emplace</span>(<span class="number">0</span>,<span class="built_in">P</span>(stx,sty));</span><br><span class="line">dij[<span class="built_in">P</span>(stx,sty)]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!pq.<span class="built_in">empty</span>()){</span><br><span class="line">PP now=pq.<span class="built_in">top</span>();pq.<span class="built_in">pop</span>();</span><br><span class="line">P mid=now.second;</span><br><span class="line"><span class="keyword">if</span>(dij[mid]!=now.first) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> jk=now.second.second;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;++i){</span><br><span class="line"><span class="keyword">if</span>(!c[jk][i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> too=c[jk][i],lenn=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(c[jk][(i+<span class="number">3</span>)%<span class="number">4</span>]==now.second.first)</span><br><span class="line">lenn=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!dij.<span class="built_in">count</span>(<span class="built_in">P</span>(jk,too))||dij[<span class="built_in">P</span>(jk,too)]&gt;dij[mid]+lenn){</span><br><span class="line">dij[<span class="built_in">P</span>(jk,too)]=dij[mid]+lenn;</span><br><span class="line">pq.<span class="built_in">emplace</span>(dij[<span class="built_in">P</span>(jk,too)],<span class="built_in">P</span>(jk,too));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;++j)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c[i][j]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;stx,&amp;sty,&amp;enx,&amp;eny);</span><br><span class="line"><span class="built_in">dijs</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!dij.<span class="built_in">count</span>(<span class="built_in">P</span>(enx,eny)))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dij[<span class="built_in">P</span>(enx,eny)]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//LL t;scanf("%lld",&amp;t);</span></span><br><span class="line"><span class="comment">//while(t--)</span></span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>我当时是图建错了，然后当时 debug 了好久都找不出来是怎么回事，事后才发现是图建错了，但是仍然没找到为什么会错。</p><p>之后我放弃了建图的想法，直接在 $dijkstra$ 中进行顶点的转移操作。</p><p>在算法没错的情况下，可以尝试考虑是不是图建错了。</p>]]></content>
      
      
      <categories>
          
          <category> 2022牛客多校 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cfEduRound-131-Div-2-Summary</title>
      <link href="/2022/07/09/cfeduround-131-div-2-summary/"/>
      <url>/2022/07/09/cfeduround-131-div-2-summary/</url>
      
        <content type="html"><![CDATA[<h1 id="Educational-Codeforces-Round-131-Div-2"><a href="#Educational-Codeforces-Round-131-Div-2" class="headerlink" title="Educational Codeforces Round 131 (Div. 2)"></a>Educational Codeforces Round 131 (Div. 2)</h1><p><a href="https://codeforces.com/contest/1701">CONTEST传送门</a></p><h2 id="战况"><a href="#战况" class="headerlink" title="战况"></a>战况</h2><p><strong>Standing</strong></p><p><img src="/2022/07/09/cfeduround-131-div-2-summary/Standing.png" alt="Standing"></p><p><strong>Rating</strong></p><p><img src="/2022/07/09/cfeduround-131-div-2-summary/Rating.png" alt="Rating"></p><h2 id="补题"><a href="#补题" class="headerlink" title="补题"></a>补题</h2><h3 id="C-Schedule-Management"><a href="#C-Schedule-Management" class="headerlink" title="C - Schedule Management"></a>C - Schedule Management</h3><h4 id="错因"><a href="#错因" class="headerlink" title="错因"></a>错因</h4><p>写二分的时候里面应该要用 $long long$ 存答案的，我用 $int$ 存了，没有注意到最大数据范围会不会超过 $int$ 的范围。</p><h3 id="D-Permutation-Restoration"><a href="#D-Permutation-Restoration" class="headerlink" title="D - Permutation Restoration"></a>D - Permutation Restoration</h3><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>有一个排列 $a$ ，然后由排列 $a$ 经过操作 $b_i=\lfloor\frac{i}{a_i}\rfloor$ 得到数组 $b$ 。</p><p>输入数组 $b$ ，求出一个符合题意的排列 $a$ 。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这道题很像之前写过的有一道区间问题的题目，每个位置上符合条件的数构成了一个区间，我们首先计算出每个位置上的区间的左右端点值，定义一个 $pair$ 的优先队列，规则是小的先出，具体思路为，根据左端点大小给每个区间排个序，左端点小的先入优先队列，入队的 $pair$ 值为 $[r[i],i]$ ，即这个点的右端点值和这个点的 $id$ ，之后根据这个顺序以此从 $1$ 到 $n$ 赋值即可，很像之前的一个区间处理的问题。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;P,<span class="keyword">int</span>&gt; PP;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">500005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod=<span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,s[MAXX],a[MAXX];</span><br><span class="line"><span class="keyword">int</span> l[MAXX],r[MAXX];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; pre[MAXX];</span><br><span class="line">priority_queue&lt;P,vector&lt;P&gt;,greater&lt;P&gt; &gt; pq;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="keyword">int</span> ll=<span class="number">1</span>,rr=n,mid;</span><br><span class="line"><span class="keyword">while</span>(ll&lt;rr){</span><br><span class="line">mid=(ll+rr)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(mid==ll){</span><br><span class="line"><span class="keyword">if</span>(i/mid!=s[i])</span><br><span class="line">ll=rr;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(i/mid&gt;s[i])</span><br><span class="line">ll=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">rr=mid;</span><br><span class="line">}</span><br><span class="line">l[i]=ll;</span><br><span class="line">rr=n;</span><br><span class="line"><span class="keyword">while</span>(ll&lt;rr){</span><br><span class="line">mid=(ll+rr)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(mid==ll){</span><br><span class="line"><span class="keyword">if</span>(i/rr==s[i])</span><br><span class="line">ll=rr;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(i/mid&gt;=s[i])</span><br><span class="line">ll=mid;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">rr=mid<span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line">r[i]=ll;</span><br><span class="line"><span class="comment">//printf("*%d %d\n",l[i],r[i]);</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">pre[i].<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">while</span>(!pq.<span class="built_in">empty</span>())</span><br><span class="line">pq.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">pre[l[i]].<span class="built_in">emplace_back</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> jj:pre[i])</span><br><span class="line">pq.<span class="built_in">emplace</span>(<span class="built_in">P</span>(r[jj],jj));</span><br><span class="line">a[pq.<span class="built_in">top</span>().second]=i;</span><br><span class="line">pq.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">//printf("*%d ",pq.size());</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//printf("\n");</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[n]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">LL T;<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>在计算 $l[i]$ 和 $r[i]$ 的值的时候，我是使用二分进行查找的值，但是我看到有的代码是直接给赋值的，应该是有对应的公式</p><ul><li>$l[i] = (i + 1) / (b[i] + 1) + 1$</li><li>$r[i] = b[i] == 0 ? n : (i + 1) / b[i]$</li></ul><h3 id="E-Text-Editor"><a href="#E-Text-Editor" class="headerlink" title="E - Text Editor"></a>E - Text Editor</h3><p>对于这道题我进行详细的补题，另写了一篇独立的博客</p><p><a href="https://shaun-2314.github.io/2022/07/09/cf-edu131-e/">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> cf总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> cf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codeforces-edu131-E-Text Editor</title>
      <link href="/2022/07/09/cf-edu131-e/"/>
      <url>/2022/07/09/cf-edu131-e/</url>
      
        <content type="html"><![CDATA[<h1 id="Text-Editor"><a href="#Text-Editor" class="headerlink" title="Text Editor"></a>Text Editor</h1><p><a href="https://codeforces.com/contest/1701/problem/E">题目传送门</a></p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给出两个字符串 $a$ 和 $s$ ，长度分别为 $n$ 和 $m$ ，且 $1≤m≤n≤5000$ ，问经过最少多少次操作能从 $a$ 串变成 $s$ 串，如果不能输出 $-1$ 。初始时光标位于 $a$ 串末尾。有几种操作</p><ul><li>“left”，光标向前移动一格</li><li>“right”，光标向后移动一格</li><li>“home”，光标移动到最前面</li><li>“end”，光标移动到最后面</li><li>“backspace”，删除</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>考虑每一个公共子串，这个公共子串的右边使用 <em>backspace</em> 直到该公共子串的右侧，而左侧使用 <em>home</em> 先移到最左边，再进行 <em>right</em> 和 <em>backspace</em> 操作，直到该公共子串的左侧。</p><p>以此遍历每一个公共子串，每次更新 $ans$ 的值，取 $min$ ，由此得到的最终结果即为所求，相当于是一个 $n^2$ 的 $dp$ 。当然，$ans$ 的值首先要初始化为一路从右到左 <em>backspace</em> 的操作数。</p><p>然而，要进行这样的操作，需要知道这个公共子串的左侧能不能满足题目要求，即左侧剩余的字符串能否互相匹配上，右侧同理，因此，我们还需要维护两个数组 $pre[i]$ 和 $suf[i]$ 分别表示在从左到右和从右到左的顺序下，首先能匹配上的下标。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;P,<span class="keyword">int</span>&gt; PP;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">5005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod=<span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,pre[MAXX],suf[MAXX];</span><br><span class="line"><span class="keyword">char</span> a[MAXX],s[MAXX];</span><br><span class="line"><span class="keyword">int</span> len[MAXX][MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="built_in">getchar</span>();<span class="built_in">scanf</span>(<span class="string">"%s"</span>,a+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">getchar</span>();<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> first=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="keyword">if</span>(a[i]==s[j]){</span><br><span class="line">pre[j]=i;</span><br><span class="line">++j;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!first)</span><br><span class="line">first=i;</span><br><span class="line"><span class="keyword">if</span>(j&gt;m)</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(!flag){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(n==m){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n,j=m;i&gt;=<span class="number">1</span>;--i){</span><br><span class="line"><span class="keyword">if</span>(a[i]==s[j]){</span><br><span class="line">suf[j]=i;</span><br><span class="line">--j;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">len[i][j]=((a[i]==s[j])?(len[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>):(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">int</span> n1=n+<span class="number">1</span>,m1=m+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n1;++i)</span><br><span class="line">len[i][m1]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m1;++i)</span><br><span class="line">len[n1][i]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=n-first+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=pre[i];i&lt;=n;++i){</span><br><span class="line"><span class="keyword">if</span>(len[i+<span class="number">1</span>][j+<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> lenn=len[i][j];</span><br><span class="line"><span class="keyword">if</span>((j==m||suf[j+<span class="number">1</span>]&gt;i)&amp;&amp;(j-lenn==<span class="number">0</span>||pre[j-lenn]&lt;i-lenn)){</span><br><span class="line"><span class="keyword">int</span> jj=n-i;</span><br><span class="line"><span class="keyword">if</span>(i&gt;j)</span><br><span class="line">jj+=i-j+i-lenn+<span class="number">1</span>;</span><br><span class="line">ans=<span class="built_in">min</span>(ans,jj);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line">LL T;<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--)</span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>此题也可以使用扩展KMP，具体为使用扩展KMP代替上面的求公共子串部分，可以达到一样的效果，但是感觉没有上面的简便。</p>]]></content>
      
      
      <categories>
          
          <category> 狂刷字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 扩展KMP </tag>
            
            <tag> 最长公共子串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P5357，关于AC自动机的优化方案</title>
      <link href="/2022/06/30/luogu-p5357/"/>
      <url>/2022/06/30/luogu-p5357/</url>
      
        <content type="html"><![CDATA[<h1 id="【模板】AC-自动机（二次加强版）"><a href="#【模板】AC-自动机（二次加强版）" class="headerlink" title="【模板】AC 自动机（二次加强版）"></a>【模板】AC 自动机（二次加强版）</h1><p><a href="https://www.luogu.com.cn/problem/P5357">题目传送门</a></p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一个文本串 $S$ 和 $n$ 个模式串 $T_{1 \sim n}$ ，请你分别求出每个模式串 $T_i$ 在 $S$ 中出现的次数。</p><h2 id="当时写题过程"><a href="#当时写题过程" class="headerlink" title="当时写题过程"></a>当时写题过程</h2><p><img src="/2022/06/30/luogu-p5357/MySubmission.png" alt="MySubmissions"></p><p>当时看到题目后，看着和前面一个模板题一模一样，于是，就直接把前面一个的代码 <em>copy</em> 了过来，交了一发，出现了第一幕，40分，里面不是 <em>WA</em> 就是 <em>TLE</em> ，我想不通为什么会有 <em>WA</em> ，于是，我又重新读了一遍题，发现这道题里面 <strong>数据不保证任意两个模式串不相同</strong> 。</p><p>我想先保证算法的正确性，然后再进行优化操作，于是，把这里改了一下之后，就又交了一发，果然，这一发里面就只有 <em>TLE</em> 了，那么问题来了，该怎么优化呢。</p><p>当时想到了在匹配的过程中不进行答案的汇总，而是只进行汇总 <em>Trie</em> 树里面的每个节点到过的次数，等匹配结束之后再总的进行答案的汇总。果然，这次 <em>TLE</em> 的测试点数就少了好多，但是仍然无法AC。</p><p>之后，我又想到了在 <em>bfs()</em> 中把每个 <em>Trie</em> 树的节点所对应的单词汇总，这样就不需要每次都往根部递归求值了，结果，测试点中终于没有 <em>TLE</em> 了，但是，又出现了三个 <em>MLE</em> ，每个 <em>Trie</em> 树节点存的单词数量太大了，这个方法也行不通。</p><p>最后，我就想，有没有一种可能，我可以记录他在 <em>bfs()</em> 的过程中的 <em>bfs</em> 序，然后，在匹配的过程中只记录每个节点到过的次数，最后，在匹配结束之后，利用 <em>bfs</em> 序的逆序进行遍历，每遍历一个点，就把这个点往根部递归的第一个点的访问次数加上这个点的访问次数，以此递推，即可得出答案数组。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先，在匹配的过程中，我们只需要记录每个点的访问次数，这里用 $nnum$ 数据进行记录。在匹配结束之后，为了防止递归式的求解(因为这样会一直重复访问一些(数据量非常大)节点)，我们需要遍历一遍就能求解出答案的方法。于是，我们需要一个特殊的遍历序列，这个序列需要满足后遍历的节点在递归的思路里面不会到达先遍历的节点，而且先遍历的节点需要能够把他的访问次数传递到他在递归的思路中到达的后遍历的节点。刚好，我们在 <em>bfs()</em> 的过程的序列刚好就是这个序列的逆序列。于是，我们记录下来在 <em>bfs()</em> 过程中的访问顺序，在最后求解答案的时候再逆序访问即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;P,<span class="keyword">int</span>&gt; PP;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">2000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> id_max=MAXX;</span><br><span class="line"><span class="keyword">int</span> n,flag[id_max],fail[id_max];</span><br><span class="line"><span class="keyword">int</span> trie[id_max][<span class="number">26</span>],id_cnt;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; id[id_max];</span><br><span class="line"><span class="keyword">char</span> s[MAXX];</span><br><span class="line"><span class="keyword">int</span> num[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化，用于多组数据输入 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{</span><br><span class="line">id_cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;id_max;++i){</span><br><span class="line">flag[i]=fail[i]=<span class="number">0</span>;</span><br><span class="line">id[i].<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;++j)</span><br><span class="line">trie[i][j]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//向插入字典树中插入一个单词 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[])</span></span>{</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i){</span><br><span class="line"><span class="keyword">if</span>(trie[now][s[i]-<span class="string">'a'</span>]==<span class="number">0</span>)</span><br><span class="line">trie[now][s[i]-<span class="string">'a'</span>]=++id_cnt;</span><br><span class="line">now=trie[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line">}</span><br><span class="line">++flag[now];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//向插入字典树中插入一个单词，并与输入顺序进行链接 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[],<span class="keyword">int</span> idd)</span></span>{</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i){</span><br><span class="line"><span class="keyword">if</span>(trie[now][s[i]-<span class="string">'a'</span>]==<span class="number">0</span>)</span><br><span class="line">trie[now][s[i]-<span class="string">'a'</span>]=++id_cnt;</span><br><span class="line">now=trie[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line">}</span><br><span class="line">id[now].<span class="built_in">emplace_back</span>(idd);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bfsn[id_max];</span><br><span class="line"><span class="comment">//链接fail指针 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>{</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; qq;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)</span><br><span class="line"><span class="keyword">if</span>(trie[<span class="number">0</span>][i])</span><br><span class="line">qq.<span class="built_in">emplace</span>(trie[<span class="number">0</span>][i]);</span><br><span class="line"><span class="keyword">int</span> bfs_cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!qq.<span class="built_in">empty</span>()){</span><br><span class="line"><span class="keyword">int</span> now=qq.<span class="built_in">front</span>();qq.<span class="built_in">pop</span>();</span><br><span class="line">bfsn[++bfs_cnt]=now;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i){</span><br><span class="line"><span class="keyword">if</span>(trie[now][i]){</span><br><span class="line">fail[trie[now][i]]=trie[fail[now]][i];</span><br><span class="line">qq.<span class="built_in">emplace</span>(trie[now][i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">trie[now][i]=trie[fail[now]][i];</span><br><span class="line">}</span><br><span class="line"><span class="comment">//int fa=fail[now];</span></span><br><span class="line"><span class="comment">//id[now].insert(id[now].end(),id[fa].begin(),id[fa].end());</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回字典中有多少个单词在s串中出现过 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getone</span><span class="params">(<span class="keyword">char</span> s[])</span></span>{</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i){</span><br><span class="line">now=trie[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">int</span> jj=now;</span><br><span class="line"><span class="keyword">while</span>(jj&gt;<span class="number">0</span>&amp;&amp;flag[jj]!=<span class="number">-1</span>){</span><br><span class="line">ret+=flag[jj];</span><br><span class="line">flag[jj]=<span class="number">-1</span>;</span><br><span class="line">jj=fail[jj];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> nnum[id_max];</span><br><span class="line"><span class="comment">//需事先定义num数组，用于保存每个单词在s串中出现过几次 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnum</span><span class="params">(<span class="keyword">char</span> s[])</span></span>{</span><br><span class="line"><span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(num));</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i){</span><br><span class="line">now=trie[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line">++nnum[now];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">ins</span>(s,i);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">bfs</span>();</span><br><span class="line"><span class="built_in">getchar</span>();<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">getnum</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=id_cnt;i&gt;<span class="number">0</span>;--i){</span><br><span class="line"><span class="keyword">int</span> now=bfsn[i];</span><br><span class="line">nnum[fail[now]]+=nnum[now];</span><br><span class="line"><span class="keyword">int</span> si=id[now].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;si;++j)</span><br><span class="line">num[id[now][j]]+=nnum[now];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,num[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf("%d\n",getone(s));</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//LL T;scanf("%lld",&amp;T);</span></span><br><span class="line"><span class="comment">//while(T--)</span></span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题的变数感觉好多，当时写完这道题之后我去翻了翻题解，发现并没有我这样的写法，题解中的写法各式各样，思路众多，以后写这类题目一定要从多个方面进行思考。</p>]]></content>
      
      
      <categories>
          
          <category> 狂刷字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 字符串 </tag>
            
            <tag> AC自动机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P3294，一道思路奇妙的Trie树题目</title>
      <link href="/2022/06/28/luogu-p3294/"/>
      <url>/2022/06/28/luogu-p3294/</url>
      
        <content type="html"><![CDATA[<h1 id="SCOI2016-背单词"><a href="#SCOI2016-背单词" class="headerlink" title="[SCOI2016]背单词"></a>[SCOI2016]背单词</h1><p><a href="https://www.luogu.com.cn/problem/P3294">题目传送门</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>参考<a href="https://www.luogu.com.cn/blog/yuzhechuan/solution-p3294">这篇博客</a></p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>输入 $n$ 个单词，要求我们给他进行重新排列，使得按以下规则花费最小</p><blockquote><ol><li>如果存在一个单词是它的后缀，并且当前没有被填入表内，那花费 $+= n*n$ ；</li><li>当它的所有后缀都被填入表内的情况下，如果在 $1 … x-1$ 的位置上的单词都不是它的后缀，那么花费 $+= x$ ；</li><li>当它的所有后缀都被填入表内的情况下，如果 $1 … x-1$ 的位置上存在是它后缀的单词，所有是它后缀的单词中，序号最大为 $y$ ，那么花费 $+=x-y$ 。</li></ol></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>读懂题意之后，可以将题意转化为</p><blockquote><p>使得每个单词的后缀都在这个单词前面，且距离尽量近。</p></blockquote><p>题目中需要的后缀，但是后缀不太好处理，于是我们想到把单词反转，用前缀表示后缀。以此可以建出 <em>Trie</em> 树</p><p>建好 <em>Trie</em> 树之后，我们呢还需要对这棵树进行重构操作，忽略上面的非单词结尾的点，将每个单词的结尾位置进行相连，即单词之间直接相连。</p><p>之后，我们还需要利用 <em>dfs</em> 再对这棵树进行重构，具体内容是将每个节点的子节点进行排序，按以子节点为根的子树的节点数从小到大的规则进行排序。</p><p>然后对这样重构之后的树直接进行遍历就是最后的序列，即 <em>dfs</em> 序就是最终的序列。使用 <em>dfs</em> 即可得到答案。</p><blockquote><p><em>dfs</em> 序为什么正确？</p><p>考虑重新建树之后，i节点的子树中的所有节点的后缀都是 $i$</p><p>如果同一深度上有不止一棵子树，那么我们先在一棵上取出一个叶子节点 $j$ ，再取出一个根节点 $i$ ，我们发现如果 $j&gt;i$ 的话肯定不如 $i&lt;j$ 优秀</p><p>因为调整之后i的子树上所有节点对花费的贡献 $-=$ 子树大小， $j$ 对花费的贡献 $+1$ ，所以我们可以看到 $j&gt;i$ 的花费 $&lt;=i&gt;j$ 的情况</p><p>最后我们经过所有的调整可以发现序列变成了 <em>dfs</em> 序</p><p>所以 <em>dfs</em> 序最优</p></blockquote><p>最后答案记得用 <em>long long</em> .</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">510005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[MAXX];</span><br><span class="line"><span class="keyword">int</span> trie[MAXX][<span class="number">26</span>],id_cnt;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXX];</span><br><span class="line"><span class="keyword">int</span> num[MAXX];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; to[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i){</span><br><span class="line"><span class="keyword">if</span>(trie[now][s[i]-<span class="string">'a'</span>]==<span class="number">0</span>)</span><br><span class="line">trie[now][s[i]-<span class="string">'a'</span>]=++id_cnt;</span><br><span class="line">now=trie[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line">}</span><br><span class="line">vis[now]=<span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rebuild</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> last)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(vis[now]){</span><br><span class="line">to[last].<span class="built_in">emplace_back</span>(now);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)</span><br><span class="line"><span class="keyword">if</span>(trie[now][i])</span><br><span class="line"><span class="built_in">rebuild</span>(trie[now][i],now);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)</span><br><span class="line"><span class="keyword">if</span>(trie[now][i])</span><br><span class="line"><span class="built_in">rebuild</span>(trie[now][i],last);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> jj,<span class="keyword">int</span> kk)</span></span>{<span class="keyword">return</span> num[jj]&lt;num[kk];}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now)</span></span>{</span><br><span class="line"><span class="keyword">int</span> si=to[now].<span class="built_in">size</span>();</span><br><span class="line">num[now]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;si;++i){</span><br><span class="line"><span class="built_in">dfs</span>(to[now][i]);</span><br><span class="line">num[now]+=num[to[now][i]];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">sort</span>(to[now].<span class="built_in">begin</span>(),to[now].<span class="built_in">end</span>(),cmp);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dfn[MAXX],dfn_cnt=<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">getans</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> last)</span></span>{</span><br><span class="line">LL ret=<span class="number">0</span>;</span><br><span class="line">dfn[now]=++dfn_cnt;</span><br><span class="line"><span class="keyword">if</span>(last==<span class="number">0</span>)</span><br><span class="line">ret+=dfn[now];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ret+=dfn[now]-dfn[last];</span><br><span class="line"><span class="keyword">int</span> si=to[now].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;si;++i)</span><br><span class="line">ret+=<span class="built_in">getans</span>(to[now][i],now);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">reverse</span>(s+<span class="number">1</span>,s+<span class="built_in">strlen</span>(s+<span class="number">1</span>)+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">insert</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">rebuild</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="built_in">getans</span>(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//int t;scanf("%d",&amp;t);</span></span><br><span class="line"><span class="comment">//while(t--)</span></span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题里面的思维非常的妙，使用前缀来表示后缀，以此可以直接使用 <em>Trie</em> 树。</p><p>还有对 <em>Trie</em> 树进行重构，都非常的巧妙。</p>]]></content>
      
      
      <categories>
          
          <category> 狂刷字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 字符串 </tag>
            
            <tag> Trie 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客16638，一道比较经典的KMP题目</title>
      <link href="/2022/06/27/nowcoder-16638/"/>
      <url>/2022/06/27/nowcoder-16638/</url>
      
        <content type="html"><![CDATA[<h1 id="carpet"><a href="#carpet" class="headerlink" title="carpet"></a>carpet</h1><p><a href="https://ac.nowcoder.com/acm/problem/16638">题目传送门</a></p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给出一个 $n<em>m$ 的字符矩阵，每个位置有一个 $cost$ ，找出这个矩阵的最小循环子矩阵 $p$ 行 $q$ 列，即最小二维循环周期，之后再找出每一个这样大小的子矩阵的 $cost$ 的最大值，再取最小值为 $A$ ，输出 $A</em>(p+1)*(q+1)$ 即可。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>分三步，首先要求出字符矩阵的最小循环子矩阵的行数和列数，之后再对每一个这样大小的子矩阵的 $max{cost}$ 进行求 $min$ ，最后，输出答案即可。</p><ol><li><p>针对第一步，我们采用KMP算法。</p><p>我们求出每一行的 $p[i]$ 值，之后利用 $p[i]$ 值将每一行的所有循环节长度(即周期)求出来，用 <em>map</em> 记录每个周期的出现次数，遍历完每一行之后，找出 <em>map</em> 中记录的出现了 <em>m</em> 次的周期的最小值，即为最小循环子矩阵的列数 $q$ 。</p><p>$p$ 的求法和 $q$ 一样，对每一列进行同样的操作即可。</p></li><li><p>针对第二步，我们采用优先队列优化的滑动窗口。</p><p>考虑到数据量较大，我们要首先对每一列进行滑动窗口的操作，记录下第 $i$ 行第 $j$ 列的 $max{cost[i-p+1 … i][j]}$ 。以此来优化矩阵的滑动窗口操作，变成了线性。</p><p>之后，我们对每一个 $p$ 行 $q$ 列的子矩阵进行求解，遍历每一行，每次可直接调用上一步求出的值，即可求出 $A$ 。</p></li><li><p>输出答案 $A*(p+1)*(q+1)$ ，注意这个结果是可能超过 <em>int</em> 的范围的。</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;P,<span class="keyword">int</span>&gt; PP;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,p[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lgetpmt</span><span class="params">(<span class="keyword">const</span> vector&lt;vector&lt;<span class="keyword">char</span>&gt; &gt;&amp; a,<span class="keyword">int</span> k)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;m;++i){</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;a[k][i+<span class="number">1</span>]!=a[k][j+<span class="number">1</span>])</span><br><span class="line">j=p[j];</span><br><span class="line"><span class="keyword">if</span>(a[k][i+<span class="number">1</span>]==a[k][j+<span class="number">1</span>])</span><br><span class="line">++j;</span><br><span class="line">p[i+<span class="number">1</span>]=j;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tgetpmt</span><span class="params">(<span class="keyword">const</span> vector&lt;vector&lt;<span class="keyword">char</span>&gt; &gt;&amp; a,<span class="keyword">int</span> k)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;n;++i){</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;a[i+<span class="number">1</span>][k]!=a[j+<span class="number">1</span>][k])</span><br><span class="line">j=p[j];</span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>][k]==a[j+<span class="number">1</span>][k])</span><br><span class="line">++j;</span><br><span class="line">p[i+<span class="number">1</span>]=j;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">vector&lt;vector&lt;<span class="keyword">char</span>&gt; &gt; <span class="built_in">a</span>(n+<span class="number">2</span>,vector&lt;<span class="keyword">char</span>&gt;(m+<span class="number">2</span>));</span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt; &gt; <span class="built_in">c</span>(n+<span class="number">2</span>,vector&lt;<span class="keyword">int</span>&gt;(m+<span class="number">2</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;a[i][j]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;c[i][j]);</span><br><span class="line"></span><br><span class="line">map&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; left,top;</span><br><span class="line"><span class="keyword">int</span> l=m,t=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="built_in">lgetpmt</span>(a,i);</span><br><span class="line"><span class="keyword">int</span> jj=p[m];</span><br><span class="line"><span class="keyword">while</span>(jj!=<span class="number">0</span>){</span><br><span class="line">++left[m-jj];</span><br><span class="line"><span class="keyword">if</span>(left[m-jj]==n) l=<span class="built_in">min</span>(l,m-jj);</span><br><span class="line">jj=p[jj];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i){</span><br><span class="line"><span class="built_in">tgetpmt</span>(a,i);</span><br><span class="line"><span class="keyword">int</span> jj=p[n];</span><br><span class="line"><span class="keyword">while</span>(jj!=<span class="number">0</span>){</span><br><span class="line">++top[n-jj];</span><br><span class="line"><span class="keyword">if</span>(top[n-jj]==m) t=<span class="built_in">min</span>(t,n-jj);</span><br><span class="line">jj=p[jj];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf("*%d %d\n",t,l);//t行l列  1 2</span></span><br><span class="line"></span><br><span class="line">priority_queue&lt;P&gt; pq;</span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt; &gt; <span class="built_in">topmax</span>(n+<span class="number">2</span>,vector&lt;<span class="keyword">int</span>&gt;(m+<span class="number">2</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j){</span><br><span class="line"><span class="keyword">while</span>(!pq.<span class="built_in">empty</span>())</span><br><span class="line">pq.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;++i)</span><br><span class="line">pq.<span class="built_in">emplace</span>(c[i][j],i);</span><br><span class="line">topmax[t][j]=pq.<span class="built_in">top</span>().first;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=t+<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line">pq.<span class="built_in">emplace</span>(c[i][j],i);</span><br><span class="line"><span class="keyword">while</span>(pq.<span class="built_in">top</span>().second&lt;=i-t)</span><br><span class="line">pq.<span class="built_in">pop</span>();</span><br><span class="line">topmax[i][j]=pq.<span class="built_in">top</span>().first;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=Inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=t;i&lt;=n;++i){</span><br><span class="line"><span class="keyword">while</span>(!pq.<span class="built_in">empty</span>())</span><br><span class="line">pq.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=l;++j)</span><br><span class="line">pq.<span class="built_in">emplace</span>(topmax[i][j],j);</span><br><span class="line">ans=<span class="built_in">min</span>(ans,pq.<span class="built_in">top</span>().first);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=l+<span class="number">1</span>;j&lt;=m;++j){</span><br><span class="line">pq.<span class="built_in">emplace</span>(topmax[i][j],j);</span><br><span class="line"><span class="keyword">while</span>(pq.<span class="built_in">top</span>().second&lt;=j-l)</span><br><span class="line">pq.<span class="built_in">pop</span>();</span><br><span class="line">ans=<span class="built_in">min</span>(ans,pq.<span class="built_in">top</span>().first);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//printf("*%d\n",ans);//</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,((LL)ans)*((LL)(l+<span class="number">1</span>))*((LL)(t+<span class="number">1</span>)));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//LL T;scanf("%lld",&amp;T);</span></span><br><span class="line"><span class="comment">//while(T--)</span></span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>感觉这道题涉及了很多内容，可以当作一道比较经典的应用KMP进行求解的题目了。</p><p>前面因为所有循环节的求法写错了，导致调了半天一直调不出来，要牢记。</p><p>所有循环节的求法</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> jj=p[n];</span><br><span class="line"><span class="keyword">while</span>(jj!=<span class="number">0</span>){</span><br><span class="line">    ans.<span class="built_in">emplace_back</span>(n-jj);<span class="comment">//这里的 n-jj 均为循环节，ans记录所有循环节</span></span><br><span class="line">    jj=p[jj];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 狂刷字符串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 字符串 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cfEduRound-130-Div-2-Summary</title>
      <link href="/2022/06/16/cfeduround-130-div-2-summary/"/>
      <url>/2022/06/16/cfeduround-130-div-2-summary/</url>
      
        <content type="html"><![CDATA[<h1 id="Educational-Codeforces-Round-130-Div-2"><a href="#Educational-Codeforces-Round-130-Div-2" class="headerlink" title="Educational Codeforces Round 130 (Div. 2)"></a>Educational Codeforces Round 130 (Div. 2)</h1><p><a href="https://codeforces.com/contest/1697">CONTEST传送门</a></p><h2 id="战况"><a href="#战况" class="headerlink" title="战况"></a>战况</h2><p><strong>Standing</strong></p><p><img src="/2022/06/16/cfeduround-130-div-2-summary/Standing.png" alt="Standing"></p><p><strong>Rating</strong></p><p><img src="/2022/06/16/cfeduround-130-div-2-summary/Rating.png" alt="Rating"></p><h2 id="补题"><a href="#补题" class="headerlink" title="补题"></a>补题</h2><h3 id="D-Guess-The-String"><a href="#D-Guess-The-String" class="headerlink" title="D - Guess The String"></a>D - Guess The String</h3><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>这是一道交互题，首先输入一个整数，表示一个字符串的长度(1&lt;=n&lt;=1000)。我们需要通过询问推这个字符串并最终输出，询问包括两种</p><ul><li><p><strong>? 1 i</strong></p><p>表示询问第i个位置的字符是什么，将输入一个字符表示答案。</p></li><li><p><strong>? 2 l r</strong></p><p>表示询问从下标l到r，中间有多少个不同的字母，将输入一个整数表示答案。</p></li></ul><p>第一种询问不能超过26次，第二种询问不能超过6000次。</p><h4 id="当时的思路"><a href="#当时的思路" class="headerlink" title="当时的思路"></a>当时的思路</h4><p>先用一个整数表示一个位置的字符，相同的整数表示同一个字符。</p><p>遍历字符串，对于每一个位置 <em>i</em>，从当前位置 <em>i</em> 往前遍历 <em>j</em> ，每找到一个此次遍历未见过的字符，便询问 <strong>? 2 i j</strong> ，找到那个第一个等于 <em>区间已知字符的不同的数量+1</em> 的位置，那个位置之前遍历的那个位置的字符便对应于位置 <em>i</em> 的字符。</p><p>最后再询问每一个整数对应的字符。</p><h4 id="错因"><a href="#错因" class="headerlink" title="错因"></a>错因</h4><p>第二种询问的询问次数过多。</p><h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><p>因为是26个字母，注意到 $\log_2(26)=4.7\leq 5$ ,于是我们便可以使用二分进行查询，即可通过。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,P&gt; PP;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CC</span>{</span></span><br><span class="line"><span class="keyword">char</span> ans;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">}a[MAXX];</span><br><span class="line"><span class="keyword">int</span> n,num_cnt,last[MAXX],s[MAXX];</span><br><span class="line"><span class="keyword">char</span> getans[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">a[<span class="number">1</span>].num=num_cnt=<span class="number">1</span>;</span><br><span class="line">last[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i){</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=num_cnt+<span class="number">1</span>,mid,in;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=num_cnt;++j)</span><br><span class="line">s[j]=last[j];</span><br><span class="line"><span class="built_in">sort</span>(s+<span class="number">1</span>,s+num_cnt+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(l&lt;r){</span><br><span class="line">mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"? 2 %d %d\n"</span>,s[mid],i);</span><br><span class="line"><span class="built_in">fflush</span>(stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;in);</span><br><span class="line"><span class="keyword">if</span>(in==num_cnt-mid+<span class="number">1</span>)<span class="comment">//=n</span></span><br><span class="line">l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">r=mid;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(l==<span class="number">1</span>){</span><br><span class="line">a[i].num=++num_cnt;</span><br><span class="line">last[num_cnt]=i;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">int</span> flag=s[l<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=num_cnt;++j)</span><br><span class="line"><span class="keyword">if</span>(last[j]==flag){</span><br><span class="line">a[i].num=j;</span><br><span class="line">last[j]=i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="keyword">if</span>(!getans[a[i].num]){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"? 1 %d\n"</span>,i);</span><br><span class="line"><span class="built_in">fflush</span>(stdout);</span><br><span class="line"><span class="keyword">char</span> in;</span><br><span class="line">cin&gt;&gt;in;</span><br><span class="line">getans[a[i].num]=in;</span><br><span class="line">}</span><br><span class="line">a[i].ans=getans[a[i].num];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"! "</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>,a[i].ans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">fflush</span>(stdout);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//int T;scanf("%d",&amp;T);</span></span><br><span class="line"><span class="comment">//while(T--)</span></span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当时脑子里也出现过使用二分的想法，但是由于二分写的太少，非常不熟练，短时间内无法写出来，于是便放弃了二分的想法。</p><p>还是得多练二分。</p>]]></content>
      
      
      <categories>
          
          <category> cf总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> cf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>还记得小时候的梦想吗</title>
      <link href="/2022/06/08/childhool-dream-thinking/"/>
      <url>/2022/06/08/childhool-dream-thinking/</url>
      
        <content type="html"><![CDATA[<h1 id="还记得小时候的梦想吗"><a href="#还记得小时候的梦想吗" class="headerlink" title="还记得小时候的梦想吗"></a>还记得小时候的梦想吗</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>中午刷B站看到了一个视频有感</p><p><a href="https://www.bilibili.com/video/BV1Rv4y1w7hA?spm_id_from=333.934.0.0">“cheems，你要去码头整点薯条吗？”</a></p><p>看得我泪目了，感触很深，写下此文。</p><blockquote><p>送给每一个被生活埋葬梦想的人。</p><p>重新拿起铲子，把梦想挖出来吧。 </p><p>然后去码头，整点薯条！</p></blockquote><h3 id="感触"><a href="#感触" class="headerlink" title="感触"></a>感触</h3><p>刚开始看到这个标题的时候，我以为是什么搞笑类的视频，就点开看了，结果打开一看，有26分钟，发现不对劲。然后越看越感觉真实，看到一半左右的时候就已经泪目了。</p><p>在现在这样的社会环境下，有不知多少孩子的最真实的梦想被扼杀在了萌芽当中，可能是想去北极看一次极光(只是因为想去亲眼看看)，可能是想当一名画家(只是因为喜欢画画)，还可能是想当一名科学家(只是因为喜欢研究的感觉)，梦想很多，但最初始的梦想一般不会是搞钱。生活会把梦想埋葬。</p><p>现在的我，感觉已经没有了梦想，也想不起来小时候的梦想了，甚至不确定小时候是否有过梦想，但是我感觉应该是有的，至少曾经有过。我记得我在小学的时候有过一个密码本，是四位数的密码，但是我现在也不缺定我是否还记得密码是什么，等寒假回家之后，我一定要找到这个密码本，这里面可能有我被埋葬的梦想，至少希望有点线索。不知我还能不能拿起我的铲子，把梦想挖出来。</p><p>但是我的梦想是什么时候被埋葬的，我自己也不清楚了，可能在我想努力成为一名“好孩子”的时候就已经埋葬了吧。</p><p>不知到什么时候，我才能再去码头，整点薯条！</p>]]></content>
      
      
      <categories>
          
          <category> 一些感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 梦想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人板子总结</title>
      <link href="/2022/04/22/template-summary/"/>
      <url>/2022/04/22/template-summary/</url>
      
        <content type="html"><![CDATA[<h1 id="一个自己经常使用的板子的汇总"><a href="#一个自己经常使用的板子的汇总" class="headerlink" title="一个自己经常使用的板子的汇总"></a>一个自己经常使用的板子的汇总</h1><p>主要是为了自己在需要用的时候能够很快找到对应的板子而写下本篇。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符串小日记"><a href="#字符串小日记" class="headerlink" title="字符串小日记"></a>字符串小日记</h3><ol><li><p>有种非常妙的思路：<strong>后缀转前缀</strong></p><p>具体：把字符串 <em>reverse</em> ，再 <em>insert</em> 到 <em>Trie</em> 树里，可模拟后缀。</p></li><li><p><strong>一定要看清楚题目！！！！！！！</strong></p><p>一定要看清楚模式串中间有没有重复的串！！！</p></li><li><p>一定要看清楚具体每个字符串的数据范围，一般 <strong>MAXX</strong> 表示有几个串，但是最后的文本串可能会是 $1e6$ 的。</p></li><li><p>感觉字符串的题目一般很难直接抄板子，除了一些固定的步骤， <strong>一般都要从头手打一遍</strong> ，因为每次题目中的要求，条件等等都会变，一定要深度理解算法的思想，到时候做题才能更灵活。</p></li><li><p>字符串的题目灵活性太高了，可以试试<strong>从多个不同的角度进行思考</strong>。感觉很多题目都是会有很多种解法(优化方法)。</p></li><li><p>如果有时间的话，一定要<strong>多复习复习</strong>前面学过的内容，这些东西太容易忘了。</p></li><li><p>要多变通，<strong>不要死磕一种死方法</strong>。</p></li></ol><h3 id="一些常用结论和技巧"><a href="#一些常用结论和技巧" class="headerlink" title="一些常用结论和技巧"></a>一些常用结论和技巧</h3><ol><li><p>一个长度为 $n$ 的字符串一共有 $\frac{n(n+1)}{2}$ 个子串。</p></li><li><p>字符串中重复了的子串的个数等于 $\sum_{i=1}^{n} height[i]$ ，故一个字符串的所有不同子串个数就等于</p><p> $\frac{n(n+1)}{2}-\sum_{i=1}^{n} height[i]$ 。</p></li><li><p>多次询问字串 $s(l,r)$ 的出现次数</p><p>二分+$SA$</p></li><li><p>最长重复子串（可重叠）</p><p>$ans=\max{height[i]}$ </p></li><li><p>两个字符串的最长公共子串</p><p>记录每一次的公共子串的长度</p><p>大致思路为下图，对角线即为重复子串。</p><p><img src="/2022/04/22/template-summary/skill5.jpg" alt="img"></p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">        len[i][j]=((a[i]==s[j])?(len[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>):(<span class="number">0</span>));</span><br></pre></td></tr></tbody></table></figure></li><li><p>waiting</p></li></ol><h3 id="SAM使用技巧"><a href="#SAM使用技巧" class="headerlink" title="SAM使用技巧"></a>SAM使用技巧</h3><ol><li><p>在 $SAM$ 中 $len[i]-len[fa[i]]$ 表示 $sam[i]$ 中表示了几个字符串。</p></li><li><p>记录每个子串的出现次数(求 $|Right[s]|$ )</p><ul><li>在 <em>add</em> 模板中要有初始化 $num[np]=1$ 。</li><li>构造出 <em>parent树</em> 。</li><li>直接 <em>dfs</em> 。</li></ul><p>例子：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; to[MAXX&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> jj:to[now]){</span><br><span class="line"><span class="built_in">dfs</span>(jj);</span><br><span class="line">num[now]+=num[jj];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sam_cnt;++i)</span><br><span class="line">    to[sam[i].fa].<span class="built_in">emplace_back</span>(i);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p>多少个本质不同的子串</p><ul><li>在 $SAM$ 上从根节点开始的每一条路径都是一个子串且不重复，故直接在 $SAM$ 上跑 $DP$ 即可。</li></ul><p>例子：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LL ans[MAXX&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(ans[now]) <span class="keyword">return</span> ans[now];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)</span><br><span class="line"><span class="keyword">if</span>(sam[now].ch[i])</span><br><span class="line">ans[now]+=<span class="built_in">dfs</span>(sam[now].ch[i]);</span><br><span class="line"><span class="keyword">return</span> ++ans[now];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,<span class="built_in">dfs</span>(<span class="number">1</span>)<span class="number">-1</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p>两个字符串的<strong>本质不同公共子串个数</strong></p><ul><li>两个字符串依此插入到同一个 $sam$ 中，但是，每开始一个新的子串，就得将 $las=1$ ，达到从这个字符串的开头开始的效果。</li><li>$add$ 操作也要加一个标记，在结构体中新加变量 $bool\ vis[2]$ ，用于标记在哪个串中出现过没有。</li><li>在 $add$ 函数最后一行加上 <code>for(;np&amp;&amp;!sam[np].vis[jj];np=sam[np].fa) sam[np].vis[jj]=true;</code> ，即可达到标记的效果。</li><li>最后遍历一遍 $sam$ 中的每一个点，如果这个点表示的状态的 $vis[0]==true&amp;&amp;vis[1]==true$ ，就 $ans+=sam[i].len-sam[sam[i].fa].len$。</li></ul><p>例子：</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> c,<span class="keyword">int</span> jj)</span></span>{</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">for</span>(;np&amp;&amp;!sam[np].vis[jj];np=sam[np].fa) sam[np].vis[jj]=<span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>;++i){</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);<span class="built_in">getchar</span>();</span><br><span class="line">n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">las=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line"><span class="built_in">add</span>(s[j]-<span class="string">'a'</span>,i<span class="number">-1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sam_cnt;++i)</span><br><span class="line"><span class="keyword">if</span>(sam[i].vis[<span class="number">0</span>]&amp;&amp;sam[i].vis[<span class="number">1</span>])</span><br><span class="line">ans+=sam[i].len-sam[sam[i].fa].len;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>如果有多个匹配串与一个模式串进行子串匹配，那么可以只对模式串进行建立 $SAM$ ，之后对于每一个匹配串，使用类似于 $trie树$ 的匹配方式进行匹配。之后可以使用动态规划的思想，搞出最长匹配长度。</p></li><li><p>对于有 $m$ 次操作且 $m$ 很大且会改变原字符串的情况，我们可以考虑<strong>定期重构</strong>。</p><p>设 $T=\sqrt n$ ，每 $T$ 次添加或删除字符操作后，就重构 $SAM$ 。对于还没有来得及重构的询问，我们使用字符串 $Hash$ 来进行解决。</p><p>对于对字符串前面添加新字符还是前面删除字符都适用。</p></li></ol><h3 id="KMP模板"><a href="#KMP模板" class="headerlink" title="KMP模板"></a>KMP模板</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> l[MAXX],s[MAXX];</span><br><span class="line"><span class="keyword">int</span> lenl,lens,p[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getpmt</span><span class="params">()</span></span>{</span><br><span class="line">p[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;lenl;++i){</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i+<span class="number">1</span>]!=s[j+<span class="number">1</span>])</span><br><span class="line">j=p[j];</span><br><span class="line"><span class="keyword">if</span>(s[i+<span class="number">1</span>]==s[j+<span class="number">1</span>])</span><br><span class="line">++j;</span><br><span class="line">p[i+<span class="number">1</span>]=j;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getans</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;lenl;++i){</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;l[i+<span class="number">1</span>]!=s[j+<span class="number">1</span>])</span><br><span class="line">j=p[j];</span><br><span class="line"><span class="keyword">if</span>(l[i+<span class="number">1</span>]==s[j+<span class="number">1</span>])</span><br><span class="line">++j;</span><br><span class="line"><span class="keyword">if</span>(j==lens){</span><br><span class="line"><span class="comment">//dosomething</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i-j+<span class="number">2</span>);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">j=p[j];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="KMP求最小循环节"><a href="#KMP求最小循环节" class="headerlink" title="KMP求最小循环节"></a>KMP求最小循环节</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先要求出p数组（即next数组）</span></span><br><span class="line"><span class="comment">//字符串长度为len</span></span><br><span class="line"><span class="comment">//循环节的长度为</span></span><br><span class="line"><span class="keyword">int</span> l=len-p[len];</span><br></pre></td></tr></tbody></table></figure><h3 id="KMP求所有循环节"><a href="#KMP求所有循环节" class="headerlink" title="KMP求所有循环节"></a>KMP求所有循环节</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> jj=p[n];</span><br><span class="line"><span class="keyword">while</span>(jj!=<span class="number">0</span>){</span><br><span class="line">    ans.<span class="built_in">emplace_back</span>(n-jj);<span class="comment">//这里的 n-jj 均为循环节，ans记录所有循环节</span></span><br><span class="line">    jj=p[jj];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="扩展KMP"><a href="#扩展KMP" class="headerlink" title="扩展KMP"></a>扩展KMP</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int z[MAXX],p[MAXX];</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Z</span><span class="params">(<span class="keyword">char</span>* s,<span class="keyword">int</span> n)</span></span>{</span><br><span class="line">z[<span class="number">1</span>]=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) z[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,l=<span class="number">0</span>,r=<span class="number">0</span>;i&lt;=n;++i){</span><br><span class="line"><span class="keyword">if</span>(i&lt;=r) z[i]=<span class="built_in">min</span>(z[i-l+<span class="number">1</span>],r-i+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(i+z[i]&lt;=n&amp;&amp;s[i+z[i]]==s[z[i]+<span class="number">1</span>]) ++z[i];</span><br><span class="line"><span class="keyword">if</span>(i+z[i]<span class="number">-1</span>&gt;r) l=i,r=i+z[i]<span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exkmp</span><span class="params">(<span class="keyword">char</span>* a,<span class="keyword">int</span> n,<span class="keyword">char</span>* s,<span class="keyword">int</span> m)</span></span>{</span><br><span class="line"><span class="built_in">Z</span>(s,m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) p[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,l=<span class="number">0</span>,r=<span class="number">0</span>;i&lt;=n;++i){</span><br><span class="line"><span class="keyword">if</span>(i&lt;=r) p[i]=<span class="built_in">min</span>(z[i-l+<span class="number">1</span>],r-i+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(i+p[i]&lt;=n&amp;&amp;a[i+p[i]]==s[p[i]+<span class="number">1</span>]) ++p[i];</span><br><span class="line"><span class="keyword">if</span>(i+p[i]<span class="number">-1</span>&gt;r) l=i,r=i+p[i]<span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">//exkmp(a,n,s,m);</span></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串-Hash"><a href="#字符串-Hash" class="headerlink" title="字符串 $Hash$"></a>字符串 $Hash$</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="comment">//prim 是自己设置的一个素数,具体数值根据情况而定</span></span><br><span class="line">ull p[MAXX],hashs[MAXX],prim=<span class="number">233</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{</span><br><span class="line">    p[<span class="number">0</span>]=<span class="number">1ull</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;MAXX;++i)</span><br><span class="line">        p[i]=p[i<span class="number">-1</span>]*prim;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">gethash</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> hashs[r]-hashs[l<span class="number">-1</span>]*p[r-l+<span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,ull jj)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">gethash</span>(l,r)==jj;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// for(int i=1;i&lt;=n;++i)</span></span><br><span class="line"><span class="comment">//     hashs[i]=hashs[i-1]*prim+s[i];</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Tire树-字典树"><a href="#Tire树-字典树" class="headerlink" title="Tire树(字典树)"></a>Tire树(字典树)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Tire树更重要的是思路</span></span><br><span class="line"><span class="comment">碰到题目一般不会直接这样考模板</span></span><br><span class="line"><span class="comment">要学会灵活变通</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span>{</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> maxid=MAXX*<span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> trie[maxid][<span class="number">26</span>],id_cnt;</span><br><span class="line"><span class="keyword">bool</span> is_word[maxid];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Trie</span>();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span>* jj)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span>* jj)</span></span>;</span><br><span class="line">};</span><br><span class="line">Trie::<span class="built_in">Trie</span>(){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxid;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;++j)</span><br><span class="line">trie[i][j]=<span class="number">0</span>;</span><br><span class="line">id_cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxid;++i)</span><br><span class="line">is_word[i]=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Trie::insert</span><span class="params">(<span class="keyword">char</span>* jj)</span></span>{</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>,len=<span class="built_in">strlen</span>(jj+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i){</span><br><span class="line"><span class="keyword">if</span>(trie[now][jj[i]-<span class="string">'a'</span>]==<span class="number">0</span>)</span><br><span class="line">trie[now][jj[i]-<span class="string">'a'</span>]=++id_cnt;</span><br><span class="line">now=trie[now][jj[i]-<span class="string">'a'</span>];</span><br><span class="line">}</span><br><span class="line">is_word[now]=<span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Trie::find</span><span class="params">(<span class="keyword">char</span>* jj)</span></span>{</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>,len=<span class="built_in">strlen</span>(jj+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i){</span><br><span class="line"><span class="keyword">if</span>(trie[now][jj[i]-<span class="string">'a'</span>]==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">now=trie[now][jj[i]-<span class="string">'a'</span>];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> is_word[now];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Border树-next树-概念及性质"><a href="#Border树-next树-概念及性质" class="headerlink" title="Border树(next树) 概念及性质"></a>Border树(next树) 概念及性质</h3><p><strong>概念</strong></p><p>一个字符串长度为 $n$ 。</p><p>在 <em>Border</em> 树中，共有 $n+1$ 个节点， $0$ 是这棵有向树的根节点，对于其他每个点 $1 \le i \le n$ ，父节点为 $next[i]$ 。</p><p><strong>性质</strong></p><ol><li>每个前缀 $Prefix[i]$ 的所有 $Border$ : 节点 $i$ 到根的链。</li><li>哪些前缀有长度为 $x$ 的 $Border$ : $x$ 的子树。</li><li>求两个前缀的公共 $Border$ 等价于求 $LCA$ 。</li></ol><h3 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> id_max=MAXX;</span><br><span class="line"><span class="keyword">int</span> n,flag[id_max],fail[id_max];</span><br><span class="line"><span class="keyword">int</span> trie[id_max][<span class="number">26</span>],id_cnt;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; id[id_max];</span><br><span class="line"><span class="keyword">char</span> s[MAXX];</span><br><span class="line"><span class="keyword">int</span> num[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化，用于多组数据输入 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{</span><br><span class="line">id_cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;id_max;++i){</span><br><span class="line">flag[i]=fail[i]=<span class="number">0</span>;</span><br><span class="line">id[i].<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;++j)</span><br><span class="line">trie[i][j]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//向插入字典树中插入一个单词 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[])</span></span>{</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i){</span><br><span class="line"><span class="keyword">if</span>(trie[now][s[i]-<span class="string">'a'</span>]==<span class="number">0</span>)</span><br><span class="line">trie[now][s[i]-<span class="string">'a'</span>]=++id_cnt;</span><br><span class="line">now=trie[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line">}</span><br><span class="line">++flag[now];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//向插入字典树中插入一个单词，并与输入顺序进行链接 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">char</span> s[],<span class="keyword">int</span> idd)</span></span>{</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i){</span><br><span class="line"><span class="keyword">if</span>(trie[now][s[i]-<span class="string">'a'</span>]==<span class="number">0</span>)</span><br><span class="line">trie[now][s[i]-<span class="string">'a'</span>]=++id_cnt;</span><br><span class="line">now=trie[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line">}</span><br><span class="line">id[now].<span class="built_in">emplace_back</span>(idd);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bfsn[id_max];<span class="comment">//bfs序 </span></span><br><span class="line"><span class="comment">//链接fail指针 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>{</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; qq;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)</span><br><span class="line"><span class="keyword">if</span>(trie[<span class="number">0</span>][i])</span><br><span class="line">qq.<span class="built_in">emplace</span>(trie[<span class="number">0</span>][i]);</span><br><span class="line"><span class="keyword">int</span> bfs_cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!qq.<span class="built_in">empty</span>()){</span><br><span class="line"><span class="keyword">int</span> now=qq.<span class="built_in">front</span>();qq.<span class="built_in">pop</span>();</span><br><span class="line">bfsn[++bfs_cnt]=now;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i){</span><br><span class="line"><span class="keyword">if</span>(trie[now][i]){</span><br><span class="line">fail[trie[now][i]]=trie[fail[now]][i];</span><br><span class="line">qq.<span class="built_in">emplace</span>(trie[now][i]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">trie[now][i]=trie[fail[now]][i];</span><br><span class="line">}</span><br><span class="line"><span class="comment">//int fa=fail[now];</span></span><br><span class="line"><span class="comment">//id[now].insert(id[now].end(),id[fa].begin(),id[fa].end());</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回字典中有多少个单词在s串中出现过 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getone</span><span class="params">(<span class="keyword">char</span> s[])</span></span>{</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i){</span><br><span class="line">now=trie[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">int</span> jj=now;</span><br><span class="line"><span class="keyword">while</span>(jj&gt;<span class="number">0</span>&amp;&amp;flag[jj]!=<span class="number">-1</span>){</span><br><span class="line">ret+=flag[jj];</span><br><span class="line">flag[jj]=<span class="number">-1</span>;</span><br><span class="line">jj=fail[jj];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nnum[id_max];</span><br><span class="line"><span class="comment">//需事先定义num数组，用于保存每个单词在s串中出现过几次 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnum</span><span class="params">(<span class="keyword">char</span> s[])</span></span>{</span><br><span class="line"><span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(num));</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i){</span><br><span class="line">now=trie[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line">++nnum[now];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=id_cnt;i&gt;<span class="number">0</span>;--i){</span><br><span class="line"><span class="keyword">int</span> now=bfsn[i];</span><br><span class="line">nnum[fail[now]]+=nnum[now];</span><br><span class="line"><span class="keyword">int</span> si=id[now].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;si;++j)</span><br><span class="line">num[id[now][j]]+=nnum[now];</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="manacher"><a href="#manacher" class="headerlink" title="manacher"></a>manacher</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需事先定义好 char s[MAXX],a[MAXX*2]; </span></span><br><span class="line"><span class="comment">//和 int ans[MAXX*2]; </span></span><br><span class="line"><span class="comment">//s串是原字符串，a串用来存改变后的字符串，在该函数里面有实现</span></span><br><span class="line"><span class="comment">//ans存改变后的串的以i为中心的最长的回文串的回文半径 </span></span><br><span class="line"><span class="comment">//返回值为最长回文半径（对于原字符串来说） </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">manacher</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">a[<span class="number">0</span>]=<span class="string">'@'</span>;a[<span class="number">1</span>]=<span class="string">'#'</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=lens;++i){</span><br><span class="line">a[len++]=s[i];</span><br><span class="line">a[len++]=<span class="string">'#'</span>;</span><br><span class="line">}</span><br><span class="line">a[len]=<span class="string">'%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r=<span class="number">0</span>,mid=<span class="number">0</span>,ret=<span class="number">1</span>;</span><br><span class="line">ans[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i){</span><br><span class="line"><span class="keyword">if</span>(i&lt;r)</span><br><span class="line">ans[i]=<span class="built_in">min</span>(r-i+<span class="number">1</span>,ans[mid*<span class="number">2</span>-i]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ans[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(a[i-ans[i]]==a[i+ans[i]])</span><br><span class="line">++ans[i];</span><br><span class="line"><span class="keyword">if</span>(r&lt;i+ans[i]<span class="number">-1</span>){</span><br><span class="line">mid=i;</span><br><span class="line">r=mid+ans[i]<span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">ret=<span class="built_in">max</span>(ret,ans[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (ret*<span class="number">2</span><span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="manacher-易于改动版"><a href="#manacher-易于改动版" class="headerlink" title="manacher(易于改动版)"></a>manacher(易于改动版)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">manacher</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> len=lens*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len;++i){</span><br><span class="line">a[i]=<span class="string">'#'</span>;</span><br><span class="line">ans[i]=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lens;++i)</span><br><span class="line">a[i*<span class="number">2</span><span class="number">-1</span>]=s[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,mid=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">ans[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i){</span><br><span class="line"><span class="keyword">if</span>(i&gt;mid+l<span class="number">-1</span>){</span><br><span class="line"><span class="keyword">int</span> jj=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i+jj<span class="number">-1</span>&lt;=len&amp;&amp;i-jj+<span class="number">1</span>&gt;=<span class="number">0</span>&amp;&amp;a[i+jj<span class="number">-1</span>]==a[i-jj+<span class="number">1</span>])</span><br><span class="line">++jj;</span><br><span class="line">mid=i;</span><br><span class="line">l=jj<span class="number">-1</span>;</span><br><span class="line">ans[i]=jj<span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">int</span> j=mid*<span class="number">2</span>-i;</span><br><span class="line"><span class="keyword">if</span>(j-ans[j]+<span class="number">1</span>&gt;mid-l+<span class="number">1</span>)</span><br><span class="line">ans[i]=ans[j];</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">int</span> jj=mid+l-i;</span><br><span class="line"><span class="keyword">while</span>(i+jj<span class="number">-1</span>&lt;=len&amp;&amp;i-jj+<span class="number">1</span>&gt;=<span class="number">0</span>&amp;&amp;a[i+jj<span class="number">-1</span>]==a[i-jj+<span class="number">1</span>])</span><br><span class="line">++jj;</span><br><span class="line">ans[i]=jj<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(i+ans[i]&gt;mid+l){</span><br><span class="line">mid=i;</span><br><span class="line">l=jj<span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">ret=<span class="built_in">max</span>(ret,ans[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (ret*<span class="number">2</span><span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="SA-amp-amp-LCP-st表"><a href="#SA-amp-amp-LCP-st表" class="headerlink" title="SA&amp;&amp;LCP(st表)"></a>SA&amp;&amp;LCP(st表)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[MAXX];</span><br><span class="line"><span class="keyword">int</span> x[MAXX],y[MAXX],c[MAXX],sa[MAXX];</span><br><span class="line"><span class="keyword">int</span> rk[MAXX],height[MAXX];</span><br><span class="line"><span class="keyword">int</span> mn[MAXX],stmin[MAXX][<span class="number">22</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//后缀数组</span></span><br><span class="line"><span class="comment">//需事先定义</span></span><br><span class="line"><span class="comment">//int x[],y[],c[],sa[]; </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SA</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> m=<span class="string">'z'</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) ++c[x[i]=s[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;++i) c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i) sa[c[x[i]]--]=i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k&lt;&lt;=<span class="number">1</span>){</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n-k+<span class="number">1</span>;i&lt;=n;++i) y[++num]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(sa[i]&gt;k) y[++num]=sa[i]-k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) c[i]=<span class="number">0</span>;<span class="comment">//init</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) ++c[x[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;++i) c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i) sa[c[x[y[i]]]--]=y[i],y[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">swap</span>(x[i],y[i]);</span><br><span class="line">x[sa[<span class="number">1</span>]]=<span class="number">1</span>;num=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">x[sa[i]]=(y[sa[i]]==y[sa[i<span class="number">-1</span>]]&amp;&amp;y[sa[i]+k]==y[sa[i<span class="number">-1</span>]+k])?num:++num;</span><br><span class="line"><span class="keyword">if</span>(num==n) <span class="keyword">break</span>;</span><br><span class="line">m=num;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//需事先定义 </span></span><br><span class="line"><span class="comment">//int rk[],height[];</span></span><br><span class="line"><span class="comment">//int mn[MAXX],stmin[MAXX][22];</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LCP</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> h=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) rk[sa[i]]=i;<span class="comment">//init</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="keyword">if</span>(rk[i]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(h) --h;</span><br><span class="line"><span class="keyword">int</span> j=sa[rk[i]<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(i+h&lt;=n&amp;&amp;j+h&lt;=n&amp;&amp;s[i+h]==s[j+h]) ++h;</span><br><span class="line">height[rk[i]]=h;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//st表init </span></span><br><span class="line">mn[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line">mn[i]=((i&amp;(i<span class="number">-1</span>))==<span class="number">0</span>)?mn[i<span class="number">-1</span>]+<span class="number">1</span>:mn[i<span class="number">-1</span>];</span><br><span class="line">stmin[i][<span class="number">0</span>]=height[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=mn[n];++j)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;++i)</span><br><span class="line">stmin[i][j]=<span class="built_in">min</span>(stmin[i][j<span class="number">-1</span>],stmin[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getstmin</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>{</span><br><span class="line"><span class="keyword">int</span> k=mn[r-l+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(stmin[l][k],stmin[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getlcp</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> n-l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">getstmin</span>(<span class="built_in">min</span>(rk[l],rk[r])+<span class="number">1</span>,<span class="built_in">max</span>(rk[l],rk[r]));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="SA-amp-amp-LCP-st-封装成类"><a href="#SA-amp-amp-LCP-st-封装成类" class="headerlink" title="SA&amp;&amp;LCP(st)(封装成类)"></a>SA&amp;&amp;LCP(st)(封装成类)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuffixArray</span>{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> x[MAXX],y[MAXX],c[MAXX],sa[MAXX];</span><br><span class="line"><span class="keyword">int</span> rk[MAXX],height[MAXX];</span><br><span class="line"><span class="keyword">int</span> mn[MAXX],stmin[MAXX][<span class="number">22</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SA</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> m=<span class="string">'z'</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) c[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) ++c[x[i]=s[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;++i) c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i) sa[c[x[i]]--]=i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k&lt;&lt;=<span class="number">1</span>){</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n-k+<span class="number">1</span>;i&lt;=n;++i) y[++num]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(sa[i]&gt;k) y[++num]=sa[i]-k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) c[i]=<span class="number">0</span>;<span class="comment">//init</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) ++c[x[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;++i) c[i]+=c[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i) sa[c[x[y[i]]]--]=y[i],y[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">swap</span>(x[i],y[i]);</span><br><span class="line">x[sa[<span class="number">1</span>]]=<span class="number">1</span>;num=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">x[sa[i]]=(y[sa[i]]==y[sa[i<span class="number">-1</span>]]&amp;&amp;y[sa[i]+k]==y[sa[i<span class="number">-1</span>]+k])?num:++num;</span><br><span class="line"><span class="keyword">if</span>(num==n) <span class="keyword">break</span>;</span><br><span class="line">m=num;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LCP</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> h=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) rk[sa[i]]=i;<span class="comment">//init</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="keyword">if</span>(rk[i]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(h) --h;</span><br><span class="line"><span class="keyword">int</span> j=sa[rk[i]<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(i+h&lt;=n&amp;&amp;j+h&lt;=n&amp;&amp;s[i+h]==s[j+h]) ++h;</span><br><span class="line">height[rk[i]]=h;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//st表init </span></span><br><span class="line">mn[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line">mn[i]=((i&amp;(i<span class="number">-1</span>))==<span class="number">0</span>)?mn[i<span class="number">-1</span>]+<span class="number">1</span>:mn[i<span class="number">-1</span>];</span><br><span class="line">stmin[i][<span class="number">0</span>]=height[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=mn[n];++j)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;++i)</span><br><span class="line">stmin[i][j]=<span class="built_in">min</span>(stmin[i][j<span class="number">-1</span>],stmin[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getstmin</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>{</span><br><span class="line"><span class="keyword">int</span> k=mn[r-l+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">min</span>(stmin[l][k],stmin[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getlcp</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> n-l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">getstmin</span>(<span class="built_in">min</span>(rk[l],rk[r])+<span class="number">1</span>,<span class="built_in">max</span>(rk[l],rk[r]));</span><br><span class="line">}</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h3 id="SAM"><a href="#SAM" class="headerlink" title="SAM"></a>SAM</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SamNode</span>{</span></span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> len,fa;</span><br><span class="line"><span class="built_in">SamNode</span>(){<span class="built_in">memset</span>(ch,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(ch));len=<span class="number">0</span>;}</span><br><span class="line">}sam[MAXX&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> las=<span class="number">1</span>,sam_cnt=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//LL num[MAXX&lt;&lt;1];</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> c)</span></span>{</span><br><span class="line"><span class="keyword">int</span> p=las;<span class="keyword">int</span> np=las=++sam_cnt;</span><br><span class="line"><span class="comment">//num[np]=1LL;//此行为计数用，标记出现过几次 </span></span><br><span class="line">sam[np].len=sam[p].len+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;p&amp;&amp;!sam[p].ch[c];p=sam[p].fa) sam[p].ch[c]=np;</span><br><span class="line"><span class="keyword">if</span>(!p) sam[np].fa=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">int</span> q=sam[p].ch[c];</span><br><span class="line"><span class="keyword">if</span>(sam[q].len==sam[p].len+<span class="number">1</span>) sam[np].fa=q;</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">int</span> nq=++sam_cnt;sam[nq]=sam[q];</span><br><span class="line">sam[nq].len=sam[p].len+<span class="number">1</span>;</span><br><span class="line">sam[q].fa=sam[np].fa=nq;</span><br><span class="line"><span class="keyword">for</span>(;p&amp;&amp;sam[p].ch[c]==q;p=sam[p].fa) sam[p].ch[c]=nq;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="堆优化dijkstra最短路"><a href="#堆优化dijkstra最短路" class="headerlink" title="堆优化dijkstra最短路"></a>堆优化<em>dijkstra</em>最短路</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rode</span>{</span></span><br><span class="line"><span class="keyword">int</span> to,len;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">int</span> n,dij[MAXX];</span><br><span class="line">vector&lt;rode&gt; ro[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> st)</span></span>{</span><br><span class="line"><span class="built_in">memset</span>(dij,Inf,<span class="built_in"><span class="keyword">sizeof</span></span>(dij));</span><br><span class="line">    priority_queue&lt;P,vector&lt;P&gt;,greater&lt;P&gt; &gt; q;</span><br><span class="line">    q.<span class="built_in">emplace</span>(<span class="built_in">P</span>(<span class="number">0</span>,st));</span><br><span class="line">    dij[st]=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()){</span><br><span class="line">    P p=q.<span class="built_in">top</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">int</span> mid=p.second;</span><br><span class="line">    <span class="keyword">if</span>(dij[mid]&lt;p.first) <span class="keyword">continue</span>; <span class="comment">//括号条件与(dij[mid]!=p.first)等价 </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> si=ro[mid].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;si;++i){</span><br><span class="line">    <span class="keyword">int</span> too=ro[mid][i].to,lenn=ro[mid][i].len;</span><br><span class="line">    <span class="keyword">if</span>(dij[too]&gt;dij[mid]+lenn){</span><br><span class="line">    dij[too]=dij[mid]+lenn;</span><br><span class="line">    q.<span class="built_in">emplace</span>(<span class="built_in">P</span>(dij[too],too));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Spfa"><a href="#Spfa" class="headerlink" title="Spfa"></a><em>Spfa</em></h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rode</span>{</span></span><br><span class="line"><span class="keyword">int</span> to,len;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">int</span> n,in[MAXX],dij[MAXX];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXX];</span><br><span class="line">vector&lt;rode&gt; ro[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> st)</span></span>{</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line"><span class="built_in">memset</span>(in,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(in));</span><br><span class="line"><span class="built_in">memset</span>(dij,Inf,<span class="built_in"><span class="keyword">sizeof</span></span>(dij));</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">emplace</span>(st);</span><br><span class="line">vis[st]=<span class="literal">true</span>;++in[st];dij[st]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>()){</span><br><span class="line"><span class="keyword">int</span> p=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line">vis[p]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> si=ro[p].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;si;++i){</span><br><span class="line"><span class="keyword">int</span> too=ro[p][i].to,lenn=ro[p][i].len;</span><br><span class="line"><span class="keyword">if</span>(dij[too]&gt;dij[p]+lenn){</span><br><span class="line">dij[too]=dij[p]+lenn;</span><br><span class="line">++in[too];</span><br><span class="line"><span class="keyword">if</span>(in[too]&gt;=n)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[too]){</span><br><span class="line">vis[too]=<span class="literal">true</span>;</span><br><span class="line">q.<span class="built_in">emplace</span>(too);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="tarjan割点-不是缩点"><a href="#tarjan割点-不是缩点" class="headerlink" title="tarjan割点(不是缩点)"></a><em>tarjan</em>割点(不是缩点)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,m,dfn[MAXX],low[MAXX],dfn_cnt;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; to[MAXX];</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; cut;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> now)</span></span>{ <span class="comment">//每次调用的时候需要更新root的值 </span></span><br><span class="line">dfn[now]=low[now]=++dfn_cnt;</span><br><span class="line"><span class="keyword">int</span> si=to[now].<span class="built_in">size</span>(),flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;si;++i){</span><br><span class="line"><span class="keyword">int</span> jj=to[now][i];</span><br><span class="line"><span class="keyword">if</span>(!dfn[jj]){</span><br><span class="line"><span class="built_in">tarjan</span>(jj);</span><br><span class="line">low[now]=<span class="built_in">min</span>(low[now],low[jj]);</span><br><span class="line"><span class="keyword">if</span>(low[jj]&gt;=dfn[now]){</span><br><span class="line">++flag;</span><br><span class="line"><span class="keyword">if</span>(now!=root||flag&gt;<span class="number">1</span>)</span><br><span class="line">cut.<span class="built_in">emplace</span>(now);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">low[now]=<span class="built_in">min</span>(low[now],low[jj]);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="tarjan桥"><a href="#tarjan桥" class="headerlink" title="tarjan桥"></a><em>tarjan</em>桥</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">int</span> n,m,dfn[MAXX],dfn_cnt,low[MAXX];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; to[MAXX];</span><br><span class="line">set&lt;P&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> last)</span></span>{ <span class="comment">//桥 </span></span><br><span class="line">dfn[now]=low[now]=++dfn_cnt;</span><br><span class="line"><span class="keyword">int</span> si=to[now].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;si;++i){</span><br><span class="line"><span class="keyword">int</span> jj=to[now][i];</span><br><span class="line"><span class="keyword">if</span>(!dfn[jj]){</span><br><span class="line"><span class="built_in">tarjan</span>(jj,now);</span><br><span class="line">low[now]=<span class="built_in">min</span>(low[now],low[jj]);</span><br><span class="line"><span class="keyword">if</span>(low[jj]&gt;dfn[now]){</span><br><span class="line">ans.<span class="built_in">emplace</span>(<span class="built_in">P</span>(<span class="built_in">min</span>(now,jj),<span class="built_in">max</span>(now,jj)));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(jj!=last){</span><br><span class="line">low[now]=<span class="built_in">min</span>(low[now],dfn[jj]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="tarjan缩点-不是割点-有向图"><a href="#tarjan缩点-不是割点-有向图" class="headerlink" title="tarjan缩点(不是割点)(有向图)"></a><em>tarjan</em>缩点(不是割点)(有向图)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,m,dfn[MAXX],low[MAXX],dfn_cnt;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; to[MAXX];</span><br><span class="line">stack&lt;<span class="keyword">int</span>&gt; sta;</span><br><span class="line"><span class="keyword">bool</span> in_sta[MAXX];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; scc[MAXX];</span><br><span class="line"><span class="keyword">int</span> scc_cnt,belong[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> now)</span></span>{</span><br><span class="line">dfn[now]=low[now]=++dfn_cnt;</span><br><span class="line">sta.<span class="built_in">emplace</span>(now);in_sta[now]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> si=to[now].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;si;++i){</span><br><span class="line"><span class="keyword">int</span> jj=to[now][i];</span><br><span class="line"><span class="keyword">if</span>(!dfn[jj]){</span><br><span class="line"><span class="built_in">tarjan</span>(jj);</span><br><span class="line">low[now]=<span class="built_in">min</span>(low[now],low[jj]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(in_sta[jj])</span><br><span class="line">low[now]=<span class="built_in">min</span>(low[now],low[jj]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(dfn[now]==low[now]){</span><br><span class="line">++scc_cnt;</span><br><span class="line"><span class="keyword">int</span> jj=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(jj!=now){</span><br><span class="line">jj=sta.<span class="built_in">top</span>();sta.<span class="built_in">pop</span>();</span><br><span class="line">scc[scc_cnt].<span class="built_in">emplace_back</span>(jj);</span><br><span class="line">in_sta[jj]=<span class="literal">false</span>;</span><br><span class="line">belong[jj]=scc_cnt;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Kruskal-并查集"><a href="#Kruskal-并查集" class="headerlink" title="Kruskal(并查集)"></a><em>Kruskal</em>(并查集)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>{</span></span><br><span class="line"><span class="keyword">int</span> st,en,len;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">int</span> n,m,sum,dad[MAXX]; <span class="comment">//n个顶点，m条边  sum为生成树的边的权值之和 </span></span><br><span class="line">Edge a[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge jj,Edge kk)</span></span>{<span class="keyword">return</span> jj.len&lt;kk.len;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> jj)</span></span>{</span><br><span class="line"><span class="keyword">return</span> dad[jj]==jj?jj:dad[jj]=<span class="built_in">root</span>(dad[jj]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">unit</span><span class="params">(<span class="keyword">int</span> jj,<span class="keyword">int</span> kk)</span></span>{</span><br><span class="line">dad[<span class="built_in">root</span>(jj)]=<span class="built_in">root</span>(kk);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+m+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">dad[i]=i;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i){</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">root</span>(a[i].st)!=<span class="built_in">root</span>(a[i].en)){</span><br><span class="line"><span class="built_in">unit</span>(a[i].st,a[i].en);</span><br><span class="line">sum+=a[i].len;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="LCA-最近公共祖先"><a href="#LCA-最近公共祖先" class="headerlink" title="LCA(最近公共祖先)"></a><em>LCA</em>(最近公共祖先)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,m,root;</span><br><span class="line"><span class="keyword">int</span> fa[MAXX][<span class="number">22</span>],depth[MAXX];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; to[MAXX];</span><br><span class="line"><span class="keyword">int</span> lg[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;MAXX;++i)</span><br><span class="line">lg[i]=lg[i<span class="number">-1</span>]+(<span class="number">1</span>&lt;&lt;lg[i<span class="number">-1</span>]==i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> last)</span></span>{</span><br><span class="line">fa[now][<span class="number">0</span>]=last;depth[now]=depth[last]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lg[depth[now]];++i)</span><br><span class="line">fa[now][i]=fa[fa[now][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">int</span> si=to[now].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;si;++i)</span><br><span class="line"><span class="keyword">if</span>(to[now][i]!=last)</span><br><span class="line"><span class="built_in">dfs</span>(to[now][i],now);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> jj,<span class="keyword">int</span> kk)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(depth[jj]&gt;depth[kk])</span><br><span class="line"><span class="built_in">swap</span>(jj,kk);</span><br><span class="line"><span class="keyword">while</span>(depth[jj]&lt;depth[kk])</span><br><span class="line">kk=fa[kk][lg[depth[kk]-depth[jj]]<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(jj==kk)</span><br><span class="line"><span class="keyword">return</span> jj;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=lg[depth[jj]]<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line"><span class="keyword">if</span>(fa[jj][i]!=fa[kk][i])</span><br><span class="line">jj=fa[jj][i],kk=fa[kk][i];</span><br><span class="line"><span class="keyword">return</span> fa[jj][<span class="number">0</span>];</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,m,e; <span class="comment">// n个点和m个点,e条边 </span></span><br><span class="line"><span class="keyword">int</span> match[MAXX]; <span class="comment">// 第二个集合的点i的匹配点为第一个集合的点match[i] </span></span><br><span class="line"><span class="keyword">bool</span> vis[MAXX]; <span class="comment">// 第二个集合的点i是否被访问过 </span></span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; to[MAXX]; <span class="comment">// 邻接表存图，在这里用set是为了防止重边，平时用vector即可</span></span><br><span class="line">   <span class="comment">// 这里只记录从左到右的边即可 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> now)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> jj:to[now]){</span><br><span class="line"><span class="keyword">if</span>(!vis[jj]){</span><br><span class="line">vis[jj]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(match[jj]==<span class="number">0</span>||<span class="built_in">find</span>(match[jj])){</span><br><span class="line">match[jj]=now;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Hungarian</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(i)) ++ret;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//int ans=HunGaria(); // ans即为最大匹配数</span></span><br></pre></td></tr></tbody></table></figure><h2 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h2><h3 id="欧拉筛存-lt-nn-的素数"><a href="#欧拉筛存-lt-nn-的素数" class="headerlink" title="欧拉筛存(<=nn)的素数"></a>欧拉筛存(&lt;=nn)的素数</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[MAXX],m;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXX]; <span class="comment">//vis[i]=true; 表示i为合数 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ola</span><span class="params">(<span class="keyword">int</span> nn)</span></span>{</span><br><span class="line">    m=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=nn;++i){</span><br><span class="line"><span class="keyword">if</span>(!vis[i])</span><br><span class="line">a[++m]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m&amp;&amp;i*a[j]&lt;=nn;++j){</span><br><span class="line">vis[i*a[j]]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(i%a[j]==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">fastpow</span><span class="params">(LL jj,LL kk)</span></span>{</span><br><span class="line">LL ret=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(kk){</span><br><span class="line"><span class="keyword">if</span>(kk&amp;<span class="number">1</span>) ret=ret*jj%mod;</span><br><span class="line">jj=jj*jj%mod;</span><br><span class="line">kk&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="线性基-解决最大最小异或和问题"><a href="#线性基-解决最大最小异或和问题" class="headerlink" title="线性基(解决最大最小异或和问题)"></a>线性基(解决最大最小异或和问题)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">LL d[<span class="number">70</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">62</span>;++i)</span><br><span class="line">        d[i]=<span class="number">0LL</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(LL jj)</span></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">62</span>;i&gt;=<span class="number">0</span>;--i){</span><br><span class="line">        <span class="keyword">if</span>(jj&amp;(<span class="number">1LL</span>&lt;&lt;i)){</span><br><span class="line">            <span class="keyword">if</span>(!d[i]){</span><br><span class="line">                d[i]=jj;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            jj^=d[i];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">getmax</span><span class="params">()</span></span>{</span><br><span class="line">    LL ret=<span class="number">0LL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">62</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        ret=<span class="built_in">max</span>(ret,ret^d[i]);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">geimin</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">62</span>;++i)</span><br><span class="line">        <span class="keyword">if</span>(d[i])</span><br><span class="line">            <span class="keyword">return</span> d[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="模意义下的逆元"><a href="#模意义下的逆元" class="headerlink" title="模意义下的逆元"></a>模意义下的逆元</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模意义下的逆元 </span></span><br><span class="line"><span class="keyword">const</span> LL mod=<span class="number">1000000007</span>;</span><br><span class="line"><span class="function">LL <span class="title">fastpow</span><span class="params">(LL jj,LL kk)</span></span>{</span><br><span class="line">LL ret=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(kk){</span><br><span class="line"><span class="keyword">if</span>(kk&amp;<span class="number">1</span>) ret=ret*jj%mod;</span><br><span class="line">jj=jj*jj%mod;</span><br><span class="line">kk&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">rev</span><span class="params">(LL jj)</span></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">fastpow</span>(jj,mod<span class="number">-2</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">//(1/2)%mod=rev(2)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="错位排序公式"><a href="#错位排序公式" class="headerlink" title="错位排序公式"></a>错位排序公式</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d[<span class="number">1</span>]=<span class="number">0</span>;d[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">d[i]=(n<span class="number">-1</span>)*(d[i<span class="number">-1</span>]+d[i<span class="number">-2</span>]);</span><br></pre></td></tr></tbody></table></figure><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,c[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> jj)</span></span>{<span class="keyword">return</span> (jj)&amp;(-jj);}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> jj,<span class="keyword">int</span> kk)</span></span>{</span><br><span class="line"><span class="keyword">while</span>(jj&lt;=n){</span><br><span class="line">c[jj]+=kk;</span><br><span class="line">jj+=<span class="built_in">lowbit</span>(jj);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> jj)</span></span>{</span><br><span class="line"><span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(jj&gt;<span class="number">0</span>){</span><br><span class="line">ret+=c[jj];</span><br><span class="line">jj-=<span class="built_in">lowbit</span>(jj);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="线段树求和-区间修改"><a href="#线段树求和-区间修改" class="headerlink" title="线段树求和(区间修改+)"></a>线段树求和(区间修改+)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">LL n,a[MAXX],tree[MAXX&lt;&lt;<span class="number">2</span>],laze[MAXX&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(LL rt)</span></span>{</span><br><span class="line">tree[rt]=tree[rt&lt;&lt;<span class="number">1</span>]+tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(LL l,LL r,LL rt)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(l==r){</span><br><span class="line">tree[rt]=a[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">LL mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(LL rt,LL ln,LL rn)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(laze[rt]){</span><br><span class="line">tree[rt&lt;&lt;<span class="number">1</span>]+=ln*laze[rt];</span><br><span class="line">tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=rn*laze[rt];</span><br><span class="line">laze[rt&lt;&lt;<span class="number">1</span>]+=laze[rt];</span><br><span class="line">laze[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=laze[rt];</span><br><span class="line">laze[rt]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(LL L,LL R,LL jj,LL l,LL r,LL rt)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R){</span><br><span class="line">laze[rt]+=jj;</span><br><span class="line">tree[rt]+=(r-l+<span class="number">1</span>)*jj;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">LL mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">push_down</span>(rt,mid-l+<span class="number">1</span>,r-mid);</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid)</span><br><span class="line"><span class="built_in">updata</span>(L,R,jj,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid)</span><br><span class="line"><span class="built_in">updata</span>(L,R,jj,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">getsum</span><span class="params">(LL L,LL R,LL l,LL r,LL rt)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r){</span><br><span class="line"><span class="keyword">return</span> tree[rt];</span><br><span class="line">}</span><br><span class="line">LL mid=(l+r)&gt;&gt;<span class="number">1</span>,ret=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">push_down</span>(rt,mid-l+<span class="number">1</span>,r-mid);</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid)</span><br><span class="line">ret+=<span class="built_in">getsum</span>(L,R,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid)</span><br><span class="line">ret+=<span class="built_in">getsum</span>(L,R,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//build(1,n,1);</span></span><br><span class="line"><span class="comment">//updata(l,r,k,1,n,1);</span></span><br><span class="line"><span class="comment">//getsum(l,r,1,n,1);</span></span><br></pre></td></tr></tbody></table></figure><h3 id="线段树MIN-单点修改"><a href="#线段树MIN-单点修改" class="headerlink" title="线段树MIN(单点修改=)"></a>线段树MIN(单点修改=)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">LL n,a[MAXX],tree[MAXX&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(LL rt)</span></span>{</span><br><span class="line">tree[rt]=<span class="built_in">min</span>(tree[rt&lt;&lt;<span class="number">1</span>],tree[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(LL l,LL r,LL rt)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(l==r){</span><br><span class="line">tree[rt]=a[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">LL mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(LL L,LL jj,LL l,LL r,LL rt)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(L==l&amp;&amp;r==L){</span><br><span class="line">tree[rt]=jj;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">LL mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid)</span><br><span class="line"><span class="built_in">updata</span>(L,jj,l,mid,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">updata</span>(L,jj,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">getmin</span><span class="params">(LL L,LL R,LL l,LL r,LL rt)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l&amp;&amp;R&gt;=r){</span><br><span class="line"><span class="keyword">return</span> tree[rt];</span><br><span class="line">}</span><br><span class="line">LL mid=(l+r)&gt;&gt;<span class="number">1</span>,ret=Inf;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=mid)</span><br><span class="line">ret=<span class="built_in">min</span>(ret,<span class="built_in">getmin</span>(L,R,l,mid,rt&lt;&lt;<span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span>(R&gt;mid)</span><br><span class="line">ret=<span class="built_in">min</span>(ret,<span class="built_in">getmin</span>(L,R,mid+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//build(1,n,1);</span></span><br><span class="line"><span class="comment">//updata(l,k,1,n,1);</span></span><br><span class="line"><span class="comment">//getmin(l,r,1,n,1);</span></span><br></pre></td></tr></tbody></table></figure><h3 id="st表-max"><a href="#st表-max" class="headerlink" title="st表(max)"></a>st表(max)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,a[MAXX];</span><br><span class="line"><span class="keyword">int</span> mn[MAXX],stmax[MAXX][<span class="number">22</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>{</span><br><span class="line">mn[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line">mn[i]=((i&amp;(i<span class="number">-1</span>))==<span class="number">0</span>)?mn[i<span class="number">-1</span>]+<span class="number">1</span>:mn[i<span class="number">-1</span>];</span><br><span class="line">stmax[i][<span class="number">0</span>]=a[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=mn[n];++j)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;j)<span class="number">-1</span>&lt;=n;++i)</span><br><span class="line">stmax[i][j]=<span class="built_in">max</span>(stmax[i][j<span class="number">-1</span>],stmax[i+(<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))][j<span class="number">-1</span>]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getstmax</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>{</span><br><span class="line"><span class="keyword">int</span> k=mn[r-l+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(stmax[l][k],stmax[r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][k]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="二分-左闭右开"><a href="#二分-左闭右开" class="headerlink" title="二分(左闭右开)"></a>二分(左闭右开)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=n+<span class="number">1</span>,mid;<span class="comment">//[l,r)</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;r){</span><br><span class="line">    mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">check</span>(mid))</span><br><span class="line">        l=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        r=mid;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="离散化-最终包含重复元素"><a href="#离散化-最终包含重复元素" class="headerlink" title="离散化(最终包含重复元素)"></a>离散化(最终包含重复元素)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//包含重复元素 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    s[i]=a[i];<span class="comment">//a[]为原数组 </span></span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">unique</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>)-a<span class="number">-1</span>;<span class="comment">//去重之后的数组长度 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    s[i]=<span class="built_in">lower_bound</span>(a+<span class="number">1</span>,a+len+<span class="number">1</span>,s[i])-a;<span class="comment">//s[]即为离散化之后的数组 </span></span><br></pre></td></tr></tbody></table></figure><h3 id="离散化-最终不包含重复元素"><a href="#离散化-最终不包含重复元素" class="headerlink" title="离散化(最终不包含重复元素)"></a>离散化(最终不包含重复元素)</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i].first);<span class="comment">//P a[MAXX]</span></span><br><span class="line">    a[i].second=i;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    s[a[i].second]=i;<span class="comment">//s[]即为离散化之后的结果 </span></span><br></pre></td></tr></tbody></table></figure><h3 id="unordered-map中存pair"><a href="#unordered-map中存pair" class="headerlink" title="unordered_map中存pair"></a>unordered_map中存pair</h3><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hashfunc</span>{</span></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span></span><br><span class="line"><span class="function">    <span class="keyword">size_t</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> pair&lt;T, U&gt; &amp;i)</span> <span class="keyword">const</span> </span>{</span><br><span class="line">        <span class="comment">//根据题目数据写一个hash函数</span></span><br><span class="line">        <span class="keyword">return</span> (LL)(i.first)*<span class="number">1000000LL</span>+(LL)(i.second);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">unordered_map&lt;P,<span class="keyword">int</span>,hashfunc&gt; dij;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 个人板子总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纪念第一次AK</title>
      <link href="/2022/04/22/cfround-784-div-4-summary/"/>
      <url>/2022/04/22/cfround-784-div-4-summary/</url>
      
        <content type="html"><![CDATA[<h1 id="Codeforces-Round-784-Div-4"><a href="#Codeforces-Round-784-Div-4" class="headerlink" title="Codeforces Round 784(Div.4)"></a>Codeforces Round 784(Div.4)</h1><p><a href="https://codeforces.com/contest/1669">CONTEST传送门</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本次cf是我打cf以来第一次AK，虽然是div.4，难度较低，不过对我而言有很大的纪念意义，于是写下本篇用来纪念。</p><h3 id="战况"><a href="#战况" class="headerlink" title="战况"></a>战况</h3><p><img src="/2022/04/22/cfround-784-div-4-summary/submissions.png" alt="My Submissions"></p><p><img src="/2022/04/22/cfround-784-div-4-summary/all.png" alt="all"></p><p><img src="/2022/04/22/cfround-784-div-4-summary/standing.png" alt="standing"></p><p>在距离比赛结束还剩26分钟时成功AK，罚时334。</p>]]></content>
      
      
      <categories>
          
          <category> cf总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> cf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客的评论系统的搭建</title>
      <link href="/2022/04/16/contact-system-building/"/>
      <url>/2022/04/16/contact-system-building/</url>
      
        <content type="html"><![CDATA[<h2 id="对博客进行评论系统的搭建"><a href="#对博客进行评论系统的搭建" class="headerlink" title="对博客进行评论系统的搭建"></a>对博客进行评论系统的搭建</h2><ul><li>选择了使用<em>Waline</em>进行搭建</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>我是按照官方文档中的<a href="https://waline.js.org/guide/get-started.html#leancloud-%E8%AE%BE%E7%BD%AE-%E6%95%B0%E6%8D%AE%E5%BA%93">快速上手</a>作为教程进行搭建的。</p><ol><li><p><strong>LeanCloud 设置(数据库)</strong></p><p>使用<em>lendcloud</em>，可以在此进行数据储存等操作，评论的数据管理就在此</p></li><li><p><strong>Vercel 部署(服务端)</strong></p><p><a href="https://vercel.com/new/clone?repository-url=https://github.com/walinejs/waline/tree/main/example">在此</a>进行服务端的部署，连接到github，Vercel会基于Waline模板帮助你新建并初始化仓库</p></li><li><p><strong>HTML 引入(客户端)</strong></p><p>先试一下能不能自动配置</p><p>尝试了之后发现</p><p>在主题中直接输入相关参数即可自动配置</p></li></ol><p>流程感觉挺简便的</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> 评论系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>network_orders</title>
      <link href="/2022/04/15/network-order/"/>
      <url>/2022/04/15/network-order/</url>
      
        <content type="html"><![CDATA[<h2 id="在计网学习中遇到的可操作的命令"><a href="#在计网学习中遇到的可操作的命令" class="headerlink" title="在计网学习中遇到的可操作的命令"></a>在计网学习中遇到的可操作的命令</h2><h4 id="Traceroute-诊断程序："><a href="#Traceroute-诊断程序：" class="headerlink" title="Traceroute 诊断程序："></a><strong>Traceroute</strong> 诊断程序：</h4><ul><li><p><strong>原理</strong>：提供从源端，经过路由器，到目的的延时测量 </p><ul><li>沿着目的的路径，向每个路由器发送3个探测分组</li><li>路由器 <em>i</em> 将向发送方返回一个分组</li><li>发送方对发送和回复之间间隔计时</li></ul></li><li><p><strong>使用方法</strong>：</p><p>在命令行中输入以下指令</p><p>Linux: </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traceroute shaun-2314.github.io</span><br></pre></td></tr></tbody></table></figure><p>Windows:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tracert shaun-2314.github.io</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>例子</strong></p><p><img src="/2022/04/15/network-order/Traceroute-example.png" alt="Traceroute-example"></p></li></ul><h4 id="telnet-建立连接工具-TCP"><a href="#telnet-建立连接工具-TCP" class="headerlink" title="telnet 建立连接工具(TCP)"></a>telnet 建立连接工具(TCP)</h4><ul><li><p>通过TCP协议进行连接请求</p><p>连接确认后，可通过HTTP等协议进行<em>沟通</em></p></li><li><p>使用方法</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet shaun-2314.github.io 80</span><br></pre></td></tr></tbody></table></figure><p>在连接成功后可以使用HTTP等协议进行报文交换。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.0</span><br><span class="line">HOST:shaun-2314.github.io //(此行可以不需要写)</span><br></pre></td></tr></tbody></table></figure></li><li><p>例子</p><p><img src="/2022/04/15/network-order/telnet-example.png" alt="telnet-example"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计网学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日总结-1月20日</title>
      <link href="/2022/01/20/1-20/"/>
      <url>/2022/01/20/1-20/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构进阶"><a href="#数据结构进阶" class="headerlink" title="数据结构进阶"></a>数据结构进阶</h2><ul><li>splay树</li><li>主席树</li></ul><h3 id="今日战况"><a href="#今日战况" class="headerlink" title="今日战况"></a>今日战况</h3><p><img src="/2022/01/20/1-20/Standing.png" alt="Standing"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天看了好长时间的splay树和主席树的相关内容，但还是看的不明白，又去看训练的题目集，发现F题又可以用set写，之后，又从伍老师那里知道了A题也可以用set写，于是，就又用set A了这两道题。</p><h3 id="部分题目"><a href="#部分题目" class="headerlink" title="部分题目"></a>部分题目</h3><h4 id="F题-宠物收养所"><a href="#F题-宠物收养所" class="headerlink" title="F题: 宠物收养所"></a>F题: 宠物收养所</h4><p><a href="https://loj.ac/p/10144">题目传送门</a></p><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><blockquote><p>最近，阿 Q 开了一间宠物收养所。收养所提供两种服务：收养被主人遗弃的宠物和让新的主人领养这些宠物。 每个领养者都希望领养到自己满意的宠物，阿 Q 根据领养者的要求通过他自己发明的一个特殊的公式，得出该领养者希望领养的宠物的特点值 a（a 是一个正整数，a &lt; 2^31），而他也给每个处在收养所的宠物一个特点值，这样他就能够很方便的处理整个领养宠物的过程了。</p><p>宠物收养所总是会有两种情况发生：被遗弃的宠物过多或者是想要收养宠物的人太多，而宠物太少：</p><ol><li>被遗弃的宠物过多时，假若到来一个领养者，这个领养者希望领养的宠物的特点值为 a，那么它将会领养一只目前未被领养的宠物中特点值最接近 a 的一只宠物。任何两只宠物的特点值都不可能是相同的，任何两个领养者的希望领养宠物的特点值也不可能是一样的。如果有两只满足要求的宠物，即存在两只宠物他们的特点值分别为 a-b 和 a+b，那么领养者将会领养特点值为 a-b 的那只宠物；</li><li>收养宠物的人过多，假若到来一只被收养的宠物，那么哪个领养者能够领养它呢？能够领养它的领养者，是那个希望被领养宠物的特点值最接近该宠物特点值的领养者，如果该宠物的特点值为 a，存在两个领养者他们希望领养宠物的特点值分别为 a-b 和 a+b，那么特点值为 a-b 的那个领养者将成功领养该宠物。一个领养者领养了一个特点值为 a 的宠物，而它本身希望领养的宠物的特点值为 b，那么这个领养者的不满意程度为 |a-b|。</li></ol><p>你得到了一年当中，领养者和被收养宠物到来收养所的情况，希望你计算所有收养了宠物的领养者的不满意程度的总和。这一年初始时，收养所里面既没有宠物，也没有领养者。</p><p><strong>输入格式</strong></p><p>第一行为一个正整数 n，表示一年当中来到收养所的宠物和领养者的总数；</p><p>接下来的 n 行，按到来时间的先后顺序描述了一年当中来到收养所的宠物和领养者的情况。每行有两个整数 a, b，其中 a=0 表示宠物，a=1 表示领养者，正数 b 表示宠物的特点值或是领养者希望领养宠物的特点值。</p><p>同一时间呆在收养所中的，要么全是宠物，要么全是领养者，这些宠物和领养者的个数不会超过 10^4 个。</p><p><strong>输出格式</strong></p><p>仅有一个正整数，表示一年当中所有收养了宠物的领养者的不满意程度的总和对 10^6 取模以后的结果。</p><p><strong>样例</strong></p><p><strong>Input</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">0 2</span><br><span class="line">0 4</span><br><span class="line">1 3</span><br><span class="line">1 2</span><br><span class="line">1 5</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>Output</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>数据范围与提示</strong></p><p>对于全部数据，有 1&lt;=n&lt;=8*10^4。</p></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>这道题就是一道模拟，用set进行存储，用 lower_bound 进行查找比他大一点的，再减一就是比他小一点的。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,ans=<span class="number">0</span>,sipet=<span class="number">0</span>,sipeo=<span class="number">0</span>;</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; pet,peo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> flag,a;</span><br><span class="line"><span class="keyword">while</span>(n--){</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;flag,&amp;a);</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>){</span><br><span class="line"><span class="keyword">if</span>(sipet&gt;=sipeo){</span><br><span class="line">pet.<span class="built_in">emplace</span>(a);</span><br><span class="line">++sipet;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">auto</span> it1=peo.<span class="built_in">lower_bound</span>(a);</span><br><span class="line"><span class="keyword">if</span>(it1==peo.<span class="built_in">end</span>()){</span><br><span class="line">--it1;</span><br><span class="line"><span class="keyword">int</span> jj=*it1;</span><br><span class="line">ans+=a-jj;ans%=<span class="number">1000000</span>;</span><br><span class="line">--sipeo;</span><br><span class="line">peo.<span class="built_in">erase</span>(it1);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">if</span>(it1==peo.<span class="built_in">begin</span>()){</span><br><span class="line"><span class="keyword">int</span> jj=*it1;</span><br><span class="line">ans+=jj-a;ans%=<span class="number">1000000</span>;</span><br><span class="line">--sipeo;</span><br><span class="line">peo.<span class="built_in">erase</span>(it1);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">auto</span> it2=it1;--it2;</span><br><span class="line"><span class="keyword">int</span> jj=*it1,kk=*it2;</span><br><span class="line"><span class="keyword">if</span>(a-kk&lt;=jj-a){</span><br><span class="line">ans+=a-kk;ans%=<span class="number">1000000</span>;</span><br><span class="line">--sipeo;</span><br><span class="line">peo.<span class="built_in">erase</span>(it2);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line">ans+=jj-a;ans%=<span class="number">1000000</span>;</span><br><span class="line">--sipeo;</span><br><span class="line">peo.<span class="built_in">erase</span>(it1);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">if</span>(sipeo&gt;=sipet){</span><br><span class="line">peo.<span class="built_in">emplace</span>(a);</span><br><span class="line">++sipeo;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">auto</span> it1=pet.<span class="built_in">lower_bound</span>(a);</span><br><span class="line"><span class="keyword">if</span>(it1==pet.<span class="built_in">end</span>()){</span><br><span class="line">--it1;</span><br><span class="line"><span class="keyword">int</span> jj=*it1;</span><br><span class="line">ans+=a-jj;ans%=<span class="number">1000000</span>;</span><br><span class="line">--sipet;</span><br><span class="line">pet.<span class="built_in">erase</span>(it1);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">if</span>(it1==pet.<span class="built_in">begin</span>()){</span><br><span class="line"><span class="keyword">int</span> jj=*it1;</span><br><span class="line">ans+=jj-a;ans%=<span class="number">1000000</span>;</span><br><span class="line">--sipet;</span><br><span class="line">pet.<span class="built_in">erase</span>(it1);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">auto</span> it2=it1;--it2;</span><br><span class="line"><span class="keyword">int</span> jj=*it1,kk=*it2;</span><br><span class="line"><span class="keyword">if</span>(a-kk&lt;=jj-a){</span><br><span class="line">ans+=a-kk;ans%=<span class="number">1000000</span>;</span><br><span class="line">--sipet;</span><br><span class="line">pet.<span class="built_in">erase</span>(it2);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line">ans+=jj-a;ans%=<span class="number">1000000</span>;</span><br><span class="line">--sipet;</span><br><span class="line">pet.<span class="built_in">erase</span>(it1);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="A题-Double-Queue"><a href="#A题-Double-Queue" class="headerlink" title="A题: Double Queue"></a>A题: Double Queue</h4><p><a href="http://poj.org/problem?id=3481">题目传送门</a></p><h5 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h5><blockquote><p>The new founded Balkan Investment Group Bank (BIG-Bank) opened a new office in Bucharest, equipped with a modern computing environment provided by IBM Romania, and using modern information technologies. As usual, each client of the bank is identified by a positive integer <em>K</em> and, upon arriving to the bank for some services, he or she receives a positive integer priority <em>P</em>. One of the inventions of the young managers of the bank shocked the software engineer of the serving system. They proposed to break the tradition by sometimes calling the serving desk with the <strong>lowest</strong> priority instead of that with the highest priority. Thus, the system will receive the following types of request:</p><table><thead><tr><th>0</th><th>The system needs to stop serving</th></tr></thead><tbody><tr><td>1 <em>K</em> <em>P</em></td><td>Add client <em>K</em> to the waiting list with priority <em>P</em></td></tr><tr><td>2</td><td>Serve the client with the highest priority and drop him or her from the waiting list</td></tr><tr><td>3</td><td>Serve the client with the lowest priority and drop him or her from the waiting list</td></tr></tbody></table><p>Your task is to help the software engineer of the bank by writing a program to implement the requested serving policy.</p><p><strong>Input</strong></p><p>Each line of the input contains one of the possible requests; only the last line contains the stop-request (code 0). You may assume that when there is a request to include a new client in the list (code 1), there is no other request in the list of the same client or with the same priority. An identifier <em>K</em> is always less than 10^6 , and a priority <em>P</em> is less than 10^7 . The client may arrive for being served multiple times, and each time may obtain a different priority.</p><p><strong>Output</strong></p><p>For each request with code 2 or 3, the program has to print, in a separate line of the standard output, the identifier of the served client. If the request arrives when the waiting list is empty, then the program prints zero (0) to the output.</p><p><strong>Sample Input</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">1 20 14</span><br><span class="line">1 30 3</span><br><span class="line">2</span><br><span class="line">1 10 99</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">0</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>Sample Output</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">20</span><br><span class="line">30</span><br><span class="line">10</span><br><span class="line">0</span><br></pre></td></tr></tbody></table></figure></blockquote></blockquote><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>可以使用 set&lt;pair&lt;int,int&gt; &gt; 进行存储数据，根据优先级进行排序，若 set&lt; int &gt; a，则 a.begin() 即为 a 中最小值的迭代器， a.end() - 1 即为 a 中最大值的迭代器(不越界的情况下)。</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span>{</span></span><br><span class="line"><span class="keyword">int</span> pri,num;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(P jj,P kk){</span><br><span class="line"><span class="keyword">return</span> jj.pri&lt;kk.pri;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line">set&lt;P&gt; se;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;flag)&amp;&amp;flag){</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>){</span><br><span class="line">P jj;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;jj.num,&amp;jj.pri);</span><br><span class="line">se.<span class="built_in">insert</span>(jj);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">2</span>){</span><br><span class="line"><span class="keyword">if</span>(se.<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line">set&lt;P&gt;::iterator it=se.<span class="built_in">end</span>();--it;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,it-&gt;num);</span><br><span class="line">se.<span class="built_in">erase</span>(it);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">if</span>(se.<span class="built_in">size</span>()==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line">set&lt;P&gt;::iterator it=se.<span class="built_in">begin</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,it-&gt;num);</span><br><span class="line">se.<span class="built_in">erase</span>(it);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>splay树和主席树确实是还没看懂，用set水了三道题，尽量掌握 set 的各种用法吧。</p>]]></content>
      
      
      <categories>
          
          <category> 2021ACM寒假集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日总结-1月19日</title>
      <link href="/2022/01/19/1-19/"/>
      <url>/2022/01/19/1-19/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构进阶"><a href="#数据结构进阶" class="headerlink" title="数据结构进阶"></a>数据结构进阶</h2><ul><li>splay树</li><li>主席树</li></ul><h3 id="今日战况"><a href="#今日战况" class="headerlink" title="今日战况"></a>今日战况</h3><p><img src="/2022/01/19/1-19/Standing.png" alt="Standing"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天的内容个人感觉难度很大，一时间难以接受，只写出了一道题，还是用的stl中的set写的</p><h3 id="部分题目"><a href="#部分题目" class="headerlink" title="部分题目"></a>部分题目</h3><h4 id="E题-营业额统计"><a href="#E题-营业额统计" class="headerlink" title="E题: 营业额统计"></a>E题: 营业额统计</h4><p><a href="https://www.luogu.com.cn/problem/P2234">题目传送门</a></p><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><blockquote><p><strong>原题来自：HNOI 2002</strong></p><p>Tiger 最近被公司升任为营业部经理，他上任后接受公司交给的第一项任务便是统计并分析公司成立以来的营业情况。</p><p>Tiger 拿出了公司的账本，账本上记录了公司成立以来每天的营业额。分析营业情况是一项相当复杂的工作。由于节假日，大减价或者是其他情况的时候，营业额会出现一定的波动，当然一定的波动是能够接受的，但是在某些时候营业额突变得很高或是很低，这就证明公司此时的经营状况出现了问题。</p><p>经济管理学上定义了一种最小波动值来衡量这种情况：记该天以前某一天的营业额为 a_i，该天营业额为 b，则该天的最小波动值 <img src="/2022/01/19/1-19/t1.png" alt="t1">，当最小波动值越大时，就说明营业情况越不稳定。而分析整个公司的从成立到现在营业情况是否稳定，只需要把每一天的最小波动值加起来就可以了。</p><p>你的任务就是编写一个程序帮助 Tiger 来计算这一个值，第一天的最小波动值为第一天的营业额。</p><h4 id="一句话题意"><a href="#一句话题意" class="headerlink" title="一句话题意"></a>一句话题意</h4><p><img src="/2022/01/19/1-19/t2.png" alt="t2"></p><p><strong>输入格式</strong></p><p>第一行为正整数，表示该公司从成立一直到现在的天数；</p><p>接下来的 n 行每行有一个整数，表示第 i 天公司的营业额 a_i。</p><p><strong>输出格式</strong></p><p>仅有一个正整数，即每一天最小波动的和，结果不超过 2^31.</p><p><strong>样例</strong></p><p><strong>Input</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">5</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">6</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>Output</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></tbody></table></figure></blockquote><p>5+∣1−5∣+∣2−1∣+∣5−5∣+∣4−5∣+∣6−5∣= 5 + 4 + 1 + 0 + 1 + 1 = 12</p><p><strong>数据范围与提示</strong></p><p><img src="/2022/01/19/1-19/t3.png" alt="t3"></p></blockquote><h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p><img src="/2022/01/19/1-19/t2.png" alt="t2"></p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>由于数据量过大，我们需要使用splay树数据结构进行解题，但是，这道题也可以使用stl里的set进行解题</p><p>set里面有内置的 lower_bound 函数和 upper_bound 函数，可以在极短的时间查找到大于或大于等于一个数的数的迭代器，这个迭代器减一即为小于等于这个数的数的迭代器。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt; se;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> jj,ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;jj);</span><br><span class="line">se.<span class="built_in">emplace</span>(jj);</span><br><span class="line">ans+=jj;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i){</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;jj);</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">auto</span> kk=se.<span class="built_in">lower_bound</span>(jj);</span><br><span class="line"><span class="keyword">if</span>(kk==se.<span class="built_in">end</span>()){</span><br><span class="line">--kk;</span><br><span class="line">temp=jj-*kk;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line">temp=*kk-jj;</span><br><span class="line"><span class="keyword">if</span>(kk!=se.<span class="built_in">begin</span>()){</span><br><span class="line">--kk;</span><br><span class="line">temp=<span class="built_in">min</span>(temp,jj-*kk);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">ans+=temp;</span><br><span class="line">se.<span class="built_in">emplace</span>(jj);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//int t;scanf("%d",&amp;t);</span></span><br><span class="line"><span class="comment">//while(t--)</span></span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>明天再好好理解理解。</p>]]></content>
      
      
      <categories>
          
          <category> 2021ACM寒假集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日总结-1月18日</title>
      <link href="/2022/01/18/1-18/"/>
      <url>/2022/01/18/1-18/</url>
      
        <content type="html"><![CDATA[<h2 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h2><h3 id="今日战况"><a href="#今日战况" class="headerlink" title="今日战况"></a>今日战况</h3><p><img src="/2022/01/18/1-18/Standing.png" alt="Standing"></p><h3 id="前言-amp-总结"><a href="#前言-amp-总结" class="headerlink" title="前言&amp;总结"></a>前言&amp;总结</h3><p>今天并没有A题，上午在给21级队员讲课，下午时不时观看一下21级做题情况，没有认真进行自己的训练</p>]]></content>
      
      
      <categories>
          
          <category> 2021ACM寒假集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 博弈论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日总结-1月17日</title>
      <link href="/2022/01/17/1-17/"/>
      <url>/2022/01/17/1-17/</url>
      
        <content type="html"><![CDATA[<h2 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h2><ul><li>Nim游戏</li><li>SG函数</li><li>SG定理</li><li>mex运算</li><li>Wythoff Game</li></ul><h3 id="今日战况"><a href="#今日战况" class="headerlink" title="今日战况"></a>今日战况</h3><p><img src="/2022/01/17/1-17/Standing.png" alt="Standing"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个博弈论要远比我想象中的复杂，SG函数以及状态转移等等，很是复杂，感觉这部分需要的代码能力非常高，有好多时候，我有点思路，但是我的大脑却不够用，不知道改如何实现这个东西，或者说思考的方向错了。这部分急需大脑</p><h3 id="部分题目"><a href="#部分题目" class="headerlink" title="部分题目"></a>部分题目</h3><h4 id="E题-取石子游戏"><a href="#E题-取石子游戏" class="headerlink" title="E题: 取石子游戏"></a>E题: 取石子游戏</h4><p><a href="https://www.luogu.com.cn/problem/P2252">题目传送门</a></p><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><blockquote><p>有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，如果轮到你先取，假设双方都采取最好的策略，问最后你是胜者还是败者。</p><p><strong>Input</strong></p><p>输入包含若干行，表示若干种石子的初始情况，其中每一行包含两个非负整数a和b，表示两堆石子的数目，a和b都不大于1,000,000,000。</p><p><strong>Output</strong></p><p>输出对应也有若干行，每行包含一个数字1或0，如果最后你是胜者，则为1，反之，则为0。</p><p><strong>Sample Input</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 1</span><br><span class="line">8 4</span><br><span class="line">4 7</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>Sample Output</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></tbody></table></figure></blockquote></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>这是一个典型的 Wythoff Game ，这里面有一个结论</p><p>先手必败当且仅当<br>$$<br>abs(a-b)*(1+sqrt{5})/2==min(a,b)<br>$$<br>(a,b为两堆石子的石子数量)</p><p>即两堆石子数量的差值与黄金分割率的乘积是否与两堆石子数量较小数量相等。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">205</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a,s,jj,kk;</span><br><span class="line"><span class="keyword">double</span> fi=(<span class="number">1.0</span>+<span class="built_in">sqrt</span>(<span class="number">5.0</span>))*<span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;s)){</span><br><span class="line">jj=<span class="built_in">min</span>(a,s);kk=<span class="built_in">max</span>(a,s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(jj==(<span class="keyword">int</span>)(((<span class="keyword">double</span>)(kk-jj))*fi))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//int t;scanf("%d",&amp;t);</span></span><br><span class="line"><span class="comment">//while(t--)</span></span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="B题-Georgia-and-Bob"><a href="#B题-Georgia-and-Bob" class="headerlink" title="B题: Georgia and Bob"></a>B题: Georgia and Bob</h4><p><a href="http://poj.org/problem?id=1704">题目传送门</a></p><h5 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h5><blockquote><p>Georgia and Bob decide to play a self-invented game. They draw a row of grids on paper, number the grids from left to right by 1, 2, 3, …, and place N chessmen on different grids, as shown in the following figure for example:</p><p><img src="/2022/01/17/1-17/t1.jpg" alt="img-1"></p><p>Georgia and Bob move the chessmen in turn. Every time a player will choose a chessman, and move it to the left without going over any other chessmen or across the left edge. The player can freely choose number of steps the chessman moves, with the constraint that the chessman must be moved at least ONE step and one grid can at most contains ONE single chessman. The player who cannot make a move loses the game.</p><p>Georgia always plays first since “Lady first”. Suppose that Georgia and Bob both do their best in the game, i.e., if one of them knows a way to win the game, he or she will be able to carry it out.</p><p>Given the initial positions of the n chessmen, can you predict who will finally win the game?</p><p><strong>Input</strong></p><p>The first line of the input contains a single integer T (1 &lt;= T &lt;= 20), the number of test cases. Then T cases follow. Each test case contains two lines. The first line consists of one integer N (1 &lt;= N &lt;= 1000), indicating the number of chessmen. The second line contains N different integers P1, P2 … Pn (1 &lt;= Pi &lt;= 10000), which are the initial positions of the n chessmen.</p><p><strong>Output</strong></p><p>For each test case, prints a single line, “Georgia will win”, if Georgia will win the game; “Bob will win”, if Bob will win the game; otherwise ‘Not sure’.</p><p><strong>Sample Input</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">8</span><br><span class="line">1 5 6 7 9 12 14 17</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>Sample Output</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bob will win</span><br><span class="line">Georgia will win</span><br></pre></td></tr></tbody></table></figure></blockquote></blockquote><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>先把棋子升序排列，我们可以将这些棋子两两绑定，如果棋子个数是奇数，那就把第一个和边界绑定，在同一对棋子中，如果对手移动前面那个，那么我们总能移动后面那个相同的距离，相当于移动前面那个将毫无意义，看的是同一对中，后面的那个棋子能移动的距离，即两个棋子之间的距离，谁先把这些距离移动完谁就会赢，这时，这个问题就已经演变成了经典的取石子游戏，直接应用取石子游戏中的结论，所有石子堆的数量的异或值是否为零，为零则先手必败，否则先手必胜。</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[MAXX],s[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>,pp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>)</span><br><span class="line">s[++p]=a[++pp]<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>){</span><br><span class="line"><span class="keyword">if</span>(pp&gt;=n) <span class="keyword">break</span>;</span><br><span class="line">s[++p]=a[pp+<span class="number">2</span>]-a[pp+<span class="number">1</span>]<span class="number">-1</span>;</span><br><span class="line">pp+=<span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> n2=(n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n2;++i)</span><br><span class="line">ans^=s[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ans)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Georgia will win\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Bob will win\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这部分感觉是真的好难理解，只是记了两个结论，取石子游戏和 wythoff game 的结论，这部分仍然需要多练。</p>]]></content>
      
      
      <categories>
          
          <category> 2021ACM寒假集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 博弈论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日总结-1月15日</title>
      <link href="/2022/01/15/1-15/"/>
      <url>/2022/01/15/1-15/</url>
      
        <content type="html"><![CDATA[<h2 id="图论进阶"><a href="#图论进阶" class="headerlink" title="图论进阶"></a>图论进阶</h2><p>网络流</p><ul><li>最大流</li><li>最小费用流</li></ul><h3 id="今日战况"><a href="#今日战况" class="headerlink" title="今日战况"></a>今日战况</h3><p><img src="/2022/01/15/1-15/Standing.png" alt="Standing"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天主要就是把 MCMF(最小费用最大流) 给理解了，不过还不够熟练，自己写应该还是写不出板子。</p><h3 id="部分题目"><a href="#部分题目" class="headerlink" title="部分题目"></a>部分题目</h3><h4 id="B题-分配问题"><a href="#B题-分配问题" class="headerlink" title="B题: 分配问题"></a>B题: 分配问题</h4><p><a href="https://www.luogu.com.cn/problem/P4014">题目传送门</a></p><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><blockquote><p>有 <em>n</em> 件工作要分配给 <em>n</em> 个人做。第 <em>i</em> 个人做第 <em>j</em> 件工作产生的效益为 <em>c_ij</em> 。试设计一个将 <em>n</em> 件工作分配给 <em>n</em> 个人做的分配方案，使产生的总效益最大。</p><p><strong>输入格式</strong></p><p>文件的第 1 行有 1 个正整数 <em>n</em> ，表示有 <em>n</em> 件工作要分配给 <em>n</em> 个人做。</p><p>接下来的 <em>n</em> 行中，每行有 <em>n</em> 个整数 <em>c_ij</em> ，表示第 <em>i</em> 个人做第 <em>j</em> 件工作产生的效益为 <em>c_ij</em> 。</p><p><strong>输出格式</strong></p><p>两行分别输出最小总效益和最大总效益。</p><p><strong>样例</strong></p><p><strong>Input</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">2 2 2 1 2</span><br><span class="line">2 3 1 2 4</span><br><span class="line">2 0 1 1 1</span><br><span class="line">2 3 4 3 3</span><br><span class="line">3 2 1 2 1</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>Output</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">14</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>数据范围与提示</strong></p><p>1 &lt;= n &lt;= 100</p></blockquote><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>可构建一个二分图，一边是人，一边是工作，用一遍 MCMF(最小费用最大流)可求出最小总效益，之后，把所有边都删掉，再重新建一个图，里面的 <em>cost</em> 全部变为原来的负数，再用一遍 MCMF 可求出最大总效益的相反数。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">205</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rode</span>{</span></span><br><span class="line"><span class="keyword">int</span> st,en,flow,cap,cost;</span><br><span class="line">};</span><br><span class="line">vector&lt;rode&gt; ro;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; to[MAXX];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> cur[MAXX],d[MAXX],guanxi[MAXX][MAXX],a[MAXX],p[MAXX];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXX],inq[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> st,<span class="keyword">int</span> en,<span class="keyword">int</span> cap,<span class="keyword">int</span> cost)</span></span>{</span><br><span class="line">rode re;<span class="keyword">int</span> si=ro.<span class="built_in">size</span>();</span><br><span class="line">re.st=st;re.en=en;re.flow=<span class="number">0</span>;re.cap=cap;re.cost=cost;</span><br><span class="line">ro.<span class="built_in">push_back</span>(re);to[st].<span class="built_in">push_back</span>(si);</span><br><span class="line">re.st=en;re.en=st;re.flow=<span class="number">0</span>;re.cap=<span class="number">0</span>;re.cost=-cost;</span><br><span class="line">ro.<span class="built_in">push_back</span>(re);to[en].<span class="built_in">push_back</span>(si+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfss</span><span class="params">(<span class="keyword">int</span> st,<span class="keyword">int</span> en,<span class="keyword">int</span>&amp; flow,LL&amp; cost)</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=st;i&lt;=en;++i){</span><br><span class="line">d[i]=Inf;</span><br><span class="line">inq[i]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; qq;qq.<span class="built_in">push</span>(st);</span><br><span class="line">d[st]=<span class="number">0</span>;inq[st]=<span class="literal">true</span>;p[st]=<span class="number">0</span>;a[st]=Inf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!qq.<span class="built_in">empty</span>()){</span><br><span class="line"><span class="keyword">int</span> jj=qq.<span class="built_in">front</span>();qq.<span class="built_in">pop</span>();</span><br><span class="line">inq[jj]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> si=to[jj].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;si;++i){</span><br><span class="line">rode&amp; kk=ro[to[jj][i]];</span><br><span class="line"><span class="keyword">if</span>(kk.cap&gt;kk.flow&amp;&amp;d[kk.en]&gt;d[jj]+kk.cost){</span><br><span class="line">d[kk.en]=d[jj]+kk.cost;</span><br><span class="line">p[kk.en]=to[jj][i];</span><br><span class="line">a[kk.en]=<span class="built_in">min</span>(a[jj],kk.cap-kk.flow);</span><br><span class="line"><span class="keyword">if</span>(!inq[kk.en]){</span><br><span class="line">qq.<span class="built_in">push</span>(kk.en);</span><br><span class="line">inq[kk.en]=<span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(d[en]==Inf) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">cost+=(LL)d[en]*(LL)a[en];</span><br><span class="line">flow+=a[en];</span><br><span class="line"><span class="keyword">int</span> jj=en;</span><br><span class="line"><span class="keyword">while</span>(jj!=st){</span><br><span class="line">ro[p[jj]].flow+=a[en];</span><br><span class="line">ro[p[jj]^<span class="number">1</span>].flow-=a[en];</span><br><span class="line">jj=ro[p[jj]].st;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mcmf</span><span class="params">(<span class="keyword">int</span> st,<span class="keyword">int</span> en,LL&amp; cost)</span></span>{</span><br><span class="line"><span class="keyword">int</span> flow=<span class="number">0</span>;cost=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfss</span>(st,en,flow,cost));</span><br><span class="line"><span class="keyword">return</span> flow;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> n1=<span class="number">2</span>*n+<span class="number">1</span>;</span><br><span class="line">LL minans,maxans;</span><br><span class="line"><span class="keyword">int</span> ff;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j){</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;guanxi[i][j]);</span><br><span class="line"><span class="built_in">add</span>(i,n+j,<span class="number">1</span>,guanxi[i][j]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="built_in">add</span>(<span class="number">0</span>,i,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">add</span>(i+n,n1,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line">ff=<span class="built_in">mcmf</span>(<span class="number">0</span>,n1,minans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,minans);</span><br><span class="line"></span><br><span class="line">ro.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n1;++i)</span><br><span class="line">to[i].<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j){</span><br><span class="line"><span class="built_in">add</span>(i,n+j,<span class="number">1</span>,-guanxi[i][j]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="built_in">add</span>(<span class="number">0</span>,i,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">add</span>(i+n,n1,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line">ff=<span class="built_in">mcmf</span>(<span class="number">0</span>,n1,maxans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,-maxans);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//int t;scanf("%d",&amp;t);</span></span><br><span class="line"><span class="comment">//while(t--)</span></span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次课到现在是看代码的能看懂，但是自己写的话还是写不出来，代码能力还是不行，需要多练，记住模板，需要能够随时都能写出模板才行。</p>]]></content>
      
      
      <categories>
          
          <category> 2021ACM寒假集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日总结-1月14日</title>
      <link href="/2022/01/14/1-14/"/>
      <url>/2022/01/14/1-14/</url>
      
        <content type="html"><![CDATA[<h2 id="图论进阶"><a href="#图论进阶" class="headerlink" title="图论进阶"></a>图论进阶</h2><p>网络流</p><ul><li>最大流</li><li>最小费用最大流</li></ul><h3 id="今日战况"><a href="#今日战况" class="headerlink" title="今日战况"></a>今日战况</h3><p><img src="/2022/01/14/1-14/Standing.png" alt="Standing"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>感觉今天的主题，挺难的，上午听课的时候也是没有跟上节奏，然后又去反复看课件和查找资料，才把最大流差不多理解，最小费用最大流就留给明天了</p><h3 id="部分题目"><a href="#部分题目" class="headerlink" title="部分题目"></a>部分题目</h3><h4 id="A题-Drainage-Ditches"><a href="#A题-Drainage-Ditches" class="headerlink" title="A题: Drainage Ditches"></a>A题: Drainage Ditches</h4><p><a href="http://poj.org/problem?id=1273">题目传送门</a></p><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><blockquote><p>Every time it rains on Farmer John’s fields, a pond forms over Bessie’s favorite clover patch. This means that the clover is covered by water for awhile and takes quite a long time to regrow. Thus, Farmer John has built a set of drainage ditches so that Bessie’s clover patch is never covered in water. Instead, the water is drained to a nearby stream. Being an ace engineer, Farmer John has also installed regulators at the beginning of each ditch, so he can control at what rate water flows into that ditch.<br>Farmer John knows not only how many gallons of water each ditch can transport per minute but also the exact layout of the ditches, which feed out of the pond and into each other and stream in a potentially complex network.<br>Given all this information, determine the maximum rate at which water can be transported out of the pond and into the stream. For any given ditch, water flows in only one direction, but there might be a way that water can flow in a circle.</p><p><strong>Input</strong></p><p><strong>The input includes several cases.</strong> For each case, the first line contains two space-separated integers, N (0 &lt;= N &lt;= 200) and M (2 &lt;= M &lt;= 200). N is the number of ditches that Farmer John has dug. M is the number of intersections points for those ditches. Intersection 1 is the pond. Intersection point M is the stream. Each of the following N lines contains three integers, Si, Ei, and Ci. Si and Ei (1 &lt;= Si, Ei &lt;= M) designate the intersections between which this ditch flows. Water will flow through this ditch from Si to Ei. Ci (0 &lt;= Ci &lt;= 10,000,000) is the maximum rate at which water will flow through the ditch.</p><p><strong>Output</strong></p><p>For each case, output a single integer, the maximum rate at which water may emptied from the pond.</p><p><strong>Sample Input</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 4</span><br><span class="line">1 2 40</span><br><span class="line">1 4 20</span><br><span class="line">2 4 20</span><br><span class="line">2 3 30</span><br><span class="line">3 4 10</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>Sample Output</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">50</span><br></pre></td></tr></tbody></table></figure></blockquote></blockquote><h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p>有个排水系统，有 n 条单向通道和 m 个位置，问从位置 1 到位置 m 的最大流速是多大。</p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>是一道很典型的最大流模板题，通过单向通道进行建图，之后进行一遍 <em>dinic</em> 算法即可求出答案。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">205</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rode</span>{</span></span><br><span class="line"><span class="keyword">int</span> st,en,flow,cap;</span><br><span class="line">};</span><br><span class="line">vector&lt;rode&gt; ro;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; to[MAXX];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> cur[MAXX],d[MAXX];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> st,<span class="keyword">int</span> en,<span class="keyword">int</span> cap)</span></span>{</span><br><span class="line">rode re;<span class="keyword">int</span> si=ro.<span class="built_in">size</span>();</span><br><span class="line">re.st=st;re.en=en;re.flow=<span class="number">0</span>;re.cap=cap;</span><br><span class="line">ro.<span class="built_in">push_back</span>(re);to[st].<span class="built_in">push_back</span>(si);</span><br><span class="line">re.st=en;re.en=st;re.flow=<span class="number">0</span>;re.cap=<span class="number">0</span>;</span><br><span class="line">ro.<span class="built_in">push_back</span>(re);to[en].<span class="built_in">push_back</span>(si+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> st,<span class="keyword">int</span> en)</span></span>{</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; qq;</span><br><span class="line">qq.<span class="built_in">push</span>(st);</span><br><span class="line">d[st]=<span class="number">0</span>;vis[st]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(!qq.<span class="built_in">empty</span>()){</span><br><span class="line"><span class="keyword">int</span> jj=qq.<span class="built_in">front</span>();qq.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">int</span> si=to[jj].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;si;++i){</span><br><span class="line">rode kk=ro[to[jj][i]];</span><br><span class="line"><span class="keyword">if</span>(!vis[kk.en]&amp;&amp;(kk.cap-kk.flow)&gt;<span class="number">0</span>){</span><br><span class="line">vis[kk.en]=<span class="literal">true</span>;</span><br><span class="line">d[kk.en]=d[jj]+<span class="number">1</span>;</span><br><span class="line">qq.<span class="built_in">push</span>(kk.en);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> vis[en];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> en,<span class="keyword">int</span> flow)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(now==en||flow==<span class="number">0</span>) <span class="keyword">return</span> flow;</span><br><span class="line"><span class="keyword">int</span> re=<span class="number">0</span>,f=<span class="number">0</span>,si=to[now].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>&amp; i=cur[now];i&lt;si;++i){</span><br><span class="line">rode&amp; jj=ro[to[now][i]];</span><br><span class="line"><span class="keyword">if</span>(d[jj.en]==d[jj.st]+<span class="number">1</span>){</span><br><span class="line">f=<span class="built_in">dfs</span>(jj.en,en,<span class="built_in">min</span>(flow,jj.cap-jj.flow));</span><br><span class="line"><span class="keyword">if</span>(f){</span><br><span class="line">jj.flow+=f;</span><br><span class="line">ro[to[now][i]^<span class="number">1</span>].flow-=f;</span><br><span class="line">re+=f;</span><br><span class="line">flow-=f;</span><br><span class="line"><span class="keyword">if</span>(flow==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> st,<span class="keyword">int</span> en)</span></span>{</span><br><span class="line"><span class="keyword">int</span> re=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>(st,en)){</span><br><span class="line"><span class="built_in">memset</span>(cur,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(cur));</span><br><span class="line">re+=<span class="built_in">dfs</span>(st,en,Inf);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i){</span><br><span class="line"><span class="keyword">int</span> st,en,cap;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;st,&amp;en,&amp;cap);</span><br><span class="line"><span class="built_in">add</span>(st,en,cap);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="built_in">dinic</span>(<span class="number">1</span>,n));</span><br><span class="line"></span><br><span class="line">ro.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">to[i].<span class="built_in">clear</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//int t;scanf("%d",&amp;t);</span></span><br><span class="line"><span class="comment">//while(t--)</span></span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n))</span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="C题-假期的宿舍"><a href="#C题-假期的宿舍" class="headerlink" title="C题: 假期的宿舍"></a>C题: 假期的宿舍</h4><p><a href="https://www.luogu.com.cn/problem/P2055">题目传送门</a></p><h5 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h5><blockquote><p>学校放假了······有些同学回家了，而有些同学则有以前的好朋友来探访，那么住宿就是一个问题。比如A和B都是学校的学生，A要回家，而C来看B，C与A不认识。我们假设每个人只能睡和自己直接认识的人的床。那么一个解决方案就是B睡A的床而C睡B的床。而实际情况可能非常复杂，有的人可能认识好多在校学生，在校学生之间也不一定都互相认识。我们已知一共有n个人，并且知道其中每个人是不是本校学生，也知道每个本校学生是否回家。问是否存在一个方案使得所有不回家的本校学生和来看他们的其他人都有地方住。</p><p><strong>输入格式</strong></p><p>第一行一个数T表示数据组数。接下来T组数据，每组数据第一行一个数n表示涉及到的总人数。接下来一行n个数，第i个数表示第i个人是否是在校学生(0表示不是，1表示是)。再接下来一行n个数，第i个数表示第i个人是否回家(0表示不回家，1表示回家，注意如果第i个人不是在校学生，那么这个位置上的数是一个随机的数，你应该在读入以后忽略它)。接下来n行每行n个数，第i行第j个数表示i和j是否认识(1表示认识，0表示不认识，第i行i个的值为0，但是显然自己还是可以睡自己的床)，认识的关系是相互的。1 ≤ n ≤ 50,1 ≤ T ≤ 20</p><p><strong>输出格式</strong></p><p>对于每组数据，如果存在一个方案则输出“^_^”(不含引号)否则输出“T_T”(不含引号)。(注意输出的都是半角字符，即三个符号的ASCII码分别为94,84,95)</p><p><strong>Sample Input</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">1 1 0</span><br><span class="line"></span><br><span class="line">0 1 0</span><br><span class="line"></span><br><span class="line">0 1 1</span><br><span class="line"></span><br><span class="line">1 0 0</span><br><span class="line"></span><br><span class="line">1 0 0</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>Output</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^_^</span><br></pre></td></tr></tbody></table></figure></blockquote></blockquote><h5 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h5><p>学校放假了……有些同学回家了，而有些同学则有以前的好朋友来探访，那么住宿就是一个问题。</p><p>比如 A 和 B 都是学校的学生，A 要回家，而 C 来看B，C 与 A 不认识。我们假设每个人只能睡和自己直</p><p>接认识的人的床。那么一个解决方案就是 B 睡 A 的床而 C 睡 B 的床。而实际情况可能非常复杂，有的</p><p>人可能认识好多在校学生，在校学生之间也不一定都互相认识。</p><p>我们已知一共有 n个人，并且知道其中每个人是不是本校学生，也知道每个本校学生是否回家。问是否</p><p>存在一个方案使得所有不回家的本校学生和来看他们的其他人都有地方住。</p><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>典型的二分图最大匹配问题，可以用最大流进行求解，主要就是建图，先创造出一个原点和汇点，接着原点连接人，汇点连接床，人和床之间再连接，只有直接认识的人才能睡到朋友床上，接着进行一次最大流即可。</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">205</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rode</span>{</span></span><br><span class="line"><span class="keyword">int</span> st,en,flow,cap;</span><br><span class="line">};</span><br><span class="line">vector&lt;rode&gt; ro;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; to[MAXX];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> cur[MAXX],d[MAXX];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXX],isStu[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> st,<span class="keyword">int</span> en,<span class="keyword">int</span> cap)</span></span>{</span><br><span class="line">rode re;<span class="keyword">int</span> si=ro.<span class="built_in">size</span>();</span><br><span class="line">re.st=st;re.en=en;re.flow=<span class="number">0</span>;re.cap=cap;</span><br><span class="line">ro.<span class="built_in">push_back</span>(re);to[st].<span class="built_in">push_back</span>(si);</span><br><span class="line">re.st=en;re.en=st;re.flow=<span class="number">0</span>;re.cap=<span class="number">0</span>;</span><br><span class="line">ro.<span class="built_in">push_back</span>(re);to[en].<span class="built_in">push_back</span>(si+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> st,<span class="keyword">int</span> en)</span></span>{</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; qq;</span><br><span class="line">qq.<span class="built_in">push</span>(st);</span><br><span class="line">d[st]=<span class="number">0</span>;vis[st]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(!qq.<span class="built_in">empty</span>()){</span><br><span class="line"><span class="keyword">int</span> jj=qq.<span class="built_in">front</span>();qq.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">int</span> si=to[jj].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;si;++i){</span><br><span class="line">rode kk=ro[to[jj][i]];</span><br><span class="line"><span class="keyword">if</span>(!vis[kk.en]&amp;&amp;(kk.cap-kk.flow)&gt;<span class="number">0</span>){</span><br><span class="line">vis[kk.en]=<span class="literal">true</span>;</span><br><span class="line">d[kk.en]=d[jj]+<span class="number">1</span>;</span><br><span class="line">qq.<span class="built_in">push</span>(kk.en);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> vis[en];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> en,<span class="keyword">int</span> flow)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(now==en||flow==<span class="number">0</span>) <span class="keyword">return</span> flow;</span><br><span class="line"><span class="keyword">int</span> re=<span class="number">0</span>,f=<span class="number">0</span>,si=to[now].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>&amp; i=cur[now];i&lt;si;++i){</span><br><span class="line">rode&amp; jj=ro[to[now][i]];</span><br><span class="line"><span class="keyword">if</span>(d[jj.en]==d[jj.st]+<span class="number">1</span>){</span><br><span class="line">f=<span class="built_in">dfs</span>(jj.en,en,<span class="built_in">min</span>(flow,jj.cap-jj.flow));</span><br><span class="line"><span class="keyword">if</span>(f){</span><br><span class="line">jj.flow+=f;</span><br><span class="line">ro[to[now][i]^<span class="number">1</span>].flow-=f;</span><br><span class="line">re+=f;</span><br><span class="line">flow-=f;</span><br><span class="line"><span class="keyword">if</span>(flow==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> st,<span class="keyword">int</span> en)</span></span>{</span><br><span class="line"><span class="keyword">int</span> re=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>(st,en)){</span><br><span class="line"><span class="built_in">memset</span>(cur,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(cur));</span><br><span class="line">re+=<span class="built_in">dfs</span>(st,en,Inf);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> en=<span class="number">2</span>*n+<span class="number">1</span>,num=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="keyword">int</span> jj;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;jj);</span><br><span class="line"><span class="keyword">if</span>(jj){</span><br><span class="line">isStu[i]=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">add</span>(i,n+i,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">add</span>(n+i,en,<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="keyword">int</span> jj;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;jj);</span><br><span class="line"><span class="keyword">if</span>(isStu[i]&amp;&amp;jj==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">add</span>(<span class="number">0</span>,i,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!isStu[i])</span><br><span class="line"><span class="built_in">add</span>(<span class="number">0</span>,i,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(isStu[i]&amp;&amp;jj==<span class="number">1</span>)</span><br><span class="line">--num;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j){</span><br><span class="line"><span class="keyword">int</span> jj;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;jj);</span><br><span class="line"><span class="keyword">if</span>(jj&amp;&amp;isStu[j]){</span><br><span class="line"><span class="built_in">add</span>(i,j+n,<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dinic</span>(<span class="number">0</span>,en)&gt;=num)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c%c%c\n"</span>,<span class="number">94</span>,<span class="number">95</span>,<span class="number">94</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c%c%c\n"</span>,<span class="number">84</span>,<span class="number">95</span>,<span class="number">84</span>);</span><br><span class="line"></span><br><span class="line">ro.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAXX;++i){</span><br><span class="line">to[i].<span class="built_in">clear</span>();</span><br><span class="line">isStu[i]=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="E题-飞行员配对"><a href="#E题-飞行员配对" class="headerlink" title="E题: 飞行员配对"></a>E题: 飞行员配对</h4><p><a href="https://www.51nod.com/Challenge/Problem.html#problemId=2006">题目传送门</a></p><h5 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h5><blockquote><p>第二次世界大战时期，英国皇家空军从沦陷国征募了大量外籍飞行员。由皇家空军派出的每一架飞机都需要配备在航行技能和语言上能互相配合的2名飞行员，其中1名是英国飞行员，另1名是外籍飞行员。在众多的飞行员中，每一名外籍飞行员都可以与其他若干名英国飞行员很好地配合。如何选择配对飞行的飞行员才能使一次派出最多的飞机。对于给定的外籍飞行员与英国飞行员的配合情况，试设计一个算法找出最佳飞行员配对方案，使皇家空 军一次能派出最多的飞机 。对于给定的外籍飞行员与英国飞行员的配合情况，编程找出一个最佳飞行员配对方案， 使皇家空军一次能派出最多的飞机。 </p><p><strong>Input</strong></p><p>第1行有2个正整数 m 和 n。n 是皇家空军的飞行 员总数(n&lt;100);m 是外籍飞行员数。外籍飞行员编号为 1<del>m;英国飞行员编号为 m+1</del>n。接下来每行有 2 个正整数 i 和 j，表示外籍飞行员 i 可以和英国飞行员 j 配合。输入最后以 2 个-1 结束。</p><p><strong>Output</strong></p><p>第 1 行是最佳飞行 员配对方案一次能派出的最多的飞机数 M。如果所求的最佳飞行员配对方案不存在，则输出‘No Solution!’。</p><p><strong>Sample Input</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">5 10</span><br><span class="line">1 7</span><br><span class="line">1 8</span><br><span class="line">2 6</span><br><span class="line">2 9</span><br><span class="line">2 10</span><br><span class="line">3 7</span><br><span class="line">3 8</span><br><span class="line">4 7</span><br><span class="line">4 8</span><br><span class="line">5 10</span><br><span class="line">-1 -1</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>Sample Output</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></tbody></table></figure></blockquote></blockquote><h5 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h5><p>看题吧，都是中文</p><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>构建一个二分图，左边是外籍飞行员，右边是英国飞行员，接着把能够进行配合的飞行员进行连接，在左边构建一个原点，连接所有外籍飞行员，在右边构建一个汇点，连接所有英国飞行员。接着进行一次最大流即可。</p><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">205</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rode</span>{</span></span><br><span class="line"><span class="keyword">int</span> st,en,flow,cap;</span><br><span class="line">};</span><br><span class="line">vector&lt;rode&gt; ro;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; to[MAXX];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> cur[MAXX],d[MAXX];</span><br><span class="line"><span class="keyword">bool</span> vis[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> st,<span class="keyword">int</span> en,<span class="keyword">int</span> cap)</span></span>{</span><br><span class="line">rode re;<span class="keyword">int</span> si=ro.<span class="built_in">size</span>();</span><br><span class="line">re.st=st;re.en=en;re.flow=<span class="number">0</span>;re.cap=cap;</span><br><span class="line">ro.<span class="built_in">push_back</span>(re);to[st].<span class="built_in">push_back</span>(si);</span><br><span class="line">re.st=en;re.en=st;re.flow=<span class="number">0</span>;re.cap=<span class="number">0</span>;</span><br><span class="line">ro.<span class="built_in">push_back</span>(re);to[en].<span class="built_in">push_back</span>(si+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> st,<span class="keyword">int</span> en)</span></span>{</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; qq;</span><br><span class="line">qq.<span class="built_in">push</span>(st);</span><br><span class="line">d[st]=<span class="number">0</span>;vis[st]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(!qq.<span class="built_in">empty</span>()){</span><br><span class="line"><span class="keyword">int</span> jj=qq.<span class="built_in">front</span>();qq.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">int</span> si=to[jj].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;si;++i){</span><br><span class="line">rode kk=ro[to[jj][i]];</span><br><span class="line"><span class="keyword">if</span>(!vis[kk.en]&amp;&amp;(kk.cap-kk.flow)&gt;<span class="number">0</span>){</span><br><span class="line">vis[kk.en]=<span class="literal">true</span>;</span><br><span class="line">d[kk.en]=d[jj]+<span class="number">1</span>;</span><br><span class="line">qq.<span class="built_in">push</span>(kk.en);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> vis[en];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> en,<span class="keyword">int</span> flow)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(now==en||flow==<span class="number">0</span>) <span class="keyword">return</span> flow;</span><br><span class="line"><span class="keyword">int</span> re=<span class="number">0</span>,f=<span class="number">0</span>,si=to[now].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span>&amp; i=cur[now];i&lt;si;++i){</span><br><span class="line">rode&amp; jj=ro[to[now][i]];</span><br><span class="line"><span class="keyword">if</span>(d[jj.en]==d[jj.st]+<span class="number">1</span>){</span><br><span class="line">f=<span class="built_in">dfs</span>(jj.en,en,<span class="built_in">min</span>(flow,jj.cap-jj.flow));</span><br><span class="line"><span class="keyword">if</span>(f){</span><br><span class="line">jj.flow+=f;</span><br><span class="line">ro[to[now][i]^<span class="number">1</span>].flow-=f;</span><br><span class="line">re+=f;</span><br><span class="line">flow-=f;</span><br><span class="line"><span class="keyword">if</span>(flow==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> st,<span class="keyword">int</span> en)</span></span>{</span><br><span class="line"><span class="keyword">int</span> re=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>(st,en)){</span><br><span class="line"><span class="built_in">memset</span>(cur,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(cur));</span><br><span class="line">re+=<span class="built_in">dfs</span>(st,en,Inf);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line"><span class="keyword">int</span> n1=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> jj,kk;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;jj,&amp;kk)){</span><br><span class="line"><span class="keyword">if</span>(jj==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">add</span>(jj,kk,<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line"><span class="built_in">add</span>(<span class="number">0</span>,i,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m+<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">add</span>(i,n1,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="built_in">dinic</span>(<span class="number">0</span>,n1);</span><br><span class="line"><span class="keyword">if</span>(ans)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No Solution!\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//int t;scanf("%d",&amp;t);</span></span><br><span class="line"><span class="comment">//while(t--)</span></span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这一部分难度比较大，进行了一天的练习，也算是差不多理解了，但是练习还是太少，并不能熟练运用，仍需多加练习，明天进行最小费用最大流。</p>]]></content>
      
      
      <categories>
          
          <category> 2021ACM寒假集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日总结-1月13日</title>
      <link href="/2022/01/13/1-13/"/>
      <url>/2022/01/13/1-13/</url>
      
        <content type="html"><![CDATA[<h2 id="搜索进阶"><a href="#搜索进阶" class="headerlink" title="搜索进阶"></a>搜索进阶</h2><p>dfs&amp;bfs&amp;迭代加深&amp;A*算法</p><h3 id="今日战况"><a href="#今日战况" class="headerlink" title="今日战况"></a>今日战况</h3><p><img src="/2022/01/13/1-13/Standing.png" alt="Standing"></p><h3 id="部分题目题解"><a href="#部分题目题解" class="headerlink" title="部分题目题解"></a>部分题目题解</h3><h4 id="B题-Sticks"><a href="#B题-Sticks" class="headerlink" title="B题: Sticks"></a>B题: Sticks</h4><p><a href="http://poj.org/problem?id=1011">题目传送门</a></p><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><blockquote><p>George took sticks of the same length and cut them randomly until all parts became at most 50 units long. Now he wants to return sticks to the original state, but he forgot how many sticks he had originally and how long they were originally. Please help him and design a program which computes the smallest possible original length of those sticks. All lengths expressed in units are integers greater than zero.</p><p><strong>Input</strong></p><p>The input contains blocks of 2 lines. The first line contains the number of sticks parts after cutting, there are at most 64 sticks. The second line contains the lengths of those parts separated by the space. The last line of the file contains zero.</p><p><strong>Output</strong></p><p>The output should contains the smallest possible length of original sticks, one per line.</p><p><strong>Sample Input</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">5 2 1 5 2 1 5 2 1</span><br><span class="line">4</span><br><span class="line">1 2 3 4</span><br><span class="line">0</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>Sample Output</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">5</span><br></pre></td></tr></tbody></table></figure></blockquote></blockquote><h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p>大致就是给你n根长度小于50的木棍，要把他们拼成若干根相同长度的原始木棍，求这个长度的最小值</p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>n&lt;65，考虑从小到大枚举每一种可能的原始木棍长度len，显然，len应该是所有木棍长度总和sum的约数(长度只能为整数），并且原始木棍的根数就应该是sum/len，然后对于每一种len，我们依次搜索每根原始木棍由哪些分散的木棍拼接而成即可.</p><p><strong>加上各种优化</strong></p><ol><li><p>优化搜索顺序</p><p>考虑到长度短的木棍比起长度长的木棍来说，拼接更为灵活，因此对木棍长度进行排序，从长到短搜索</p></li><li><p>排除等效冗余</p><ul><li>先拼上 x 和先拼上 y 是等效的，只需要搜索一次这种情况</li><li>记录最近一次尝试拼接的小木棍的长度，如果分支搜索失败的话，不再尝试其他相同长度的木棍（相同长度的木棍都是等效的，该分支失败意味着所有相同长度的木棍必定会拼接失败）</li><li>如果在拼接某个原始木棍时拼接第一根木棍的搜索分支就以失败返回，直接判定该分支无解，如果拼接第一根木棍就失败了的话，说明这根木棍拼不成长度为len的原始木棍，而如果继续搜索其他长度的小木棍的话，为了拼成所有的原始木棍，这根小木棍在后面是必须要用到的，如果它拼接失败，拼在其他原始木棍上也一定失败，不用继续往下搜索，因此可以直接判定无解</li></ul></li><li><p>其他优化</p><p>使用二分查找的方式来寻找解(代码中未使用)</p></li></ol><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[MAXX],st,en,num,lenn;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> len,<span class="keyword">int</span> id)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(now&gt;num) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(len==lenn) <span class="keyword">return</span> <span class="built_in">dfs</span>(now+<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=id+<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="keyword">if</span>(!vis[i]&amp;&amp;len+a[i]&lt;=lenn&amp;&amp;a[i]!=temp){</span><br><span class="line">vis[i]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dfs</span>(now,len+a[i],id))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">temp=a[i];</span><br><span class="line">vis[i]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(len==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> jj,<span class="keyword">int</span> kk)</span></span>{<span class="keyword">return</span> jj&gt;kk;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line">st=<span class="number">0</span>;en=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">st=<span class="built_in">max</span>(st,a[i]);</span><br><span class="line">en+=a[i];</span><br><span class="line">}</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=st;i&lt;=en;++i){</span><br><span class="line"><span class="keyword">if</span>(en%i) <span class="keyword">continue</span>;</span><br><span class="line">num=en/i;lenn=i;</span><br><span class="line">ans=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">vis[j]=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>)) <span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//int t;scanf("%d",&amp;t);</span></span><br><span class="line"><span class="comment">//while(t--)</span></span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n)</span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="G题-Addition-Chains"><a href="#G题-Addition-Chains" class="headerlink" title="G题: Addition Chains"></a>G题: Addition Chains</h4><p><a href="http://poj.org/problem?id=2248">题目传送门</a></p><h5 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h5><blockquote><p>An addition chain for n is an integer sequence with the following four properties:<br>a_0 = 1<br>a_m = n<br>a_0 &lt; a_1 &lt; a_2 &lt; … &lt; a_m-1 &lt; a_m<br>For each k (1&lt;=k&lt;=m) there exist two (not necessarily different) integers i and j (0&lt;=i, j&lt;=k-1) with a_k=a_i+a_j<br>You are given an integer n. Your job is to construct an addition chain for n with minimal length. If there is more than one such sequence, any one is acceptable.<br>For example, &lt;1,2,3,5&gt; and &lt;1,2,4,5&gt; are both valid solutions when you are asked for an addition chain for 5.</p><p><strong>Input</strong></p><p>The input will contain one or more test cases. Each test case consists of one line containing one integer n (1&lt;=n&lt;=100). Input is terminated by a value of zero (0) for n.</p><p><strong>Output</strong></p><p>For each test case, print one line containing the required integer sequence. Separate the numbers by one blank.<br>Hint: The problem is a little time-critical, so use proper break conditions where necessary to reduce the search space.</p><p><strong>Sample Input</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">7</span><br><span class="line">12</span><br><span class="line">15</span><br><span class="line">77</span><br><span class="line">0</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>Sample Output</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 2 4 5</span><br><span class="line">1 2 4 6 7</span><br><span class="line">1 2 4 8 12</span><br><span class="line">1 2 4 5 10 15</span><br><span class="line">1 2 4 8 9 17 34 68 77</span><br></pre></td></tr></tbody></table></figure></blockquote></blockquote><h5 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h5><p>有一个严格递增的序列，a_0=1，且对于每一个k(k&gt;=1)，存在两个可以相同也可以不同的数i,j(0&lt;=i,j&lt;=k-1)，使得a_k=a_i+a_j</p><p>输入一个数n，求能得到数字n的最短的该序列</p><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>使用迭代加深的思路，逐步加深搜索的层数，再利用贪心，每次都倒序进行搜索，即从k-1搜索到1，直到得到结果即为答案</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[MAXX],depth;</span><br><span class="line"><span class="keyword">bool</span> has;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;MAXX;++i){</span><br><span class="line"><span class="keyword">if</span>(a[i]==n){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[i]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(now&gt;depth)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=now<span class="number">-1</span>;i&gt;=<span class="number">1</span>;--i){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&gt;=<span class="number">1</span>;--j){</span><br><span class="line">a[now]=a[i]+a[j];</span><br><span class="line"><span class="keyword">if</span>(a[now]&lt;=a[now<span class="number">-1</span>]) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(a[now]==n){</span><br><span class="line"><span class="built_in">output</span>();</span><br><span class="line">has=<span class="literal">true</span>;<span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">dfs</span>(now+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(has) <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(has) <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>){</span><br><span class="line"><span class="built_in">output</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">has=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">12</span>;++i){</span><br><span class="line">depth=i;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span>(has) <span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//int t;scanf("%d",&amp;t);</span></span><br><span class="line"><span class="comment">//while(t--)</span></span><br><span class="line">a[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)){</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="H题-打开灯泡-Switch-the-Lamp-On"><a href="#H题-打开灯泡-Switch-the-Lamp-On" class="headerlink" title="H题: 打开灯泡 Switch the Lamp On"></a>H题: 打开灯泡 Switch the Lamp On</h4><p><a href="https://loj.ac/p/2632">题目传送门</a></p><p>题目就不放了，比较简单，就是一个bfs求最短路，不过是双向队列的bfs，和用优先队列一样的，感觉就是建图有点麻烦</p><p>就直接放代码了</p><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rode</span>{</span></span><br><span class="line"><span class="keyword">int</span> tox,toy,len;</span><br><span class="line"><span class="keyword">bool</span> vis;</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>{</span></span><br><span class="line"><span class="keyword">int</span> x,y,len;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">int</span> n,m,n1,m1,ans;</span><br><span class="line"><span class="keyword">char</span> s[MAXX][MAXX];</span><br><span class="line">vector&lt;rode&gt; ro[MAXX][MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>{</span><br><span class="line">deque&lt;point&gt; qq;</span><br><span class="line">point pt;pt.x=<span class="number">1</span>;pt.y=<span class="number">1</span>;pt.len=<span class="number">0</span>;</span><br><span class="line">qq.<span class="built_in">emplace_front</span>(pt);</span><br><span class="line"><span class="keyword">while</span>(!qq.<span class="built_in">empty</span>()){</span><br><span class="line">point pp=qq.<span class="built_in">front</span>();qq.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="keyword">if</span>(pp.x==n1&amp;&amp;pp.y==m1){</span><br><span class="line">ans=pp.len;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> si=ro[pp.x][pp.y].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;si;++i){</span><br><span class="line"><span class="keyword">if</span>(!ro[pp.x][pp.y][i].vis){</span><br><span class="line">ro[pp.x][pp.y][i].vis=<span class="literal">true</span>;</span><br><span class="line">pt.x=ro[pp.x][pp.y][i].tox;</span><br><span class="line">pt.y=ro[pp.x][pp.y][i].toy;</span><br><span class="line">pt.len=pp.len+ro[pp.x][pp.y][i].len;</span><br><span class="line"><span class="keyword">if</span>(ro[pp.x][pp.y][i].len==<span class="number">0</span>)</span><br><span class="line">qq.<span class="built_in">emplace_front</span>(pt);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">qq.<span class="built_in">emplace_back</span>(pt);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">n1=n+<span class="number">1</span>;m1=m+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">ans=Inf;</span><br><span class="line">rode temp;temp.vis=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j){</span><br><span class="line">temp.len=(s[i][j]==<span class="string">'\\'</span>);</span><br><span class="line">temp.tox=i;temp.toy=j+<span class="number">1</span>;</span><br><span class="line">ro[i+<span class="number">1</span>][j].<span class="built_in">emplace_back</span>(temp);</span><br><span class="line">temp.tox=i+<span class="number">1</span>;temp.toy=j;</span><br><span class="line">ro[i][j+<span class="number">1</span>].<span class="built_in">emplace_back</span>(temp);</span><br><span class="line">temp.len=<span class="number">1</span>-temp.len;</span><br><span class="line">temp.tox=i+<span class="number">1</span>;temp.toy=j+<span class="number">1</span>;</span><br><span class="line">ro[i][j].<span class="built_in">emplace_back</span>(temp);</span><br><span class="line">temp.tox=i;temp.toy=j;</span><br><span class="line">ro[i+<span class="number">1</span>][j+<span class="number">1</span>].<span class="built_in">emplace_back</span>(temp);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">bfs</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ans==Inf)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO SOLUTION\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//int t;scanf("%d",&amp;t);</span></span><br><span class="line"><span class="comment">//while(t--)</span></span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="J题-Bloxorz-l"><a href="#J题-Bloxorz-l" class="headerlink" title="J题: Bloxorz l"></a>J题: Bloxorz l</h4><p><a href="http://poj.org/problem?id=3322">题目传送门</a></p><p>一个比较繁琐的bfs求最短路题目</p><h5 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h5><blockquote><p>Little Tom loves playing games. One day he downloads a little computer game called ‘Bloxorz’ which makes him excited. It’s a game about rolling a box to a specific position on a special plane. Precisely, the plane, which is composed of several unit cells, is a rectangle shaped area. And the box, consisting of two perfectly aligned unit cube, may either lies down and occupies two neighbouring cells or stands up and occupies one single cell. One may move the box by picking one of the four edges of the box on the ground and rolling the box 90 degrees around that edge, which is counted as one move. There are three kinds of cells, rigid cells, easily broken cells and empty cells. A rigid cell can support full weight of the box, so it can be either one of the two cells that the box lies on or the cell that the box fully stands on. A easily broken cells can only support half the weight of the box, so it cannot be the only cell that the box stands on. An empty cell cannot support anything, so there cannot be any part of the box on that cell. The target of the game is to roll the box standing onto the only target cell on the plane with minimum moves.</p><p><img src="/2022/01/13/1-13/J-1.JPG" alt="The box stands on a single cell"></p><p>The box stands on a single cell ↑</p><p><img src="/2022/01/13/1-13/J-2.JPG" alt="The box lies on two neighbouring cells, horizontally"></p><p>The box lies on two neighbouring cells, horizontally ↑</p><p><img src="/2022/01/13/1-13/J-3.JPG" alt="The box lies on two neighbouring cells, vertically"></p><p>The box lies on two neighbouring cells, vertically ↑</p><p>After Little Tom passes several stages of the game, he finds it much harder than he expected. So he turns to your help.</p><p><strong>Input</strong></p><p>Input contains multiple test cases. Each test case is one single stage of the game. It starts with two integers <em>R</em> and <em>C</em>(3 ≤ R, C ≤ 500) which stands for number of rows and columns of the plane. That follows the plane, which contains <em>R</em> lines and <em>C</em> characters for each line, with ‘O’ (Oh) for target cell, ‘X’ for initial position of the box, ‘.’ for a rigid cell, ‘#’ for a empty cell and ‘E’ for a easily broken cell. A test cases starts with two zeros ends the input.</p><p>It guarantees that</p><ul><li>There’s only one ‘O’ in a plane.</li><li>There’s either one ‘X’ or neighbouring two ‘X’s in a plane.</li><li>The first(and last) row(and column) must be ‘#’(empty cell).</li><li>Cells covered by ‘O’ and ‘X’ are all rigid cells.</li></ul><p><strong>Output</strong></p><p>For each test cases output one line with the minimum number of moves or “Impossible” (without quote) when there’s no way to achieve the target cell. </p><p><strong>Sample Input</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">7 7</span><br><span class="line">#######</span><br><span class="line">#..X###</span><br><span class="line">#..##O#</span><br><span class="line">#....E#</span><br><span class="line">#....E#</span><br><span class="line">#.....#</span><br><span class="line">#######</span><br><span class="line">0 0</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>Sample Output</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></tbody></table></figure></blockquote></blockquote><h5 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h5><p>有一个 1 * 1 * 2 大小的长方体，在一个棋盘上，有初始位置，有一个目标位置，问走几步能到达目标位置，棋盘上有几种方块地皮</p><ul><li>‘.’ 坚硬的地面，可以立在上面</li><li>‘E’ 易碎的(玻璃?)，不能立在上面，但是可以躺一半在上面</li><li>‘#’ 上面不能存在东西，(虚空?)</li><li>‘X’ 起始位置，可能是平躺的</li><li>‘O’ 目标位置，只能是立着的</li></ul><p>输入棋盘大小和整个棋盘，输出最少需要走几步能到目标位置。</p><h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>从起点开始bfs，和普通的dfs相比，就是麻烦，需要记录长方体的位置和状态（立着，横着平躺，竖着平躺），每个状态对应的下一步还都不一样。</p><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>{</span></span><br><span class="line"><span class="keyword">int</span> x,y,kind;<span class="comment">//0:立起来 1:竖着 2:横着 </span></span><br><span class="line"><span class="built_in">point</span>(<span class="keyword">int</span> xx=<span class="number">0</span>,<span class="keyword">int</span> yy=<span class="number">0</span>,<span class="keyword">int</span> kk=<span class="number">0</span>):<span class="built_in">x</span>(xx),<span class="built_in">y</span>(yy),<span class="built_in">kind</span>(kk){}</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(point jj,point kk){<span class="keyword">return</span> jj.kind&lt;kk.kind;}</span><br><span class="line">};</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PP</span>{</span></span><br><span class="line">point pos;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(PP jj,PP kk){</span><br><span class="line"><span class="keyword">return</span> jj.len&gt;kk.len;</span><br><span class="line">}</span><br><span class="line">};</span><br><span class="line"><span class="keyword">int</span> n,m,ans;</span><br><span class="line"><span class="keyword">char</span> a[MAXX][MAXX],vis[MAXX][MAXX][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> enx=<span class="number">0</span>,eny=<span class="number">0</span>;</span><br><span class="line">queue&lt;PP&gt; pq;</span><br><span class="line">point p;PP pp;</span><br><span class="line">pp.len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> findst=<span class="literal">false</span>,finden=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j){</span><br><span class="line"><span class="keyword">if</span>(!findst&amp;&amp;a[i][j]==<span class="string">'X'</span>){</span><br><span class="line">findst=<span class="literal">true</span>;</span><br><span class="line">pp.pos.x=i;pp.pos.y=j;</span><br><span class="line"><span class="keyword">bool</span> two=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>][j]==<span class="string">'X'</span>){</span><br><span class="line">two=<span class="literal">true</span>;</span><br><span class="line">pp.pos.kind=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[i][j+<span class="number">1</span>]==<span class="string">'X'</span>){</span><br><span class="line">two=<span class="literal">true</span>;</span><br><span class="line">pp.pos.kind=<span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(!two){</span><br><span class="line">pp.pos.kind=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">pq.<span class="built_in">push</span>(pp);</span><br><span class="line">vis[pp.pos.x][pp.pos.y][pp.pos.kind]=<span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(!finden&amp;&amp;a[i][j]==<span class="string">'O'</span>){</span><br><span class="line">finden=<span class="literal">true</span>;</span><br><span class="line">enx=i;eny=j;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(findst&amp;&amp;finden) <span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//bfs</span></span><br><span class="line"><span class="keyword">while</span>(!pq.<span class="built_in">empty</span>()){</span><br><span class="line">PP now=pq.<span class="built_in">front</span>();pq.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">int</span> i=now.pos.x,j=now.pos.y;</span><br><span class="line"><span class="keyword">if</span>(now.pos.kind==<span class="number">0</span>){</span><br><span class="line"><span class="keyword">if</span>(now.pos.x==enx&amp;&amp;now.pos.y==eny){</span><br><span class="line">ans=now.len;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(i<span class="number">-2</span>&gt;=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>][j]!=<span class="string">'#'</span>&amp;&amp;a[i<span class="number">-2</span>][j]!=<span class="string">'#'</span>){</span><br><span class="line">p.kind=<span class="number">1</span>;p.x=i<span class="number">-2</span>;p.y=j;</span><br><span class="line"><span class="keyword">if</span>(!vis[p.x][p.y][p.kind]){</span><br><span class="line">vis[p.x][p.y][p.kind]=<span class="literal">true</span>;</span><br><span class="line">pp.pos=p;pp.len=now.len+<span class="number">1</span>;</span><br><span class="line">pq.<span class="built_in">push</span>(pp);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(i+<span class="number">2</span>&lt;=n)</span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>][j]!=<span class="string">'#'</span>&amp;&amp;a[i+<span class="number">2</span>][j]!=<span class="string">'#'</span>){</span><br><span class="line">p.kind=<span class="number">1</span>;p.x=i+<span class="number">1</span>;p.y=j;</span><br><span class="line"><span class="keyword">if</span>(!vis[p.x][p.y][p.kind]){</span><br><span class="line">vis[p.x][p.y][p.kind]=<span class="literal">true</span>;</span><br><span class="line">pp.pos=p;pp.len=now.len+<span class="number">1</span>;</span><br><span class="line">pq.<span class="built_in">push</span>(pp);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(j<span class="number">-2</span>&gt;=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span>(a[i][j<span class="number">-1</span>]!=<span class="string">'#'</span>&amp;&amp;a[i][j<span class="number">-2</span>]!=<span class="string">'#'</span>){</span><br><span class="line">p.kind=<span class="number">2</span>;p.x=i;p.y=j<span class="number">-2</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[p.x][p.y][p.kind]){</span><br><span class="line">vis[p.x][p.y][p.kind]=<span class="literal">true</span>;</span><br><span class="line">pp.pos=p;pp.len=now.len+<span class="number">1</span>;</span><br><span class="line">pq.<span class="built_in">push</span>(pp);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(j+<span class="number">2</span>&lt;=m)</span><br><span class="line"><span class="keyword">if</span>(a[i][j+<span class="number">1</span>]!=<span class="string">'#'</span>&amp;&amp;a[i][j+<span class="number">2</span>]!=<span class="string">'#'</span>){</span><br><span class="line">p.kind=<span class="number">2</span>;p.x=i;p.y=j+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[p.x][p.y][p.kind]){</span><br><span class="line">vis[p.x][p.y][p.kind]=<span class="literal">true</span>;</span><br><span class="line">pp.pos=p;pp.len=now.len+<span class="number">1</span>;</span><br><span class="line">pq.<span class="built_in">push</span>(pp);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(now.pos.kind==<span class="number">1</span>){</span><br><span class="line"><span class="keyword">if</span>(i<span class="number">-1</span>&gt;=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>][j]!=<span class="string">'#'</span>&amp;&amp;a[i<span class="number">-1</span>][j]!=<span class="string">'E'</span>){</span><br><span class="line">p.kind=<span class="number">0</span>;p.x=i<span class="number">-1</span>;p.y=j;</span><br><span class="line"><span class="keyword">if</span>(!vis[p.x][p.y][p.kind]){</span><br><span class="line">vis[p.x][p.y][p.kind]=<span class="literal">true</span>;</span><br><span class="line">pp.pos=p;pp.len=now.len+<span class="number">1</span>;</span><br><span class="line">pq.<span class="built_in">push</span>(pp);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(i+<span class="number">2</span>&lt;=n)</span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">2</span>][j]!=<span class="string">'#'</span>&amp;&amp;a[i+<span class="number">2</span>][j]!=<span class="string">'E'</span>){</span><br><span class="line">p.kind=<span class="number">0</span>;p.x=i+<span class="number">2</span>;p.y=j;</span><br><span class="line"><span class="keyword">if</span>(!vis[p.x][p.y][p.kind]){</span><br><span class="line">vis[p.x][p.y][p.kind]=<span class="literal">true</span>;</span><br><span class="line">pp.pos=p;pp.len=now.len+<span class="number">1</span>;</span><br><span class="line">pq.<span class="built_in">push</span>(pp);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(j<span class="number">-1</span>&gt;=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span>(a[i][j<span class="number">-1</span>]!=<span class="string">'#'</span>&amp;&amp;a[i+<span class="number">1</span>][j<span class="number">-1</span>]!=<span class="string">'#'</span>){</span><br><span class="line">p.kind=<span class="number">1</span>;p.x=i;p.y=j<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[p.x][p.y][p.kind]){</span><br><span class="line">vis[p.x][p.y][p.kind]=<span class="literal">true</span>;</span><br><span class="line">pp.pos=p;pp.len=now.len+<span class="number">1</span>;</span><br><span class="line">pq.<span class="built_in">push</span>(pp);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(j+<span class="number">1</span>&lt;=m)</span><br><span class="line"><span class="keyword">if</span>(a[i][j+<span class="number">1</span>]!=<span class="string">'#'</span>&amp;&amp;a[i+<span class="number">1</span>][j+<span class="number">1</span>]!=<span class="string">'#'</span>){</span><br><span class="line">p.kind=<span class="number">1</span>;p.x=i;p.y=j+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[p.x][p.y][p.kind]){</span><br><span class="line">vis[p.x][p.y][p.kind]=<span class="literal">true</span>;</span><br><span class="line">pp.pos=p;pp.len=now.len+<span class="number">1</span>;</span><br><span class="line">pq.<span class="built_in">push</span>(pp);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(now.pos.kind==<span class="number">2</span>){</span><br><span class="line"><span class="keyword">if</span>(i<span class="number">-1</span>&gt;=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>][j]!=<span class="string">'#'</span>&amp;&amp;a[i<span class="number">-1</span>][j+<span class="number">1</span>]!=<span class="string">'#'</span>){</span><br><span class="line">p.kind=<span class="number">2</span>;p.x=i<span class="number">-1</span>;p.y=j;</span><br><span class="line"><span class="keyword">if</span>(!vis[p.x][p.y][p.kind]){</span><br><span class="line">vis[p.x][p.y][p.kind]=<span class="literal">true</span>;</span><br><span class="line">pp.pos=p;pp.len=now.len+<span class="number">1</span>;</span><br><span class="line">pq.<span class="built_in">push</span>(pp);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(i+<span class="number">1</span>&lt;=n)</span><br><span class="line"><span class="keyword">if</span>(a[i+<span class="number">1</span>][j]!=<span class="string">'#'</span>&amp;&amp;a[i+<span class="number">1</span>][j+<span class="number">1</span>]!=<span class="string">'#'</span>){</span><br><span class="line">p.kind=<span class="number">2</span>;p.x=i+<span class="number">1</span>;p.y=j;</span><br><span class="line"><span class="keyword">if</span>(!vis[p.x][p.y][p.kind]){</span><br><span class="line">vis[p.x][p.y][p.kind]=<span class="literal">true</span>;</span><br><span class="line">pp.pos=p;pp.len=now.len+<span class="number">1</span>;</span><br><span class="line">pq.<span class="built_in">push</span>(pp);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(j<span class="number">-1</span>&gt;=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span>(a[i][j<span class="number">-1</span>]!=<span class="string">'#'</span>&amp;&amp;a[i][j<span class="number">-1</span>]!=<span class="string">'E'</span>){</span><br><span class="line">p.kind=<span class="number">0</span>;p.x=i;p.y=j<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[p.x][p.y][p.kind]){</span><br><span class="line">vis[p.x][p.y][p.kind]=<span class="literal">true</span>;</span><br><span class="line">pp.pos=p;pp.len=now.len+<span class="number">1</span>;</span><br><span class="line">pq.<span class="built_in">push</span>(pp);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(j+<span class="number">2</span>&lt;=m)</span><br><span class="line"><span class="keyword">if</span>(a[i][j+<span class="number">2</span>]!=<span class="string">'#'</span>&amp;&amp;a[i][j+<span class="number">2</span>]!=<span class="string">'E'</span>){</span><br><span class="line">p.kind=<span class="number">0</span>;p.x=i;p.y=j+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(!vis[p.x][p.y][p.kind]){</span><br><span class="line">vis[p.x][p.y][p.kind]=<span class="literal">true</span>;</span><br><span class="line">pp.pos=p;pp.len=now.len+<span class="number">1</span>;</span><br><span class="line">pq.<span class="built_in">push</span>(pp);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a[i]+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">ans=<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">bfs</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">-1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">2</span>;++k)</span><br><span class="line">vis[i][j][k]=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//int t;scanf("%d",&amp;t);</span></span><br><span class="line"><span class="comment">//while(t--)</span></span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)){</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>搜索的优化还是比较难的，优化永无止境。</p>]]></content>
      
      
      <categories>
          
          <category> 2021ACM寒假集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日总结-1月12日</title>
      <link href="/2022/01/12/1-12/"/>
      <url>/2022/01/12/1-12/</url>
      
        <content type="html"><![CDATA[<h2 id="搜索进阶"><a href="#搜索进阶" class="headerlink" title="搜索进阶"></a>搜索进阶</h2><p>dfs&amp;bfs&amp;迭代加深&amp;A*算法</p><p><strong>剪枝优化</strong></p><ul><li>优化搜索顺序</li><li>排除等效冗余</li><li>可行性剪枝</li><li>最优性剪枝</li><li>记忆化搜索</li><li>常数优化</li></ul><h3 id="今日战况"><a href="#今日战况" class="headerlink" title="今日战况"></a>今日战况</h3><p><img src="/2022/01/12/1-12/standing.png" alt="Standing"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我个人感觉我的搜索应该还是差不多的，但是今天的题目让我觉得我的剪枝方面的水平还有待提升，以及自己的构造能力不强，有时候在脑子里面能想出来一些东西，但是无法马上构思出代码，还得想亿会才能(也可能想不出来)。</p><h3 id="部分题目题解"><a href="#部分题目题解" class="headerlink" title="部分题目题解"></a>部分题目题解</h3><h4 id="C题-Soduku-最简单版本的"><a href="#C题-Soduku-最简单版本的" class="headerlink" title="C题: Soduku (最简单版本的)"></a>C题: Soduku (最简单版本的)</h4><p><a href="http://poj.org/problem?id=2676">题目传送门</a></p><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><blockquote><p>Sudoku is a very simple task. A square table with 9 rows and 9 columns is divided to 9 smaller squares 3x3 as shown on the Figure. In some of the cells are written decimal digits from 1 to 9. The other cells are empty. The goal is to fill the empty cells with decimal digits from 1 to 9, one digit per cell, in such way that in each row, in each column and in each marked 3x3 subsquare, all the digits from 1 to 9 to appear. Write a program to solve a given Sudoku-task.</p><p><img src="/2022/01/12/1-12/t1.jpg" alt="img1"></p><p><strong>Input</strong></p><blockquote><p>The input data will start with the number of the test cases. For each test case, 9 lines follow, corresponding to the rows of the table. On each line a string of exactly 9 decimal digits is given, corresponding to the cells in this line. If a cell is empty it is represented by 0.</p></blockquote><p><strong>Output</strong></p><blockquote><p>For each test case your program should print the solution in the same format as the input data. The empty cells have to be filled according to the rules. If solutions is not unique, then the program may print any one of them.</p></blockquote><p><strong>Sample Input</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">103000509</span><br><span class="line">002109400</span><br><span class="line">000704000</span><br><span class="line">300502006</span><br><span class="line">060000050</span><br><span class="line">700803004</span><br><span class="line">000401000</span><br><span class="line">009205800</span><br><span class="line">804000107</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>Sample Output</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">143628579</span><br><span class="line">572139468</span><br><span class="line">986754231</span><br><span class="line">391542786</span><br><span class="line">468917352</span><br><span class="line">725863914</span><br><span class="line">237481695</span><br><span class="line">619275843</span><br><span class="line">854396127</span><br></pre></td></tr></tbody></table></figure></blockquote></blockquote><h5 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h5><p>有t个测试样例，每个样例都有一个9*9的数独，里面的0表示未确定的数，编程写这个数独，输出写好之后的数独。</p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>暴力的话就是用搜索遍历每一行每一个位置，枚举每一个可能的结果，直到得到结果。</p><p>此题数据比较水，暴力就直接能AC。</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">6005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">10</span>],belong[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> r[<span class="number">10</span>][<span class="number">10</span>],c[<span class="number">10</span>][<span class="number">10</span>],d[<span class="number">10</span>][<span class="number">10</span>],can;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;++j)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> jj,<span class="keyword">int</span> kk)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(can) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(a[jj][kk]){</span><br><span class="line"><span class="keyword">if</span>(kk&lt;<span class="number">9</span>)</span><br><span class="line"><span class="built_in">dfs</span>(jj,kk+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(jj&lt;<span class="number">9</span>)</span><br><span class="line"><span class="built_in">dfs</span>(jj+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">output</span>();</span><br><span class="line">can=<span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i){</span><br><span class="line"><span class="keyword">if</span>(r[jj][i]||c[kk][i]||d[belong[jj][kk]][i])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">a[jj][kk]=i;</span><br><span class="line">r[jj][i]=c[kk][i]=d[belong[jj][kk]][i]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(kk&lt;<span class="number">9</span>)</span><br><span class="line"><span class="built_in">dfs</span>(jj,kk+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(jj&lt;<span class="number">9</span>)</span><br><span class="line"><span class="built_in">dfs</span>(jj+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">output</span>();</span><br><span class="line">can=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(can) <span class="keyword">return</span>;</span><br><span class="line">a[jj][kk]=<span class="number">0</span>;</span><br><span class="line">r[jj][i]=c[kk][i]=d[belong[jj][kk]][i]=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i){</span><br><span class="line"><span class="keyword">char</span> jj;</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;++j){</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;jj);</span><br><span class="line">a[i][j]=jj-<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i][j]!=<span class="number">0</span>){</span><br><span class="line">r[i][a[i][j]]=<span class="literal">true</span>;</span><br><span class="line">c[j][a[i][j]]=<span class="literal">true</span>;</span><br><span class="line">d[belong[i][j]][a[i][j]]=<span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">can=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;++j){</span><br><span class="line">a[i][j]=<span class="number">0</span>;</span><br><span class="line">r[i][j]=c[i][j]=d[i][j]=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;++j)</span><br><span class="line">belong[i][j]=(i<span class="number">-1</span>)/<span class="number">3</span>*<span class="number">3</span>+(j<span class="number">-1</span>)/<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="D题-Soduku-变态数据版本的-未做出来"><a href="#D题-Soduku-变态数据版本的-未做出来" class="headerlink" title="D题: Soduku (变态数据版本的)(未做出来)"></a>D题: Soduku (变态数据版本的)(未做出来)</h4><p><a href="http://poj.org/problem?id=3074">题目传送门</a></p><h5 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h5><blockquote><p>In the game of Sudoku, you are given a large 9 × 9 grid divided into smaller 3 × 3 subgrids. For example,</p><p><img src="/2022/01/12/1-12/t2.png" alt="image-20220112211854409"></p><p>Given some of the numbers in the grid, your goal is to determine the remaining numbers such that the numbers 1 through 9 appear exactly once in (1) each of nine 3 × 3 subgrids, (2) each of the nine rows, and (3) each of the nine columns.</p><p><strong>Input</strong></p><p>The input test file will contain multiple cases. Each test case consists of a single line containing 81 characters, which represent the 81 squares of the Sudoku grid, given one row at a time. Each character is either a digit (from 1 to 9) or a period (used to indicate an unfilled square). You may assume that each puzzle in the input will have exactly one solution. The end-of-file is denoted by a single line containing the word “end”.</p><p><strong>Output</strong></p><p>For each test case, print a line representing the completed Sudoku puzzle.</p><p><strong>Sample Input</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.2738..1..1...6735.......293.5692.8...........6.1745.364.......9518...7..8..6534.</span><br><span class="line">......52..8.4......3...9...5.1...6..2..7........3.....6...1..........7.4.......3.</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure></blockquote><p><strong>Sample Output</strong></p><blockquote><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">527389416819426735436751829375692184194538267268174593643217958951843672782965341</span><br><span class="line">416837529982465371735129468571298643293746185864351297647913852359682714128574936</span><br></pre></td></tr></tbody></table></figure></blockquote></blockquote><h5 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h5><p>和上道题大意一样，输入一个数独，输出填充完整的数独。但是测试数据要比C题离谱的多。</p><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>各种优化</p><p>我目前的代码只进行了搜索顺序的优化，常熟优化还没学会。</p><p>附上进行了搜索顺序优化的代码。</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">6005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">row</span>{</span></span><br><span class="line"><span class="keyword">int</span> id,num;</span><br><span class="line">}cnt[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">10</span>],belong[<span class="number">10</span>][<span class="number">10</span>],rate[<span class="number">10</span>];</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">bool</span> r[<span class="number">10</span>][<span class="number">10</span>],c[<span class="number">10</span>][<span class="number">10</span>],d[<span class="number">10</span>][<span class="number">10</span>],can;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(row jj,row kk)</span></span>{<span class="keyword">return</span> jj.num&lt;kk.num;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;++j)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i][j]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> jj,<span class="keyword">int</span> kk)</span></span>{</span><br><span class="line"><span class="comment">//printf("%d %d\n",jj,rate[jj]);</span></span><br><span class="line"><span class="keyword">if</span>(can) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(a[jj][kk]){</span><br><span class="line"><span class="keyword">if</span>(kk&lt;<span class="number">9</span>)</span><br><span class="line"><span class="built_in">dfs</span>(jj,kk+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(rate[jj]&lt;<span class="number">9</span>)</span><br><span class="line"><span class="built_in">dfs</span>(cnt[rate[jj]+<span class="number">1</span>].id,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">output</span>();</span><br><span class="line">can=<span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i){</span><br><span class="line"><span class="keyword">if</span>(r[jj][i]||c[kk][i]||d[belong[jj][kk]][i])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">a[jj][kk]=i;</span><br><span class="line">r[jj][i]=c[kk][i]=d[belong[jj][kk]][i]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(kk&lt;<span class="number">9</span>)</span><br><span class="line"><span class="built_in">dfs</span>(jj,kk+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(rate[jj]&lt;<span class="number">9</span>)</span><br><span class="line"><span class="built_in">dfs</span>(cnt[rate[jj]+<span class="number">1</span>].id,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="built_in">output</span>();</span><br><span class="line">can=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(can) <span class="keyword">return</span>;</span><br><span class="line">a[jj][kk]=<span class="number">0</span>;</span><br><span class="line">r[jj][i]=c[kk][i]=d[belong[jj][kk]][i]=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i){</span><br><span class="line">cnt[i].id=i;</span><br><span class="line">cnt[i].num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;++j){</span><br><span class="line"><span class="keyword">if</span>(s[++p]==<span class="string">'.'</span>){</span><br><span class="line">a[i][j]=<span class="number">0</span>;</span><br><span class="line">++cnt[i].num;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line">a[i][j]=s[p]-<span class="string">'0'</span>;</span><br><span class="line">r[i][a[i][j]]=<span class="literal">true</span>;</span><br><span class="line">c[j][a[i][j]]=<span class="literal">true</span>;</span><br><span class="line">d[belong[i][j]][a[i][j]]=<span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(cnt+<span class="number">1</span>,cnt+<span class="number">10</span>,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i)</span><br><span class="line">rate[cnt[i].id]=i;</span><br><span class="line"></span><br><span class="line">can=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">dfs</span>(cnt[<span class="number">1</span>].id,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;++j){</span><br><span class="line">a[i][j]=<span class="number">0</span>;</span><br><span class="line">r[i][j]=c[i][j]=d[i][j]=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;++j)</span><br><span class="line">belong[i][j]=(i<span class="number">-1</span>)/<span class="number">3</span>*<span class="number">3</span>+(j<span class="number">-1</span>)/<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int t;scanf("%d",&amp;t);</span></span><br><span class="line"><span class="comment">//while(t--)</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>){</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">"end"</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="F题-靶形数独"><a href="#F题-靶形数独" class="headerlink" title="F题: 靶形数独"></a>F题: 靶形数独</h4><p><a href="https://www.luogu.com.cn/problem/P1074">题目传送门</a></p><p>这里就不放题目了，思路和上面的数独的题一样，通过优化搜索顺序即可AC</p><p>枚举出每种可能的最终结果，取最大值即可</p><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">6005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">row</span>{</span></span><br><span class="line"><span class="keyword">int</span> id,num;</span><br><span class="line">}cnt[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>][<span class="number">10</span>],belong[<span class="number">10</span>][<span class="number">10</span>],rate[<span class="number">10</span>],ans;</span><br><span class="line"><span class="keyword">bool</span> r[<span class="number">10</span>][<span class="number">10</span>],c[<span class="number">10</span>][<span class="number">10</span>],d[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(row jj,row kk)</span></span>{<span class="keyword">return</span> jj.num&lt;kk.num;}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;++j)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i][j]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> re=<span class="number">10</span>*a[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;++i){</span><br><span class="line"><span class="keyword">int</span> st=<span class="number">5</span>-i,en=<span class="number">5</span>+i;</span><br><span class="line"><span class="keyword">int</span> fen=<span class="number">10</span>-i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=st;j&lt;=en;++j){</span><br><span class="line">re+=a[st][j]*fen;</span><br><span class="line">re+=a[en][j]*fen;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=st+<span class="number">1</span>;j&lt;en;++j){</span><br><span class="line">re+=a[j][st]*fen;</span><br><span class="line">re+=a[j][en]*fen;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> jj,<span class="keyword">int</span> kk)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(a[jj][kk]){</span><br><span class="line"><span class="keyword">if</span>(kk&lt;<span class="number">9</span>)</span><br><span class="line"><span class="built_in">dfs</span>(jj,kk+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(rate[jj]&lt;<span class="number">9</span>)</span><br><span class="line"><span class="built_in">dfs</span>(cnt[rate[jj]+<span class="number">1</span>].id,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="comment">//output();</span></span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">getans</span>());</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i){</span><br><span class="line"><span class="keyword">if</span>(r[jj][i]||c[kk][i]||d[belong[jj][kk]][i])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">a[jj][kk]=i;</span><br><span class="line">r[jj][i]=c[kk][i]=d[belong[jj][kk]][i]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(kk&lt;<span class="number">9</span>)</span><br><span class="line"><span class="built_in">dfs</span>(jj,kk+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(rate[jj]&lt;<span class="number">9</span>)</span><br><span class="line"><span class="built_in">dfs</span>(cnt[rate[jj]+<span class="number">1</span>].id,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="comment">//output();</span></span><br><span class="line">ans=<span class="built_in">max</span>(ans,<span class="built_in">getans</span>());</span><br><span class="line">}</span><br><span class="line">a[jj][kk]=<span class="number">0</span>;</span><br><span class="line">r[jj][i]=c[kk][i]=d[belong[jj][kk]][i]=<span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i){</span><br><span class="line">cnt[i].id=i;</span><br><span class="line">cnt[i].num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;++j){</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line"><span class="keyword">if</span>(a[i][j]==<span class="number">0</span>){</span><br><span class="line">++cnt[i].num;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line">r[i][a[i][j]]=<span class="literal">true</span>;</span><br><span class="line">c[j][a[i][j]]=<span class="literal">true</span>;</span><br><span class="line">d[belong[i][j]][a[i][j]]=<span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(cnt+<span class="number">1</span>,cnt+<span class="number">10</span>,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i)</span><br><span class="line">rate[cnt[i].id]=i;</span><br><span class="line"></span><br><span class="line">ans=<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(cnt[<span class="number">1</span>].id,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">9</span>;++j)</span><br><span class="line">belong[i][j]=(i<span class="number">-1</span>)/<span class="number">3</span>*<span class="number">3</span>+(j<span class="number">-1</span>)/<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int t;scanf("%d",&amp;t);</span></span><br><span class="line"><span class="comment">//while(t--)</span></span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>今天的搜索进阶听课和写题都挺有收获，知道了搜索的各种优化思路，以及了解到了迭代加深的思路，并成功依此A题。</p><p>今天先总结这三道题，明天再总结其他题目</p>]]></content>
      
      
      <categories>
          
          <category> 2021ACM寒假集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cfRound#764(Div.3)Summary</title>
      <link href="/2022/01/11/cfround-764-div-3-summary/"/>
      <url>/2022/01/11/cfround-764-div-3-summary/</url>
      
        <content type="html"><![CDATA[<h1 id="Codeforces-Round-764-Div-3"><a href="#Codeforces-Round-764-Div-3" class="headerlink" title="Codeforces Round 764(Div. 3)"></a>Codeforces Round 764(Div. 3)</h1><p><a href="https://codeforces.com/contest/1624">CONTEST传送门</a></p><h2 id="战况"><a href="#战况" class="headerlink" title="战况"></a>战况</h2><p><strong>Standing</strong></p><p><img src="/2022/01/11/cfround-764-div-3-summary/standing.png" alt="Standing"></p><p><strong>Rating</strong></p><p><img src="/2022/01/11/cfround-764-div-3-summary/rating.png" alt="Rating"></p><h2 id="补题"><a href="#补题" class="headerlink" title="补题"></a>补题</h2><h3 id="D-Palindromes-Coloring"><a href="#D-Palindromes-Coloring" class="headerlink" title="D - Palindromes Coloring"></a>D - Palindromes Coloring</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><blockquote><ul><li>time limit per test: 2 seconds</li><li>memory limit per test: 256 megabytes</li><li>input: standard input</li><li>output: standard output</li></ul><p>You have a string s consisting of lowercase Latin alphabet letters.</p><p>You can color some letters in colors from <em>1</em> to <em>k</em>. It is not necessary to paint all the letters. But for each color, there must be a letter painted in that color.</p><p>Then you can swap any two symbols painted in the same color as many times as you want.</p><p>After that, <em>k</em> strings will be created, <em>i</em>-th of them will contain all the characters colored in the color <em>i</em>, written in the order of their sequence in the string <em>s</em>.</p><p>Your task is to color the characters of the string so that all the resulting <em>k</em> strings are palindromes, and the length of the shortest of these <em>k</em> strings is as <strong>large</strong> as possible.</p><p>Read the note for the first test case of the example if you need a clarification.</p><p>Recall that a string is a palindrome if it reads the same way both from left to right and from right to left. For example, the strings <em>abacaba</em>, <em>cccc</em>, <em>z</em> and <em>dxd</em> are palindromes, but the strings <em>abab</em> and <em>aaabaa</em> — are not.</p><p><strong>Input</strong></p><p>The first line of input data contains a single integer <em>t</em> (<em>1</em> ≤ <em>t</em> ≤ <em>10⁴</em> ) — the number of input data sets in the test.</p><p>The descriptions of the input data sets follow.</p><p>The first line of the description of each input data set contains two integers <em>n</em> and <em>k</em> ( <em>1</em> ≤ <em>k</em> ≤ <em>n</em> ≤ <em>2⋅10⁵</em> ) — the length of the string and the number of colors in which its letters can be painted. The second line of the description of each input data set contains a string <em>s</em> of length <em>n</em> consisting of lowercase letters of the Latin alphabet.</p><p>It is guaranteed that the sum of n over all test cases does not exceed <em>2⋅10⁵</em> .</p><p><strong>Output</strong></p><p>For each set of input data, output a single integer  — the maximum length of the shortest palindrome string that can be obtained.</p><p><strong>Example</strong></p><blockquote><p>input</p><blockquote><p>10<br>8 2<br>bxyaxzay<br>6 3<br>aaaaaa<br>6 1<br>abcdef<br>6 6<br>abcdef<br>3 2<br>dxd<br>11 2<br>abcabcabcac<br>6 6<br>sipkic<br>7 2<br>eatoohd<br>3 1<br>llw<br>6 2<br>bfvfbv</p></blockquote><p>output</p><blockquote><p>3<br>2<br>1<br>1<br>1<br>5<br>1<br>1<br>3<br>3</p></blockquote></blockquote><p><strong>Note</strong></p><ul><li><p>In the first test case, <em>s</em> =”bxyaxzay”, <em>k</em>=2. We use indices in the string from <em>1</em> to <em>8</em>. The following coloring will work: <strong>bxyaxzaybxyaxzay</strong> (the letter z remained uncolored). After painting:</p><ul><li>swap two red characters (with the indices <strong>1</strong> and <strong>4</strong>), we get <strong>axybxzay</strong>;</li><li>swap two blue characters (with the indices <strong>5</strong> and <strong>8</strong>), we get <strong>axybyzax</strong>.</li></ul><p>Now, for each of the two colors we write out the corresponding characters from left to right, we get two strings <strong>aba</strong> and <strong>xyyx</strong>. Both of them are palindromes, the length of the shortest is <strong>3</strong>. It can be shown that the greatest length of the shortest palindrome cannot be achieved.</p></li><li><p>In the second set of input data, the following coloring is suitable: [1,1,2,2,3,3]. There is no need to swap characters. Both received strings are equal to aa, they are palindromes and their length is <strong>2</strong>.</p></li><li><p>In the third set of input data, you can color any character and take it into a string.</p></li><li><p>In the fourth set of input data, you can color the <em>i</em>-th character in the color <em>i</em>.</p></li><li><p>In the fifth set of input data can be colored in each of the colors of one character.</p></li><li><p>In the sixth set of input data, the following coloring is suitable: </p><p>[1,1,1,1,1,2,2,2,2,2,0]. Rearrange the characters so as to get the palindromes abcba and acbca.</p></li></ul></blockquote><h4 id="大概意思"><a href="#大概意思" class="headerlink" title="大概意思"></a>大概意思</h4><p>输入一个长度为 n 的由小写字母组成的字符串，取其中的字母组成 k 个回文字符串，每个字母(位置不同的每个字母)最多只能属于一个字符串。问怎样取能使得取得的 k 个回文字符串中的最短的那一个尽量长。输出这个长度。</p><h4 id="我当时的思路"><a href="#我当时的思路" class="headerlink" title="我当时的思路"></a>我当时的思路</h4><p>在一个回文串中，若该回文串的长度为<strong>偶数</strong>，则每个字母出现的次数都是偶数(即成对出现)，若该回文串的长度为<strong>奇数</strong>，则有且只有一个字母出现的次数为奇数，且其他字母出现的次数为偶数(成对出现)。</p><p>记录下原字符串中每个字母出现的次数，接着，记录下成对出现的字母有几组(记两个相同的字母为一组)和单个出现的字母有几个。</p><p>接着，就是对每一种情况的分析及枚举(详见代码)。</p><h4 id="当时的代码"><a href="#当时的代码" class="headerlink" title="当时的代码"></a>当时的代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,num[<span class="number">200</span>];</span><br><span class="line"><span class="keyword">char</span> a[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(a+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i){</span><br><span class="line">++num[a[i]];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>,dan=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="string">'a'</span>;i&lt;=<span class="string">'z'</span>;++i){</span><br><span class="line"><span class="keyword">if</span>(num[i]%<span class="number">2</span>==<span class="number">1</span>){</span><br><span class="line">sum+=num[i]<span class="number">-1</span>;</span><br><span class="line">++dan;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sum+=num[i];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">sum/=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">if</span>(k&gt;n/<span class="number">2</span>)</span><br><span class="line">ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;k)</span><br><span class="line">ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line">ans=sum/k*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(sum%k==<span class="number">0</span>){</span><br><span class="line"><span class="keyword">if</span>(dan&gt;=k)</span><br><span class="line">++ans;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">int</span> s=sum%k;</span><br><span class="line">dan+=s*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(dan&lt;k)</span><br><span class="line">ans=ans;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">++ans;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="string">'a'</span>;i&lt;=<span class="string">'z'</span>;++i)</span><br><span class="line">num[i]=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="现在想的思路"><a href="#现在想的思路" class="headerlink" title="现在想的思路"></a>现在想的思路</h4><p>最小值最大化，典型的二分。(但是当时我不会写二分😭,而且看着E题和F题都好像要用到二分)</p><h4 id="现在的代码"><a href="#现在的代码" class="headerlink" title="现在的代码"></a>现在的代码</h4><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,num[<span class="number">200</span>];</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>,dan=<span class="number">0</span>,can;</span><br><span class="line"><span class="keyword">char</span> a[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> jj)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(jj&lt;=sum/k*<span class="number">2</span>+can)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,a+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(a+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;++i){</span><br><span class="line">++num[a[i]];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="string">'a'</span>;i&lt;=<span class="string">'z'</span>;++i){</span><br><span class="line">sum+=num[i]/<span class="number">2</span>;</span><br><span class="line">dan+=num[i]%<span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sum%k*<span class="number">2</span>+dan&gt;=k)</span><br><span class="line">can=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">can=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=n,mid;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r){</span><br><span class="line">mid=(l+r+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid))</span><br><span class="line">l=mid;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">r=mid<span class="number">-1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="string">'a'</span>;i&lt;=<span class="string">'z'</span>;++i)</span><br><span class="line">num[i]=<span class="number">0</span>;</span><br><span class="line">sum=dan=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>二分杀我</strong> </p>]]></content>
      
      
      <categories>
          
          <category> cf总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> cf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日总结-1月11日</title>
      <link href="/2022/01/11/1-11/"/>
      <url>/2022/01/11/1-11/</url>
      
        <content type="html"><![CDATA[<h2 id="dp进阶"><a href="#dp进阶" class="headerlink" title="dp进阶"></a>dp进阶</h2><p>区间dp&amp;树形dp&amp;概率dp&amp;数位dp</p><h3 id="今日战况"><a href="#今日战况" class="headerlink" title="今日战况"></a>今日战况</h3><p><img src="/2022/01/11/1-11/result.png" alt="榜"></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>vj上的题好难啊，</p><p>第一题我看着和昨天的那道”石子合并”挺像的，但就是不知道怎么类比过去，看了半天就是不知道该怎么写。其他题看着也都好难，思路也都想不出来。</p><h3 id="关于昨晚的CF"><a href="#关于昨晚的CF" class="headerlink" title="关于昨晚的CF"></a>关于昨晚的CF</h3><p><a href="https://shaun-2314.github.io/2022/01/11/cfRound-764-Div-3-Summary/">CF Round #764 (Div. 3)总结</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>进阶dp(还有基础dp)现在还是软肋，仍需大量练习理解。</p>]]></content>
      
      
      <categories>
          
          <category> 2021ACM寒假集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日总结-1月10日</title>
      <link href="/2022/01/10/1-10/"/>
      <url>/2022/01/10/1-10/</url>
      
        <content type="html"><![CDATA[<h2 id="dp进阶"><a href="#dp进阶" class="headerlink" title="dp进阶"></a>dp进阶</h2><p>区间dp&amp;树形dp&amp;概率dp&amp;数位dp</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天没有弄题目，就在网上找资料学习和做题。</p><p>感觉这一部分好难，不太好理解，难以运用。需要大量的练习。</p><h3 id="区间dp"><a href="#区间dp" class="headerlink" title="区间dp"></a>区间dp</h3><p>区间类动态规划是线性动态规划的扩展，它在分阶段地划分问题时，与阶段中元素出现的顺序和由前一阶段的哪些元素合并而来有很大的关系。</p><p>令状态 f(i,j) 表示将下标位置 i 到 j 的所有元素合并能获得的价值的最大值，那么 <code>f(i,j)=max{f(i,k)+f(k+1,j)+cost}</code> ， cost 为将这两组元素合并起来的代价。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>合并：将两个或多个部分进行整合，当然也可以反过来。</li><li>特征：能将问题分解为能两两合并的形式。</li><li>求解：对整个问题设最优质，枚举合并点，将问题分解为左右两个部分，最后合并两个部分的最优值得到原问题的最优值。</li></ul><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><p><a href="https://loj.ac/p/10147">石子合并</a></p><h5 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h5><p>将 n 堆石子绕圆形操场排放，现要将石子有序地合并成一堆。规定每次只能选相邻的两堆合并成新的一堆，并将新的一堆的石子数记做该次合并的得分。</p><p>请编写一个程序，读入堆数 n 及每堆的石子数，并进行如下计算：</p><ol><li>选择一种合并石子的方案，使得做 n-1 次合并得分总和最大。</li><li>选择一种合并石子的方案，使得做 n-1 次合并得分总和最小。</li></ol><p><strong>输入格式</strong></p><p>输入第一行一个整数 n ，表示有 n 堆石子。</p><p>第二行 n 个整数，表示每堆石子的数量。</p><p><strong>输出格式</strong></p><p>输出共两行：</p><p>第一行为合并得分总和最小值，</p><p>第二行为合并得分总和最大值。</p><p><strong>样例</strong></p><p><em>输入</em></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4 5 9 4</span><br></pre></td></tr></tbody></table></figure><p><em>输出</em></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">43</span><br><span class="line">54</span><br></pre></td></tr></tbody></table></figure><p><strong>数据范围与提示</strong></p><p>对于 100% 的数据，有 1 ≤ n ≤ 200 。</p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p><strong>状态转移方程</strong></p><p><img src="/2022/01/10/1-10/function1.png" alt="状态转移方程"></p><p><strong>环的处理</strong></p><p>将链延长至两倍，变成 2*n 堆，其中第 i 堆与第 n+i 堆相同，用动态规划求解后，取 f(1,n),f(2,n+1),…,f(i,n+i-1) 中的最优值，即为最后的答案。</p><p><strong>时间复杂度</strong></p><p>O(n³)</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">210</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">2</span>*MAXX],sum[<span class="number">2</span>*MAXX],dpmax[<span class="number">2</span>*MAXX][<span class="number">2</span>*MAXX],dpmin[<span class="number">2</span>*MAXX][<span class="number">2</span>*MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">int</span> n2=n*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">a[n+i]=a[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n2;++i)</span><br><span class="line">sum[i]=sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line"><span class="built_in">memset</span>(dpmin,Inf,<span class="built_in"><span class="keyword">sizeof</span></span>(dpmin));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n2;++i)</span><br><span class="line">dpmin[i][i]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">2</span>;c&lt;=n;++c){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n2;++i){</span><br><span class="line"><span class="keyword">int</span> j=i+c<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;j&amp;&amp;k&lt;n2;++k){</span><br><span class="line">dpmax[i][j]=<span class="built_in">max</span>(dpmax[i][j],dpmax[i][k]+dpmax[k+<span class="number">1</span>][j]+sum[j]-sum[i<span class="number">-1</span>]);</span><br><span class="line">dpmin[i][j]=<span class="built_in">min</span>(dpmin[i][j],dpmin[i][k]+dpmin[k+<span class="number">1</span>][j]+sum[j]-sum[i<span class="number">-1</span>]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ansmax=dpmax[<span class="number">1</span>][n],ansmin=dpmin[<span class="number">1</span>][n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i){</span><br><span class="line">ansmax=<span class="built_in">max</span>(ansmax,dpmax[i][i+n<span class="number">-1</span>]);</span><br><span class="line">ansmin=<span class="built_in">min</span>(ansmin,dpmin[i][i+n<span class="number">-1</span>]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n%d\n"</span>,ansmin,ansmax);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//int t;scanf("%d",&amp;t);</span></span><br><span class="line"><span class="comment">//while(t--)</span></span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="树形dp"><a href="#树形dp" class="headerlink" title="树形dp"></a>树形dp</h3><p>就是在树上进行的dp(确信)</p><ul><li>一般为递归实现</li></ul><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><p><a href="https://www.luogu.com.cn/problem/P1352">没有上司的舞会</a></p><h5 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h5><p>某大学有 n 个职员，编号为 1…n 。</p><p>他们之间有从属关系，也就是说他们的关系就像一棵以校长为根的树，父结点就是子结点的直接上司。</p><p>现在有个周年庆宴会，宴会每邀请来一个职员都会增加一定的快乐指数 r_i，但是呢，如果某个职员的直接上司来参加舞会了，那么这个职员就无论如何也不肯来参加舞会了。</p><p>所以，请你编程计算，邀请哪些职员可以使快乐指数最大，求最大的快乐指数。</p><p><strong>输入格式</strong></p><p>输入的第一行是一个整数 n。</p><p>第 22 到第 (n + 1) 行，每行一个整数，第 (i + 1) 行的整数表示 i<em>i</em> 号职员的快乐指数 r_i 。</p><p>第 (n + 2) 到第 2n2<em>n</em> 行，每行输入一对整数 l , k ，代表 k 是 l 的直接上司。</p><p><strong>输出格式</strong></p><p>输出一行一个整数代表最大的快乐指数。</p><p><strong>输入输出样例</strong></p><p><em>输入</em></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1 3</span><br><span class="line">2 3</span><br><span class="line">6 4</span><br><span class="line">7 4</span><br><span class="line">4 5</span><br><span class="line">3 5</span><br></pre></td></tr></tbody></table></figure><p><em>输出</em></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></tbody></table></figure><p><strong>数据范围</strong></p><p>对于 100% 的数据，保证 1 ≤ n ≤ 6 * 10³ , -128 ≤ r_i ≤ 127 , 1 ≤ l,k ≤ n，且给出的关系一定是一棵树。</p><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>用 f(i,0/1) 代表以 i 为根的子树的最优解 (0表示 i 不参加舞会，1表示 i 参加舞会)。</p><p><strong>状态转移方程</strong></p><ul><li>f(i,0) = ∑max{f(x,1),f(x,0)} (上司不参加舞会，下属可参加可不参加)</li><li>f(i,1) = ∑f(x,0) + a_i (上司参加舞会，下属不参加)</li></ul><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXX=<span class="number">6005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">0.0000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[MAXX],ans[MAXX][<span class="number">2</span>],in[MAXX];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; son[MAXX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> flag)</span></span>{</span><br><span class="line"><span class="keyword">if</span>(ans[now][flag]!=Inf)</span><br><span class="line"><span class="keyword">return</span> ans[now][flag];</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>){</span><br><span class="line"><span class="keyword">int</span> re=a[now];</span><br><span class="line"><span class="keyword">int</span> si=son[now].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;si;++i)</span><br><span class="line">re+=<span class="built_in">dfs</span>(son[now][i],<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> ans[now][flag]=re;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{</span><br><span class="line"><span class="keyword">int</span> re=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> si=son[now].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;si;++i)</span><br><span class="line">re+=<span class="built_in">max</span>(<span class="built_in">dfs</span>(son[now][i],<span class="number">1</span>),<span class="built_in">dfs</span>(son[now][i],<span class="number">0</span>));</span><br><span class="line"><span class="keyword">return</span> ans[now][flag]=re;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_it</span><span class="params">()</span></span>{</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i){</span><br><span class="line"><span class="keyword">int</span> jj,kk;<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;jj,&amp;kk);</span><br><span class="line">son[kk].<span class="built_in">emplace_back</span>(jj);</span><br><span class="line">in[jj]=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="built_in">memset</span>(ans,Inf,<span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i){</span><br><span class="line"><span class="keyword">if</span>(!in[i]){</span><br><span class="line">ans=<span class="built_in">max</span>(<span class="built_in">dfs</span>(i,<span class="number">0</span>),<span class="built_in">dfs</span>(i,<span class="number">1</span>));</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{</span><br><span class="line"><span class="comment">//int t;scanf("%d",&amp;t);</span></span><br><span class="line"><span class="comment">//while(t--)</span></span><br><span class="line"><span class="built_in">solve_it</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2021ACM寒假集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日总结-1月8日</title>
      <link href="/2022/01/08/1-8/"/>
      <url>/2022/01/08/1-8/</url>
      
        <content type="html"><![CDATA[<h2 id="高斯消元与线性基"><a href="#高斯消元与线性基" class="headerlink" title="高斯消元与线性基"></a>高斯消元与线性基</h2><p>高斯消元与线性基(×)</p><p>疯狂查资料搭建博客(√)</p><ul><li>使用的是hexo框架+github的方法搭建的博客</li></ul><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天上午去做核酸，请了假，在做完核酸回来之后一直在搞博客，没有进行训练；下午也是大部分时间都在进行个人博客的一个搭建；晚上依然是搭建博客😭。</p><p>到了1点钟左右，终于是搭建好了自己的博客。</p><p>当然，十分感谢我的好朋友的帮助。不然不知道到什么时候才能搭建好。</p><h3 id="慢的原因-其一"><a href="#慢的原因-其一" class="headerlink" title="慢的原因(其一)"></a>慢的原因(其一)</h3><p>我刚开始是跟着我朋友给我发的链接进行一步一步操作的，但是，在进行了无数次的重复操作并且每次都是以失败告终后，我感觉，有问题。</p><p>之后去各种地方查找相关资料，最后，在(今晚🤔忘了几点了，总之就很晚，可能快12点吧)的时候，我终于在B站的<a href="https://www.bilibili.com/video/BV1mU4y1j72n?from=search&amp;seid=2169282526152443726&amp;spm_id_from=333.337.0.0">这个视频</a>中取到了真经。</p><p>具体原因就是我刚开始看的教程都是老版的教程，但是最近github有进行这方面的更新</p><ul><li>在上传到github上时不能用密钥进行验证了</li><li>默认的分支进行修改了</li></ul><h3 id="解决方法-其一-和原版教程相比"><a href="#解决方法-其一-和原版教程相比" class="headerlink" title="解决方法(其一)(和原版教程相比)"></a>解决方法(其一)(和原版教程相比)</h3><ul><li><p>将 <em>_config.yml</em> 文件中的 <em>branch</em> 选项改为 <em>main</em></p><p>(之前的教程中这里都是<em>master</em>)</p></li><li><p>在输入用户名密码验证的输入密码时，不能输入账户的密码，应该输入令牌(令牌设置在下一条)或者使用其他方法进行验证。</p></li><li><p>令牌的设置</p><ul><li>在github中进入 <em>settings</em></li><li>点击 <em>Developer settings</em> </li><li>点击 <em>Personal access tokens</em></li><li>新建一个令牌</li><li>即可</li></ul></li></ul><h3 id="慢的原因-其二"><a href="#慢的原因-其二" class="headerlink" title="慢的原因(其二)"></a>慢的原因(其二)</h3><p>我在写昨天的那片博客的时候，需要在里面复制一张图片，但是，不管是使用绝对路径还是使用相对路径，在本地的.md文件中可以正常看到图片，但是到网页端就看不到图片。</p><h3 id="解决方法-其二"><a href="#解决方法-其二" class="headerlink" title="解决方法(其二)"></a>解决方法(其二)</h3><p>我是看B站上的<a href="https://www.bilibili.com/video/BV1D7411U7Yk?from=search&amp;seid=3582402406331181956&amp;spm_id_from=333.337.0.0">这个视频</a>进行操作的。</p><p>具体的就是</p><ol><li>将 <em>_config.yml</em> 文件中的 <em>post_asset_folder</em> 选项设置为 <em>true</em> </li><li>下载一个插件</li></ol><ul><li>在 <code>\source\_posts</code> 路径下进行 <em>Git Bash</em> </li><li>输入 <code>npm add https://github.com/CodeFalling/hexo-asset-image</code> 进行下载</li></ul><ol start="3"><li>之后在.md文件中需要使用图片时，使用相对路径即可</li></ol><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>不管怎么样，也算是把博客搭建好了，之后会进行博客的美化工作。</p>]]></content>
      
      
      <categories>
          
          <category> 2021ACM寒假集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 数论 </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日总结:1月7日</title>
      <link href="/2022/01/08/1-7/"/>
      <url>/2022/01/08/1-7/</url>
      
        <content type="html"><![CDATA[<h2 id="高斯消元与线性基"><a href="#高斯消元与线性基" class="headerlink" title="高斯消元与线性基"></a>高斯消元与线性基</h2><p>感觉就是线代里面的矩阵，还有线性相关，这两部分。</p><h3 id="今日战况"><a href="#今日战况" class="headerlink" title="今日战况"></a>今日战况</h3><p><img src="/2022/01/08/1-7/result.png" alt="result"></p><h3 id="今日总结"><a href="#今日总结" class="headerlink" title="今日总结"></a>今日总结</h3><p><em>A题快要写吐了，但是在写A题的时候把高斯消元理解了不少。甚至快把矩阵类(结构体)给封装好了(bushi)。</em></p><p>把差不多写好的浮点数的矩阵结构体代码放到这里。</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span>{</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">double</span>&gt; &gt; c;</span><br><span class="line"><span class="keyword">int</span> nn,mm;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Matrix</span>(){</span><br><span class="line">nn=<span class="number">0</span>;mm=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">Matrix</span>(<span class="keyword">int</span> nnn,<span class="keyword">int</span> mmm){</span><br><span class="line">nn=nnn;mm=mmm;</span><br><span class="line">c.<span class="built_in">resize</span>(nnn+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nn;++i)</span><br><span class="line">c[i].<span class="built_in">resize</span>(mm+<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> Matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> Matrix&amp; x,<span class="keyword">const</span> Matrix&amp; y){</span><br><span class="line"><span class="function">Matrix <span class="title">re</span><span class="params">(x.nn,y.mm)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x.nn;++i){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=y.mm;++j){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=x.mm;++k){</span><br><span class="line">re.c[i][j]+=(<span class="keyword">double</span>)((LL)(x.c[i][k]*y.c[k][j])%MOD)+x.c[i][k]*y.c[k][j]-(LL)(x.c[i][k]*y.c[k][j]);</span><br><span class="line">re.c[i][j]=(<span class="keyword">double</span>)((LL)(re.c[i][j])%MOD)+re.c[i][j]-(LL)(re.c[i][j]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">elimination</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">int</span> nm=<span class="built_in">min</span>(nn,mm);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> cc=<span class="number">1</span>,r=<span class="number">1</span>;cc&lt;=nm;++cc){</span><br><span class="line"><span class="keyword">int</span> t=r;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=r+<span class="number">1</span>;i&lt;=nn;++i)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(c[i][cc])&gt;<span class="built_in">fabs</span>(c[t][cc]))</span><br><span class="line">t=i;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(c[t][cc])&lt;eps) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(t!=r){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=cc;j&lt;=mm;++j)</span><br><span class="line"><span class="built_in">swap</span>(c[t][j],c[r][j]);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=mm;j&gt;=cc;--j)</span><br><span class="line">c[r][j]/=c[r][cc];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nn;++i){</span><br><span class="line"><span class="keyword">if</span>(i==r) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(c[i][cc])&gt;eps)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=mm;j&gt;=cc;--j)</span><br><span class="line">c[i][j]=c[i][j]-c[i][cc]*c[r][j];</span><br><span class="line">}</span><br><span class="line">++r;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">inverse</span><span class="params">()</span> <span class="keyword">const</span></span>{</span><br><span class="line"><span class="function">Matrix <span class="title">re</span><span class="params">(<span class="keyword">this</span>-&gt;nn,<span class="keyword">this</span>-&gt;mm)</span>,temp</span>=*<span class="keyword">this</span>;</span><br><span class="line">temp.mm*=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=temp.nn;++i){</span><br><span class="line">temp.c[i].<span class="built_in">resize</span>(temp.mm+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=temp.nn;++i){</span><br><span class="line">temp.c[i][temp.nn+i]=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">temp.<span class="built_in">elimination</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=re.nn;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=re.mm;++j){</span><br><span class="line">re.c[i][j]=temp.c[i][re.nn+j];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> re;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nn;++i){</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;mm;++j){</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lf "</span>,c[i][j]);</span><br><span class="line">}</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,c[i][mm]);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><ul><li>在后面线性基的学习中，在网上查了不少，也理解的差不多了，感觉就跟线代里面的最大线性不相关向量组(好像叫这名)很像，只不过是变成了二进制的形式。</li><li>然后G题里有一个坑(可能并不算坑)，当线性基的元素个数等于n的时候，他们异或得不到0这个结果。</li><li>这部分感觉主要就是熟悉理解模板。但是C题实在是看不出来和高斯消元有什么关系，A题也是一直WA，用了两种方法，都是WA。现在也没想出比较好的解决方法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2021ACM寒假集训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/08/hello-world/"/>
      <url>/2022/01/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
