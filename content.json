{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"cfRound#764(Div.3)Summary","slug":"cfRound-764-Div-3-Summary","date":"2022-01-11T13:36:07.000Z","updated":"2022-01-11T13:44:19.665Z","comments":true,"path":"2022/01/11/cfRound-764-Div-3-Summary/","link":"","permalink":"http://example.com/2022/01/11/cfRound-764-Div-3-Summary/","excerpt":"","text":"Codeforces Round #764(Div. 3)CONTEST传送门 战况Standing Rating","categories":[],"tags":[{"name":"codeforces-practice","slug":"codeforces-practice","permalink":"http://example.com/tags/codeforces-practice/"}]},{"title":"每日总结-1月11日","slug":"1-11","date":"2022-01-11T13:17:05.000Z","updated":"2022-01-11T13:51:32.033Z","comments":true,"path":"2022/01/11/1-11/","link":"","permalink":"http://example.com/2022/01/11/1-11/","excerpt":"","text":"dp进阶区间dp&amp;树形dp&amp;概率dp&amp;数位dp 今日战况 前言vj上的题好难啊， 第一题我看着和昨天的那道”石子合并”挺像的，但就是不知道怎么类比过去，看了半天就是不知道该怎么写。其他题看着也都好难，思路也都想不出来。 关于昨晚的CFCF Round #764 (Div. 3)总结 总结进阶dp(还有基础dp)现在还是软肋，仍需大量练习理解。","categories":[],"tags":[{"name":"2021ACM寒假集训","slug":"2021ACM寒假集训","permalink":"http://example.com/tags/2021ACM%E5%AF%92%E5%81%87%E9%9B%86%E8%AE%AD/"}]},{"title":"每日总结-1月10日","slug":"1-10","date":"2022-01-10T12:05:24.000Z","updated":"2022-01-11T13:51:12.251Z","comments":true,"path":"2022/01/10/1-10/","link":"","permalink":"http://example.com/2022/01/10/1-10/","excerpt":"","text":"dp进阶区间dp&amp;树形dp&amp;概率dp&amp;数位dp 前言今天没有弄题目，就在网上找资料学习和做题。 感觉这一部分好难，不太好理解，难以运用。需要大量的练习。 区间dp区间类动态规划是线性动态规划的扩展，它在分阶段地划分问题时，与阶段中元素出现的顺序和由前一阶段的哪些元素合并而来有很大的关系。 令状态 f(i,j) 表示将下标位置 i 到 j 的所有元素合并能获得的价值的最大值，那么 f(i,j)=max&#123;f(i,k)+f(k+1,j)+cost&#125; ， cost 为将这两组元素合并起来的代价。 特点 合并：将两个或多个部分进行整合，当然也可以反过来。 特征：能将问题分解为能两两合并的形式。 求解：对整个问题设最优质，枚举合并点，将问题分解为左右两个部分，最后合并两个部分的最优值得到原问题的最优值。 例题石子合并 题目将 n 堆石子绕圆形操场排放，现要将石子有序地合并成一堆。规定每次只能选相邻的两堆合并成新的一堆，并将新的一堆的石子数记做该次合并的得分。 请编写一个程序，读入堆数 n 及每堆的石子数，并进行如下计算： 选择一种合并石子的方案，使得做 n-1 次合并得分总和最大。 选择一种合并石子的方案，使得做 n-1 次合并得分总和最小。 输入格式 输入第一行一个整数 n ，表示有 n 堆石子。 第二行 n 个整数，表示每堆石子的数量。 输出格式 输出共两行： 第一行为合并得分总和最小值， 第二行为合并得分总和最大值。 样例 输入 1244 5 9 4 输出 124354 数据范围与提示 对于 100% 的数据，有 1 ≤ n ≤ 200 。 思路状态转移方程 环的处理 将链延长至两倍，变成 2*n 堆，其中第 i 堆与第 n+i 堆相同，用动态规划求解后，取 f(1,n),f(2,n+1),…,f(i,n+i-1) 中的最优值，即为最后的答案。 时间复杂度 O(n³) 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;#include&lt;queue&gt;#include&lt;stack&gt;#include&lt;cstring&gt;#define Inf 0x3f3f3f3fusing namespace std;typedef pair&lt;int,int&gt; P;typedef long long LL;const int MAXX=210;const double eps=0.0000001;int n,a[2*MAXX],sum[2*MAXX],dpmax[2*MAXX][2*MAXX],dpmin[2*MAXX][2*MAXX];void solve_it()&#123; scanf(&quot;%d&quot;,&amp;n); int n2=n*2; for(int i=1;i&lt;=n;++i)&#123; scanf(&quot;%d&quot;,&amp;a[i]); a[n+i]=a[i]; &#125; for(int i=1;i&lt;=n2;++i) sum[i]=sum[i-1]+a[i]; memset(dpmin,Inf,sizeof(dpmin)); for(int i=1;i&lt;=n2;++i) dpmin[i][i]=0; for(int c=2;c&lt;=n;++c)&#123; for(int i=1;i&lt;n2;++i)&#123; int j=i+c-1; for(int k=i;k&lt;j&amp;&amp;k&lt;n2;++k)&#123; dpmax[i][j]=max(dpmax[i][j],dpmax[i][k]+dpmax[k+1][j]+sum[j]-sum[i-1]); dpmin[i][j]=min(dpmin[i][j],dpmin[i][k]+dpmin[k+1][j]+sum[j]-sum[i-1]); &#125; &#125; &#125; int ansmax=dpmax[1][n],ansmin=dpmin[1][n]; for(int i=2;i&lt;=n;++i)&#123; ansmax=max(ansmax,dpmax[i][i+n-1]); ansmin=min(ansmin,dpmin[i][i+n-1]); &#125; printf(&quot;%d\\n%d\\n&quot;,ansmin,ansmax); &#125;int main()&#123;// int t;scanf(&quot;%d&quot;,&amp;t);// while(t--) solve_it(); return 0;&#125; 树形dp就是在树上进行的dp(确信) 一般为递归实现 例题没有上司的舞会 题目某大学有 n 个职员，编号为 1…n 。 他们之间有从属关系，也就是说他们的关系就像一棵以校长为根的树，父结点就是子结点的直接上司。 现在有个周年庆宴会，宴会每邀请来一个职员都会增加一定的快乐指数 r_i，但是呢，如果某个职员的直接上司来参加舞会了，那么这个职员就无论如何也不肯来参加舞会了。 所以，请你编程计算，邀请哪些职员可以使快乐指数最大，求最大的快乐指数。 输入格式 输入的第一行是一个整数 n。 第 22 到第 (n + 1) 行，每行一个整数，第 (i + 1) 行的整数表示 ii 号职员的快乐指数 r_i 。 第 (n + 2) 到第 2n2n 行，每行输入一对整数 l , k ，代表 k 是 l 的直接上司。 输出格式 输出一行一个整数代表最大的快乐指数。 输入输出样例 输入 1234567891011121314711111111 32 36 47 44 53 5 输出 15 数据范围 对于 100% 的数据，保证 1 ≤ n ≤ 6 * 10³ , -128 ≤ r_i ≤ 127 , 1 ≤ l,k ≤ n，且给出的关系一定是一棵树。 思路用 f(i,0/1) 代表以 i 为根的子树的最优解 (0表示 i 不参加舞会，1表示 i 参加舞会)。 状态转移方程 f(i,0) = ∑max{f(x,1),f(x,0)} (上司不参加舞会，下属可参加可不参加) f(i,1) = ∑f(x,0) + a_i (上司参加舞会，下属不参加) 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include&lt;cstdio&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;#include&lt;queue&gt;#include&lt;stack&gt;#include&lt;cstring&gt;#define Inf 0x3f3f3f3fusing namespace std;typedef pair&lt;int,int&gt; P;typedef long long LL;const int MAXX=6005;const double eps=0.0000001;int n,a[MAXX],ans[MAXX][2],in[MAXX];vector&lt;int&gt; son[MAXX];int dfs(int now,int flag)&#123; if(ans[now][flag]!=Inf) return ans[now][flag]; if(flag==1)&#123; int re=a[now]; int si=son[now].size(); for(int i=0;i&lt;si;++i) re+=dfs(son[now][i],0); return ans[now][flag]=re; &#125; else&#123; int re=0; int si=son[now].size(); for(int i=0;i&lt;si;++i) re+=max(dfs(son[now][i],1),dfs(son[now][i],0)); return ans[now][flag]=re; &#125;&#125;void solve_it()&#123; scanf(&quot;%d&quot;,&amp;n); for(int i=1;i&lt;=n;++i) scanf(&quot;%d&quot;,&amp;a[i]); for(int i=1;i&lt;n;++i)&#123; int jj,kk;scanf(&quot;%d%d&quot;,&amp;jj,&amp;kk); son[kk].emplace_back(jj); in[jj]=1; &#125; memset(ans,Inf,sizeof(ans)); int ans=0; for(int i=1;i&lt;=n;++i)&#123; if(!in[i])&#123; ans=max(dfs(i,0),dfs(i,1)); &#125; &#125; printf(&quot;%d\\n&quot;,ans);&#125;int main()&#123;// int t;scanf(&quot;%d&quot;,&amp;t);// while(t--) solve_it(); return 0;&#125;","categories":[],"tags":[{"name":"2021ACM寒假集训","slug":"2021ACM寒假集训","permalink":"http://example.com/tags/2021ACM%E5%AF%92%E5%81%87%E9%9B%86%E8%AE%AD/"}]},{"title":"每日总结-1月8日","slug":"1-8","date":"2022-01-08T15:33:25.000Z","updated":"2022-01-10T12:55:12.676Z","comments":true,"path":"2022/01/08/1-8/","link":"","permalink":"http://example.com/2022/01/08/1-8/","excerpt":"","text":"高斯消元与线性基高斯消元与线性基(×) 疯狂查资料搭建博客(√) 使用的是hexo框架+github的方法搭建的博客 前言今天上午去做核酸，请了假，在做完核酸回来之后一直在搞博客，没有进行训练；下午也是大部分时间都在进行个人博客的一个搭建；晚上依然是搭建博客😭。 到了1点钟左右，终于是搭建好了自己的博客。 当然，十分感谢我的好朋友的帮助。不然不知道到什么时候才能搭建好。 慢的原因(其一)我刚开始是跟着我朋友给我发的链接进行一步一步操作的，但是，在进行了无数次的重复操作并且每次都是以失败告终后，我感觉，有问题。 之后去各种地方查找相关资料，最后，在(今晚🤔忘了几点了，总之就很晚，可能快12点吧)的时候，我终于在B站的这个视频中取到了真经。 具体原因就是我刚开始看的教程都是老版的教程，但是最近github有进行这方面的更新 在上传到github上时不能用密钥进行验证了 默认的分支进行修改了 解决方法(其一)(和原版教程相比) 将 _config.yml 文件中的 branch 选项改为 main (之前的教程中这里都是master) 在输入用户名密码验证的输入密码时，不能输入账户的密码，应该输入令牌(令牌设置在下一条)或者使用其他方法进行验证。 令牌的设置 在github中进入 settings 点击 Developer settings 点击 Personal access tokens 新建一个令牌 即可 慢的原因(其二)我在写昨天的那片博客的时候，需要在里面复制一张图片，但是，不管是使用绝对路径还是使用相对路径，在本地的.md文件中可以正常看到图片，但是到网页端就看不到图片。 解决方法(其二)我是看B站上的这个视频进行操作的。 具体的就是 将 _config.yml 文件中的 post_asset_folder 选项设置为 true 下载一个插件 在 \\source\\_posts 路径下进行 Git Bash 输入 npm add https://github.com/CodeFalling/hexo-asset-image 进行下载 之后在.md文件中需要使用图片时，使用相对路径即可 结语不管怎么样，也算是把博客搭建好了，之后会进行博客的美化工作。 如果遇到了类似的困难，可以将本篇博客转发。","categories":[],"tags":[{"name":"2021ACM寒假集训","slug":"2021ACM寒假集训","permalink":"http://example.com/tags/2021ACM%E5%AF%92%E5%81%87%E9%9B%86%E8%AE%AD/"}]},{"title":"每日总结:1月7日","slug":"1-7","date":"2022-01-08T14:25:04.000Z","updated":"2022-01-10T12:08:38.040Z","comments":true,"path":"2022/01/08/1-7/","link":"","permalink":"http://example.com/2022/01/08/1-7/","excerpt":"","text":"高斯消元与线性基感觉就是线代里面的矩阵，还有线性相关，这两部分。 今日战况 今日总结A题快要写吐了，但是在写A题的时候把高斯消元理解了不少。甚至快把矩阵类(结构体)给封装好了(bushi)。 把差不多写好的浮点数的矩阵结构体代码放到这里。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081struct Matrix&#123; vector&lt;vector&lt;double&gt; &gt; c; int nn,mm; Matrix()&#123; nn=0;mm=0; &#125; Matrix(int nnn,int mmm)&#123; nn=nnn;mm=mmm; c.resize(nnn+1); for(int i=1;i&lt;=nn;++i) c[i].resize(mm+1); &#125; friend Matrix operator*(const Matrix&amp; x,const Matrix&amp; y)&#123; Matrix re(x.nn,y.mm); for(int i=1;i&lt;=x.nn;++i)&#123; for(int j=1;j&lt;=y.mm;++j)&#123; for(int k=1;k&lt;=x.mm;++k)&#123; re.c[i][j]+=(double)((LL)(x.c[i][k]*y.c[k][j])%MOD)+x.c[i][k]*y.c[k][j]-(LL)(x.c[i][k]*y.c[k][j]); re.c[i][j]=(double)((LL)(re.c[i][j])%MOD)+re.c[i][j]-(LL)(re.c[i][j]); &#125; &#125; &#125; return re; &#125; void elimination()&#123; int nm=min(nn,mm); for(int cc=1,r=1;cc&lt;=nm;++cc)&#123; int t=r; for(int i=r+1;i&lt;=nn;++i) if(fabs(c[i][cc])&gt;fabs(c[t][cc])) t=i; if(fabs(c[t][cc])&lt;eps) continue; if(t!=r)&#123; for(int j=cc;j&lt;=mm;++j) swap(c[t][j],c[r][j]); &#125; for(int j=mm;j&gt;=cc;--j) c[r][j]/=c[r][cc]; for(int i=1;i&lt;=nn;++i)&#123; if(i==r) continue; if(fabs(c[i][cc])&gt;eps) for(int j=mm;j&gt;=cc;--j) c[i][j]=c[i][j]-c[i][cc]*c[r][j]; &#125; ++r; &#125; &#125; Matrix inverse() const&#123; Matrix re(this-&gt;nn,this-&gt;mm),temp=*this; temp.mm*=2; for(int i=1;i&lt;=temp.nn;++i)&#123; temp.c[i].resize(temp.mm+1,0); &#125; for(int i=1;i&lt;=temp.nn;++i)&#123; temp.c[i][temp.nn+i]=1; &#125; temp.elimination(); for(int i=1;i&lt;=re.nn;++i) for(int j=1;j&lt;=re.mm;++j)&#123; re.c[i][j]=temp.c[i][re.nn+j]; &#125; return re; &#125; void output()&#123; for(int i=1;i&lt;=nn;++i)&#123; for(int j=1;j&lt;mm;++j)&#123; printf(&quot;%lf &quot;,c[i][j]); &#125; printf(&quot;%lf\\n&quot;,c[i][mm]); &#125; &#125;&#125;; 在后面线性基的学习中，在网上查了不少，也理解的差不多了，感觉就跟线代里面的最大线性不相关向量组(好像叫这名)很像，只不过是变成了二进制的形式。 然后G题里有一个坑(可能并不算坑)，当线性基的元素个数等于n的时候，他们异或得不到0这个结果。 这部分感觉主要就是熟悉理解模板。但是C题实在是看不出来和高斯消元有什么关系，A题也是一直WA，用了两种方法，都是WA。现在也没想出比较好的解决方法。","categories":[],"tags":[{"name":"2021ACM寒假集训","slug":"2021ACM寒假集训","permalink":"http://example.com/tags/2021ACM%E5%AF%92%E5%81%87%E9%9B%86%E8%AE%AD/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-01-08T14:04:51.654Z","updated":"2022-01-08T14:04:51.654Z","comments":true,"path":"2022/01/08/hello-world/","link":"","permalink":"http://example.com/2022/01/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"codeforces-practice","slug":"codeforces-practice","permalink":"http://example.com/tags/codeforces-practice/"},{"name":"2021ACM寒假集训","slug":"2021ACM寒假集训","permalink":"http://example.com/tags/2021ACM%E5%AF%92%E5%81%87%E9%9B%86%E8%AE%AD/"}]}